//------------------------------------------------------------------------------
//   This code was generated by TemplateProcessor Version: 1.1.0.0
//   using the template file: TemplateExtensions.txt.
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//------------------------------------------------------------------------------
using System;
using System.Diagnostics;
using FpML.V5r3.Codelist;
using Orion.Util.NamedValues;

namespace FpML.V5r3.Codes
{
    public interface IFpMLCodeValue
    {
        string GetPrimaryKey();
    }
    public interface IFpMLCodeScheme
    {
        string GetItemName(string suffix);
        NamedValueSet GetItemProps();
        IFpMLCodeValue CreateCodeValue(Row dataRow);
        string GetFpMLSource();
        void AddCodeValue(IFpMLCodeValue codeValue);
    }
    public enum FpMLCodeSchemeEnum
    {
        AssetClass,
        AssetMeasure,
        BrokerConfirmationType,
        BusinessCenter,
        CashflowType,
        IndexAnnexSource,
        ClearanceSystem,
        CompoundingFrequency,
        ContractualDefinitions,
        ContractualSupplement,
        CouponType,
        MatrixTerm,
        CreditSeniority,
        CreditSeniorityTrading,
        CreditSupportAgreementType,
        CutName,
        DayCountFraction,
        DerivativeCalculationMethod,
        DesignatedPriority,
        EntityType,
        LoanType,
        FloatingRateIndex,
        GoverningLaw,
        InflationIndexDescription,
        InflationIndexSource,
        InflationMainPublication,
        InformationProvider,
        InterpolationMethod,
        LocalJurisdiction,
        MarketDisruption,
        MasterAgreementType,
        MasterConfirmationType,
        MatrixType,
        MortgageSector,
        PerturbationType,
        PositionStatus,
        PriceQuoteUnits,
        PricingInputType,
        ProductTaxonomy,
        ProductTypeSimple,
        QueryParameterOperator,
        QuoteTiming,
        ReasonCode,
        Restructuring,
        ScheduledDateType,
        SettledEntityMatrixSource,
        SettlementMethod,
        SettlementPriceSource,
        SettlementRateOption,
        SpreadScheduleType,
        TradeCashflowsStatus,
    }
    public class FpMLCodeSchemeFactory
    {
        public static IFpMLCodeScheme CreateCodeScheme(string classDefName)
        {
            switch (classDefName)
            {
                case "AssetClass": return new AssetMeasureScheme(); //AssetClassScheme();
                case "AssetMeasure": return new AssetMeasureScheme();
                case "BrokerConfirmationType": return new BrokerConfirmationTypeScheme();
                //case "BullionDeliveryLocation": return new BrokerConfirmationTypeScheme(); //BullionDeliveryLocationScheme();
                case "BusinessCenter": return new BusinessCenterScheme();
                //case "BusinessProcess": return new BusinessCenterScheme();//TODO
                case "CashflowType": return new CashflowTypeScheme();
                case "IndexAnnexSource": return new IndexAnnexSourceScheme();
                case "ClearanceSystem": return new ClearanceSystemScheme();
                //case "ClearingStatus": return new ClearanceSystemScheme();//TODO
                //case "CollateralDisputeResolutionMethodReason": return new ClearanceSystemScheme();//TODO
                //case "CollateralInterestResponseReason": return new ClearanceSystemScheme();//TODO
                //case "CollateralMarginCallResponseReason": return new ClearanceSystemScheme();//TODO
                //case "CollateralResponseReason": return new ClearanceSystemScheme();//TODO
                //case "CollateralReactionReason": return new ClearanceSystemScheme();//TODO
                //case "CollateralSubstitutionResponseReason": return new ClearanceSystemScheme();//TODO
                //case "CollateralType": return new ClearanceSystemScheme();//TODO
                //case "CommodityBusinessCalendar": return new ClearanceSystemScheme();//TODO
                //case "CommodityCoalProductSource": return new ClearanceSystemScheme();//TODO
                //case "CommodityCoalProductType": return new ClearanceSystemScheme();//TODO
                //case "CommodityCoalQualityAdjustments": return new ClearanceSystemScheme();//TODO
                //case "CommodityCoalTransportationEquipment": return new ClearanceSystemScheme();//TODO
                //case "CommodityCode": return new ClearanceSystemScheme();//TODO
                //case "CommodityExpireRelativeToEvent": return new ClearanceSystemScheme();//TODO
                //case "CommodityFrequencyType": return new ClearanceSystemScheme();//TODO
                //case "CommodityFxType": return new ClearanceSystemScheme();//TODO
                //case "CommodityMarketDisruption": return new ClearanceSystemScheme();//TODO
                //case "CommodityMarketDisruptionFallback": return new ClearanceSystemScheme();//TODO
                //case "CommodityPayRelativeToEvent": return new ClearanceSystemScheme();//TODO
                //case "CommodityQuantityFrequency": return new ClearanceSystemScheme();//TODO
                //case "CommodityReferencePrice": return new ClearanceSystemScheme();//TODO
                case "CompoundingFrequency": return new CompoundingFrequencyScheme();
                case "ContractualDefinitions": return new ContractualDefinitionsScheme();
                case "ContractualSupplement": return new ContractualSupplementScheme();
                case "CouponType": return new CouponTypeScheme();
                case "CreditSeniority": return new CreditSeniorityScheme();
                case "CreditSeniorityTrading": return new CreditSeniorityTradingScheme();
                case "CreditSupportAgreementType": return new CreditSupportAgreementTypeScheme();
                case "CutName": return new CutNameScheme();
                case "DayCountFraction": return new DayCountFractionScheme();
                case "DerivativeCalculationMethod": return new DerivativeCalculationMethodScheme();
                case "DesignatedPriority": return new DesignatedPriorityScheme();
                case "EntityType": return new EntityTypeScheme();
                case "FloatingRateIndex": return new FloatingRateIndexScheme();
                case "GoverningLaw": return new GoverningLawScheme();
                case "InflationIndexDescription": return new InflationIndexDescriptionScheme();
                case "InflationIndexSource": return new InflationIndexSourceScheme();
                case "InflationMainPublication": return new InflationMainPublicationScheme();
                case "InformationProvider": return new InformationProviderScheme();
                case "InterpolationMethod": return new InterpolationMethodScheme();
                case "LoanType": return new LoanTypeScheme();
                case "LocalJurisdiction": return new LocalJurisdictionScheme();
                case "MarketDisruption": return new MarketDisruptionScheme();
                case "MasterAgreementType": return new MasterAgreementTypeScheme();
                case "MasterConfirmationType": return new MasterConfirmationTypeScheme();
                case "MatrixTerm": return new MatrixTermScheme();
                case "MatrixType": return new MatrixTypeScheme();
                case "MortgageSector": return new MortgageSectorScheme();
                case "PerturbationType": return new PerturbationTypeScheme();
                case "PositionStatus": return new PositionStatusScheme();
                case "PriceQuoteUnits": return new PriceQuoteUnitsScheme();
                case "PricingInputType": return new PricingInputTypeScheme();
                case "ProductTaxonomy": return new ProductTaxonomyScheme();
                case "ProductTypeSimple": return new ProductTypeSimpleScheme();
                case "QueryParameterOperator": return new QueryParameterOperatorScheme();
                case "QuoteTiming": return new QuoteTimingScheme();
                case "ReasonCode": return new ReasonCodeScheme();
                case "Restructuring": return new RestructuringScheme();
                case "ScheduledDateType": return new ScheduledDateTypeScheme();
                case "SettledEntityMatrixSource": return new SettledEntityMatrixSourceScheme();
                case "SettlementMethod": return new SettlementMethodScheme();
                case "SettlementPriceSource": return new SettlementPriceSourceScheme();
                case "SettlementRateOption": return new SettlementRateOptionScheme();
                case "SpreadScheduleType": return new SpreadScheduleTypeScheme();
                case "TradeCashflowsStatus": return new TradeCashflowsStatusScheme();
                default:
                    throw new ArgumentException("Unknown classDefName: " + classDefName);
            }
        }
    }

    // ---------------------------------------- AssetMeasure ----------------------------------------
    public enum AssetMeasureEnum
    {
        Undefined,
        NPV, // (1) "NPV"
        NPVLocalCurrency, // (2) "NPVLocalCurrency"
        Cash, // (3) "Cash"
        PayNPV, // (4) "PayNPV"
        ReceiveNPV, // (5) "ReceiveNPV"
        MarketQuote, // (6) "MarketQuote"
        ConvexityAdjustment, // (7) "ConvexityAdjustment"
        AccruedInterest, // (8) "AccruedInterest"
        Volatility, // (9) "Volatility"
        DividendYield, // (10) "DividendYield"
        CleanNetCurrentMarketPrice, // (11) "CleanNetCurrentMarketPrice"
        CleanGrossCurrentMarketPrice, // (12) "CleanGrossCurrentMarketPrice"
        DirtyNetCurrentMarketPrice, // (13) "DirtyNetCurrentMarketPrice"
        DirtyGrossCurrentMarketPrice, // (14) "DirtyGrossCurrentMarketPrice"
        CleanNetResetPrice, // (15) "CleanNetResetPrice"
        CleanGrossResetPrice, // (16) "CleanGrossResetPrice"
        DirtyNetResetPrice, // (17) "DirtyNetResetPrice"
        DirtyGrossResetPrice, // (18) "DirtyGrossResetPrice"
        AccruedInterestResetPrice, // (19) "AccruedInterestResetPrice"
        NumberOfUnderlyingSecurities, // (20) "NumberOfUnderlyingSecurities"
        ParallelShiftInterestRateSensitivity, // (21) "ParallelShiftInterestRateSensitivity"
        BucketedInterestRateSensitivity, // (22) "BucketedInterestRateSensitivity"
        BucketedInterestRateConvexity, // (23) "BucketedInterestRateConvexity"
        FXSpotSensitivity, // (24) "FXSpotSensitivity"
        ValuationDateChangeSensitivity, // (25) "ValuationDateChangeSensitivity"
        ParallelShiftInterestRateVolatilitySensitivity, // (26) "ParallelShiftInterestRateVolatilitySensitivity"
        BucketedInterestRateVolatilitySensitivity, // (27) "BucketedInterestRateVolatilitySensitivity"
        ParallelShiftCreditSpreadSensitivity, // (28) "ParallelShiftCreditSpreadSensitivity"
        ParallelShiftDefaultProbabilitySensitivity, // (29) "ParallelShiftDefaultProbabilitySensitivity"
        ParallelShiftRecoveryRateSensitivity, // (30) "ParallelShiftRecoveryRateSensitivity"
        BucketedCreditSpreadSensitivity, // (31) "BucketedCreditSpreadSensitivity"
        BucketedDefaultProbabilitySensitivity, // (32) "BucketedDefaultProbabilitySensitivity"
        BucketedRecoveryRateSensitivity, // (33) "BucketedRecoveryRateSensitivity"
        VAR, // (34) "VAR"
        DE_R, // (35) "DE@R"
        EconomicCapital, // (36) "EconomicCapital"
        RegulatoryCapital, // (37) "RegulatoryCapital"
        ReturnOnEconomicCapital, // (38) "ReturnOnEconomicCapital"
        ReturnOnRegulatoryCapital, // (39) "ReturnOnRegulatoryCapital"
        RiskConcentration, // (40) "RiskConcentration"
        EVA, // (41) "EVA"
        MarginalRisk, // (42) "MarginalRisk"
        SharpeRatio, // (43) "SharpeRatio"
        ModifiedSharpeRatio, // (44) "ModifiedSharpeRatio"
        SortinoRatio, // (45) "SortinoRatio"
        TreynorRatio, // (46) "TreynorRatio"
        CAPMBeta, // (47) "CAPMBeta"
        JensensAlpha, // (48) "JensensAlpha"
        RAROC, // (49) "RAROC"
        ROA, // (50) "ROA"
        RORAC, // (51) "RORAC"
        PeakExposure, // (52) "PeakExposure"
        AverageExposure, // (53) "AverageExposure"
        LoanEquivalent, // (54) "LoanEquivalent"
        AccruedCoupon, // (55) "AccruedCoupon"
        CurrentNotional, // (56) "CurrentNotional"
        RecoveryRate, // (57) "RecoveryRate"
        CreditSpread, // (58) "CreditSpread"
        EquityAccrual, // (59) "EquityAccrual"
        RealizedTradingGains, // (60) "RealizedTradingGains"
        FundingOnRealizedGains, // (61) "FundingOnRealizedGains"
        InterestOnRealizedGains, // (62) "InterestOnRealizedGains"
        SettlementFxRate, // (63) "SettlementFxRate"
        ImpliedVolatility, // (64) "ImpliedVolatility"
        CalculatedStrike, // (65) "CalculatedStrike"
        RealizedVariance, // (66) "RealizedVariance"
        CashEquivalentLocalCurrency, // (67) "CashEquivalentLocalCurrency"
        CashEquivalent, // (68) "CashEquivalent"
        TreatedRate, // (69) "TreatedRate"
        TransactedNetPrice, // (70) "TransactedNetPrice"
        TransactedGrossPrice, // (71) "TransactedGrossPrice"
        _LAST_
    }
    public partial class AssetMeasureValue : IFpMLCodeValue
    {
        public AssetMeasureValue()
        { }
        public AssetMeasureValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class AssetMeasureScheme : IFpMLCodeScheme
    {
        private static readonly string[] EnumStrings = 
        {
            null, // (0) Undefined
            "NPV", // (1) NPV
            "NPVLocalCurrency", // (2) NPVLocalCurrency
            "Cash", // (3) Cash
            "PayNPV", // (4) PayNPV
            "ReceiveNPV", // (5) ReceiveNPV
            "MarketQuote", // (6) MarketQuote
            "ConvexityAdjustment", // (7) ConvexityAdjustment
            "AccruedInterest", // (8) AccruedInterest
            "Volatility", // (9) Volatility
            "DividendYield", // (10) DividendYield
            "CleanNetCurrentMarketPrice", // (11) CleanNetCurrentMarketPrice
            "CleanGrossCurrentMarketPrice", // (12) CleanGrossCurrentMarketPrice
            "DirtyNetCurrentMarketPrice", // (13) DirtyNetCurrentMarketPrice
            "DirtyGrossCurrentMarketPrice", // (14) DirtyGrossCurrentMarketPrice
            "CleanNetResetPrice", // (15) CleanNetResetPrice
            "CleanGrossResetPrice", // (16) CleanGrossResetPrice
            "DirtyNetResetPrice", // (17) DirtyNetResetPrice
            "DirtyGrossResetPrice", // (18) DirtyGrossResetPrice
            "AccruedInterestResetPrice", // (19) AccruedInterestResetPrice
            "NumberOfUnderlyingSecurities", // (20) NumberOfUnderlyingSecurities
            "ParallelShiftInterestRateSensitivity", // (21) ParallelShiftInterestRateSensitivity
            "BucketedInterestRateSensitivity", // (22) BucketedInterestRateSensitivity
            "BucketedInterestRateConvexity", // (23) BucketedInterestRateConvexity
            "FXSpotSensitivity", // (24) FXSpotSensitivity
            "ValuationDateChangeSensitivity", // (25) ValuationDateChangeSensitivity
            "ParallelShiftInterestRateVolatilitySensitivity", // (26) ParallelShiftInterestRateVolatilitySensitivity
            "BucketedInterestRateVolatilitySensitivity", // (27) BucketedInterestRateVolatilitySensitivity
            "ParallelShiftCreditSpreadSensitivity", // (28) ParallelShiftCreditSpreadSensitivity
            "ParallelShiftDefaultProbabilitySensitivity", // (29) ParallelShiftDefaultProbabilitySensitivity
            "ParallelShiftRecoveryRateSensitivity", // (30) ParallelShiftRecoveryRateSensitivity
            "BucketedCreditSpreadSensitivity", // (31) BucketedCreditSpreadSensitivity
            "BucketedDefaultProbabilitySensitivity", // (32) BucketedDefaultProbabilitySensitivity
            "BucketedRecoveryRateSensitivity", // (33) BucketedRecoveryRateSensitivity
            "VAR", // (34) VAR
            "DE@R", // (35) DE_R
            "EconomicCapital", // (36) EconomicCapital
            "RegulatoryCapital", // (37) RegulatoryCapital
            "ReturnOnEconomicCapital", // (38) ReturnOnEconomicCapital
            "ReturnOnRegulatoryCapital", // (39) ReturnOnRegulatoryCapital
            "RiskConcentration", // (40) RiskConcentration
            "EVA", // (41) EVA
            "MarginalRisk", // (42) MarginalRisk
            "SharpeRatio", // (43) SharpeRatio
            "ModifiedSharpeRatio", // (44) ModifiedSharpeRatio
            "SortinoRatio", // (45) SortinoRatio
            "TreynorRatio", // (46) TreynorRatio
            "CAPMBeta", // (47) CAPMBeta
            "JensensAlpha", // (48) JensensAlpha
            "RAROC", // (49) RAROC
            "ROA", // (50) ROA
            "RORAC", // (51) RORAC
            "PeakExposure", // (52) PeakExposure
            "AverageExposure", // (53) AverageExposure
            "LoanEquivalent", // (54) LoanEquivalent
            "AccruedCoupon", // (55) AccruedCoupon
            "CurrentNotional", // (56) CurrentNotional
            "RecoveryRate", // (57) RecoveryRate
            "CreditSpread", // (58) CreditSpread
            "EquityAccrual", // (59) EquityAccrual
            "RealizedTradingGains", // (60) RealizedTradingGains
            "FundingOnRealizedGains", // (61) FundingOnRealizedGains
            "InterestOnRealizedGains", // (62) InterestOnRealizedGains
            "SettlementFxRate", // (63) SettlementFxRate
            "ImpliedVolatility", // (64) ImpliedVolatility
            "CalculatedStrike", // (65) CalculatedStrike
            "RealizedVariance", // (66) RealizedVariance
            "CashEquivalentLocalCurrency", // (67) CashEquivalentLocalCurrency
            "CashEquivalent", // (68) CashEquivalent
            "TreatedRate", // (69) TreatedRate
            "TransactedNetPrice", // (70) TransactedNetPrice
            "TransactedGrossPrice", // (71) TransactedGrossPrice
            null // (nn) _LAST_
        };
        public static string GetEnumString(AssetMeasureEnum id) { return EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out AssetMeasureEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (AssetMeasureEnum tempId in Enum.GetValues(typeof(AssetMeasureEnum)))
            {
                if (String.Compare(idString, EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = AssetMeasureEnum.Undefined;
            return false;
        }
        public static AssetMeasureEnum ParseEnumString(string idString)
        {
            var result = AssetMeasureEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to AssetMeasureEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "AssetMeasure"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            var result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "AssetMeasure");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new AssetMeasureValue(dataRow); }
        public string GetFpMLSource() { return "asset-measure-5-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(AssetMeasureValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(AssetMeasureValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                AssetMeasureValue[] newValues = new AssetMeasureValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (AssetMeasureValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("AssetMeasureScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- BrokerConfirmationType ----------------------------------------
    public enum BrokerConfirmationTypeEnum
    {
        Undefined,
        AsiaCorporate, // (1) "AsiaCorporate"
        AsiaSovereign, // (2) "AsiaSovereign"
        AustraliaCorporate, // (3) "AustraliaCorporate"
        AustraliaSovereign, // (4) "AustraliaSovereign"
        EmergingEuropeanAndMiddleEasternSovereign, // (5) "EmergingEuropeanAndMiddleEasternSovereign"
        EuropeanCorporate, // (6) "EuropeanCorporate"
        JapanCorporate, // (7) "JapanCorporate"
        JapanSovereign, // (8) "JapanSovereign"
        LatinAmericaCorporate, // (9) "LatinAmericaCorporate"
        LatinAmericaSovereign, // (10) "LatinAmericaSovereign"
        NewZealandCorporate, // (11) "NewZealandCorporate"
        NewZealandSovereign, // (12) "NewZealandSovereign"
        NorthAmericanCorporate, // (13) "NorthAmericanCorporate"
        SingaporeCorporate, // (14) "SingaporeCorporate"
        SingaporeSovereign, // (15) "SingaporeSovereign"
        SubordinatedEuropeanInsuranceCorporate, // (16) "SubordinatedEuropeanInsuranceCorporate"
        WesternEuropeanSovereign, // (17) "WesternEuropeanSovereign"
        DJ_CDX_NA, // (18) "DJ.CDX.NA"
        DJ_CDX_EM_, // (19) "DJ.CDX.EM "
        CDXEmergingMarketsDiversifiedTranche, // (20) "CDXEmergingMarketsDiversifiedTranche"
        CDXTranche, // (21) "CDXTranche"
        iTraxxEurope, // (22) "iTraxxEurope"
        iTraxxEuropeTranche, // (23) "iTraxxEuropeTranche"
        iTraxxCJ, // (24) "iTraxxCJ"
        iTraxxCJTranche, // (25) "iTraxxCJTranche"
        iTraxxAsiaExJapan, // (26) "iTraxxAsiaExJapan"
        iTraxxAsiaExJapanTranche, // (27) "iTraxxAsiaExJapanTranche"
        iTraxxAustralia, // (28) "iTraxxAustralia"
        iTraxxAustraliaTranche, // (29) "iTraxxAustraliaTranche"
        iTraxxSDI75, // (30) "iTraxxSDI75"
        ABX_HH, // (31) "ABX.HH"
        CMBX, // (32) "CMBX"
        iTraxxLevX, // (33) "iTraxxLevX"
        EmergingEuropeanCorporate, // (34) "EmergingEuropeanCorporate"
        LatinAmericaCorporateBond, // (35) "LatinAmericaCorporateBond"
        LatinAmericaCorporateBondOrLoan, // (36) "LatinAmericaCorporateBondOrLoan"
        _LAST_
    }
    public partial class BrokerConfirmationTypeValue : IFpMLCodeValue
    {
        public BrokerConfirmationTypeValue()
        { }
        public BrokerConfirmationTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class BrokerConfirmationTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "AsiaCorporate", // (1) AsiaCorporate
            "AsiaSovereign", // (2) AsiaSovereign
            "AustraliaCorporate", // (3) AustraliaCorporate
            "AustraliaSovereign", // (4) AustraliaSovereign
            "EmergingEuropeanAndMiddleEasternSovereign", // (5) EmergingEuropeanAndMiddleEasternSovereign
            "EuropeanCorporate", // (6) EuropeanCorporate
            "JapanCorporate", // (7) JapanCorporate
            "JapanSovereign", // (8) JapanSovereign
            "LatinAmericaCorporate", // (9) LatinAmericaCorporate
            "LatinAmericaSovereign", // (10) LatinAmericaSovereign
            "NewZealandCorporate", // (11) NewZealandCorporate
            "NewZealandSovereign", // (12) NewZealandSovereign
            "NorthAmericanCorporate", // (13) NorthAmericanCorporate
            "SingaporeCorporate", // (14) SingaporeCorporate
            "SingaporeSovereign", // (15) SingaporeSovereign
            "SubordinatedEuropeanInsuranceCorporate", // (16) SubordinatedEuropeanInsuranceCorporate
            "WesternEuropeanSovereign", // (17) WesternEuropeanSovereign
            "DJ.CDX.NA", // (18) DJ_CDX_NA
            "DJ.CDX.EM ", // (19) DJ_CDX_EM_
            "CDXEmergingMarketsDiversifiedTranche", // (20) CDXEmergingMarketsDiversifiedTranche
            "CDXTranche", // (21) CDXTranche
            "iTraxxEurope", // (22) iTraxxEurope
            "iTraxxEuropeTranche", // (23) iTraxxEuropeTranche
            "iTraxxCJ", // (24) iTraxxCJ
            "iTraxxCJTranche", // (25) iTraxxCJTranche
            "iTraxxAsiaExJapan", // (26) iTraxxAsiaExJapan
            "iTraxxAsiaExJapanTranche", // (27) iTraxxAsiaExJapanTranche
            "iTraxxAustralia", // (28) iTraxxAustralia
            "iTraxxAustraliaTranche", // (29) iTraxxAustraliaTranche
            "iTraxxSDI75", // (30) iTraxxSDI75
            "ABX.HH", // (31) ABX_HH
            "CMBX", // (32) CMBX
            "iTraxxLevX", // (33) iTraxxLevX
            "EmergingEuropeanCorporate", // (34) EmergingEuropeanCorporate
            "LatinAmericaCorporateBond", // (35) LatinAmericaCorporateBond
            "LatinAmericaCorporateBondOrLoan", // (36) LatinAmericaCorporateBondOrLoan
            null // (nn) _LAST_
        };
        public static string GetEnumString(BrokerConfirmationTypeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out BrokerConfirmationTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (BrokerConfirmationTypeEnum tempId in Enum.GetValues(typeof(BrokerConfirmationTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = BrokerConfirmationTypeEnum.Undefined;
            return false;
        }
        public static BrokerConfirmationTypeEnum ParseEnumString(string idString)
        {
            BrokerConfirmationTypeEnum result = BrokerConfirmationTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to BrokerConfirmationTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "BrokerConfirmationType"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "BrokerConfirmationType");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new BrokerConfirmationTypeValue(dataRow); }
        public string GetFpMLSource() { return "broker-confirmation-type-3-2"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(BrokerConfirmationTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(BrokerConfirmationTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                BrokerConfirmationTypeValue[] newValues = new BrokerConfirmationTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (BrokerConfirmationTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("BrokerConfirmationTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- BusinessCenter ----------------------------------------
    public enum BusinessCenterEnum
    {
        Undefined,
        AEAD, // (1) "AEAD"
        AEDU, // (2) "AEDU"
        ARBA, // (3) "ARBA"
        ATVI, // (4) "ATVI"
        AUME, // (5) "AUME"
        AUSY, // (6) "AUSY"
        AUAD, // (7) "AUAD"
        AUBR, // (8) "AUBR"
        AUPE, // (9) "AUPE"
        AUHO, // (10) "AUHO"
        BEBR, // (11) "BEBR"
        BMHA, // (12) "BMHA"
        BRSP, // (13) "BRSP"
        CAMO, // (14) "CAMO"
        CATO, // (15) "CATO"
        CAVA, // (16) "CAVA"
        CHGE, // (17) "CHGE"
        CHZU, // (18) "CHZU"
        CLSA, // (19) "CLSA"
        CNBE, // (20) "CNBE"
        CZPR, // (21) "CZPR"
        DEDU, // (22) "DEDU"
        DEFR, // (23) "DEFR"
        DEST, // (24) "DEST"
        DKCO, // (25) "DKCO"
        EETA, // (26) "EETA"
        ESAS, // (27) "ESAS"
        ESBA, // (28) "ESBA"
        ESMA, // (29) "ESMA"
        EUTA, // (30) "EUTA"
        FIHE, // (31) "FIHE"
        FRPA, // (32) "FRPA"
        GBLO, // (33) "GBLO"
        GRAT, // (34) "GRAT"
        HKHK, // (35) "HKHK"
        HUBU, // (36) "HUBU"
        IDJA, // (37) "IDJA"
        IEDU, // (38) "IEDU"
        ILTA, // (39) "ILTA"
        INMU, // (40) "INMU"
        ISRE, // (41) "ISRE"
        ITMI, // (42) "ITMI"
        ITRO, // (43) "ITRO"
        JPTO, // (44) "JPTO"
        KRSE, // (45) "KRSE"
        KYGE, // (46) "KYGE"
        LBBE, // (47) "LBBE"
        LULU, // (48) "LULU"
        MOMA, // (49) "MOMA"
        MXMC, // (50) "MXMC"
        MYKL, // (51) "MYKL"
        NLAM, // (52) "NLAM"
        NOOS, // (53) "NOOS"
        NYFD, // (54) "NYFD"
        NYSE, // (55) "NYSE"
        NZAU, // (56) "NZAU"
        NZWE, // (57) "NZWE"
        PAPC, // (58) "PAPC"
        PHMA, // (59) "PHMA"
        PLWA, // (60) "PLWA"
        PTLI, // (61) "PTLI"
        RUMO, // (62) "RUMO"
        SARI, // (63) "SARI"
        SEST, // (64) "SEST"
        SGSI, // (65) "SGSI"
        SKBR, // (66) "SKBR"
        THBA, // (67) "THBA"
        TRAN, // (68) "TRAN"
        TWTA, // (69) "TWTA"
        USCH, // (70) "USCH"
        USGS, // (71) "USGS"
        USLA, // (72) "USLA"
        USNY, // (73) "USNY"
        USSE, // (74) "USSE"
        VECA, // (75) "VECA"
        ZAJO, // (76) "ZAJO"
        _LAST_
    }
    public partial class BusinessCenterValue : IFpMLCodeValue
    {
        public BusinessCenterValue()
        { }
        public BusinessCenterValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class BusinessCenterScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "AEAD", // (1) AEAD
            "AEDU", // (2) AEDU
            "ARBA", // (3) ARBA
            "ATVI", // (4) ATVI
            "AUME", // (5) AUME
            "AUSY", // (6) AUSY
            "AUAD", // (7) AUAD
            "AUBR", // (8) AUBR
            "AUPE", // (9) AUPE
            "AUHO", // (10) AUHO
            "BEBR", // (11) BEBR
            "BMHA", // (12) BMHA
            "BRSP", // (13) BRSP
            "CAMO", // (14) CAMO
            "CATO", // (15) CATO
            "CAVA", // (16) CAVA
            "CHGE", // (17) CHGE
            "CHZU", // (18) CHZU
            "CLSA", // (19) CLSA
            "CNBE", // (20) CNBE
            "CZPR", // (21) CZPR
            "DEDU", // (22) DEDU
            "DEFR", // (23) DEFR
            "DEST", // (24) DEST
            "DKCO", // (25) DKCO
            "EETA", // (26) EETA
            "ESAS", // (27) ESAS
            "ESBA", // (28) ESBA
            "ESMA", // (29) ESMA
            "EUTA", // (30) EUTA
            "FIHE", // (31) FIHE
            "FRPA", // (32) FRPA
            "GBLO", // (33) GBLO
            "GRAT", // (34) GRAT
            "HKHK", // (35) HKHK
            "HUBU", // (36) HUBU
            "IDJA", // (37) IDJA
            "IEDU", // (38) IEDU
            "ILTA", // (39) ILTA
            "INMU", // (40) INMU
            "ISRE", // (41) ISRE
            "ITMI", // (42) ITMI
            "ITRO", // (43) ITRO
            "JPTO", // (44) JPTO
            "KRSE", // (45) KRSE
            "KYGE", // (46) KYGE
            "LBBE", // (47) LBBE
            "LULU", // (48) LULU
            "MOMA", // (49) MOMA
            "MXMC", // (50) MXMC
            "MYKL", // (51) MYKL
            "NLAM", // (52) NLAM
            "NOOS", // (53) NOOS
            "NYFD", // (54) NYFD
            "NYSE", // (55) NYSE
            "NZAU", // (56) NZAU
            "NZWE", // (57) NZWE
            "PAPC", // (58) PAPC
            "PHMA", // (59) PHMA
            "PLWA", // (60) PLWA
            "PTLI", // (61) PTLI
            "RUMO", // (62) RUMO
            "SARI", // (63) SARI
            "SEST", // (64) SEST
            "SGSI", // (65) SGSI
            "SKBR", // (66) SKBR
            "THBA", // (67) THBA
            "TRAN", // (68) TRAN
            "TWTA", // (69) TWTA
            "USCH", // (70) USCH
            "USGS", // (71) USGS
            "USLA", // (72) USLA
            "USNY", // (73) USNY
            "USSE", // (74) USSE
            "VECA", // (75) VECA
            "ZAJO", // (76) ZAJO
            null // (nn) _LAST_
        };
        public static string GetEnumString(BusinessCenterEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out BusinessCenterEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (BusinessCenterEnum tempId in Enum.GetValues(typeof(BusinessCenterEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = BusinessCenterEnum.Undefined;
            return false;
        }
        public static BusinessCenterEnum ParseEnumString(string idString)
        {
            var result = BusinessCenterEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to BusinessCenterEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "BusinessCenter"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            var result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "BusinessCenter");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new BusinessCenterValue(dataRow); }
        public string GetFpMLSource() { return "business-center-6-2"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(BusinessCenterValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(BusinessCenterValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                var newValues = new BusinessCenterValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (BusinessCenterValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("BusinessCenterScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- CashflowType ----------------------------------------
    public enum CashflowTypeEnum
    {
        Undefined,
        Premium, // (1) "Premium"
        PrincipalExchange, // (2) "PrincipalExchange"
        TerminationFee, // (3) "TerminationFee"
        PartialTerminationFee, // (4) "PartialTerminationFee"
        AssignmentFee, // (5) "AssignmentFee"
        Fee, // (6) "Fee"
        Coupon, // (7) "Coupon"
        InterestReturn, // (8) "InterestReturn"
        PriceReturn, // (9) "PriceReturn"
        DividendReturn, // (10) "DividendReturn"
        CreditEvent, // (11) "CreditEvent"
        IncreaseFee, // (12) "IncreaseFee"
        AmendmentFee, // (13) "AmendmentFee"
        ExerciseFee, // (14) "ExerciseFee"
        _LAST_
    }
    public partial class CashflowTypeValue : IFpMLCodeValue
    {
        public CashflowTypeValue()
        { }
        public CashflowTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class CashflowTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Premium", // (1) Premium
            "PrincipalExchange", // (2) PrincipalExchange
            "TerminationFee", // (3) TerminationFee
            "PartialTerminationFee", // (4) PartialTerminationFee
            "AssignmentFee", // (5) AssignmentFee
            "Fee", // (6) Fee
            "Coupon", // (7) Coupon
            "InterestReturn", // (8) InterestReturn
            "PriceReturn", // (9) PriceReturn
            "DividendReturn", // (10) DividendReturn
            "CreditEvent", // (11) CreditEvent
            "IncreaseFee", // (12) IncreaseFee
            "AmendmentFee", // (13) AmendmentFee
            "ExerciseFee", // (14) ExerciseFee
            null // (nn) _LAST_
        };
        public static string GetEnumString(CashflowTypeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out CashflowTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (CashflowTypeEnum tempId in Enum.GetValues(typeof(CashflowTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = CashflowTypeEnum.Undefined;
            return false;
        }
        public static CashflowTypeEnum ParseEnumString(string idString)
        {
            var result = CashflowTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to CashflowTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "CashflowType"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            var result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "CashflowType");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new CashflowTypeValue(dataRow); }
        public string GetFpMLSource() { return "cashflow-type-2-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(CashflowTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(CashflowTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                var newValues = new CashflowTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (CashflowTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("CashflowTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- IndexAnnexSource ----------------------------------------
    public enum IndexAnnexSourceEnum
    {
        Undefined,
        Publisher, // (1) "Publisher"
        MasterConfirmation, // (2) "MasterConfirmation"
        _LAST_
    }
    public partial class IndexAnnexSourceValue : IFpMLCodeValue
    {
        public IndexAnnexSourceValue()
        { }
        public IndexAnnexSourceValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class IndexAnnexSourceScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Publisher", // (1) Publisher
            "MasterConfirmation", // (2) MasterConfirmation
            null // (nn) _LAST_
        };
        public static string GetEnumString(IndexAnnexSourceEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out IndexAnnexSourceEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (IndexAnnexSourceEnum tempId in Enum.GetValues(typeof(IndexAnnexSourceEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = IndexAnnexSourceEnum.Undefined;
            return false;
        }
        public static IndexAnnexSourceEnum ParseEnumString(string idString)
        {
            IndexAnnexSourceEnum result = IndexAnnexSourceEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to IndexAnnexSourceEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "IndexAnnexSource"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "IndexAnnexSource");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new IndexAnnexSourceValue(dataRow); }
        public string GetFpMLSource() { return "cdx-index-annex-source-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(IndexAnnexSourceValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(IndexAnnexSourceValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                IndexAnnexSourceValue[] newValues = new IndexAnnexSourceValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (IndexAnnexSourceValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("IndexAnnexSourceScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- ClearanceSystem ----------------------------------------
    public enum ClearanceSystemEnum
    {
        Undefined,
        Clearstream, // (1) "Clearstream"
        CREST, // (2) "CREST"
        DTCC, // (3) "DTCC"
        Euroclear, // (4) "Euroclear"
        MonteTitoli, // (5) "MonteTitoli"
        _LAST_
    }
    public partial class ClearanceSystemValue : IFpMLCodeValue
    {
        public ClearanceSystemValue()
        { }
        public ClearanceSystemValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class ClearanceSystemScheme : IFpMLCodeScheme
    {
        private static readonly string[] EnumStrings = 
        {
            null, // (0) Undefined
            "Clearstream", // (1) Clearstream
            "CREST", // (2) CREST
            "DTCC", // (3) DTCC
            "Euroclear", // (4) Euroclear
            "MonteTitoli", // (5) MonteTitoli
            null // (nn) _LAST_
        };
        public static string GetEnumString(ClearanceSystemEnum id) { return EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out ClearanceSystemEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (ClearanceSystemEnum tempId in Enum.GetValues(typeof(ClearanceSystemEnum)))
            {
                if (String.Compare(idString, EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = ClearanceSystemEnum.Undefined;
            return false;
        }
        public static ClearanceSystemEnum ParseEnumString(string idString)
        {
            ClearanceSystemEnum result = ClearanceSystemEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to ClearanceSystemEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "ClearanceSystem"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "ClearanceSystem");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new ClearanceSystemValue(dataRow); }
        public string GetFpMLSource() { return "clearance-system-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(ClearanceSystemValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(ClearanceSystemValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                ClearanceSystemValue[] newValues = new ClearanceSystemValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (ClearanceSystemValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("ClearanceSystemScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- CompoundingFrequency ----------------------------------------
    public enum CompoundingFrequencyEnum
    {
        Undefined,
        Continuous, // (1) "Continuous"
        Daily, // (2) "Daily"
        Weekly, // (3) "Weekly"
        Monthly, // (4) "Monthly"
        Quarterly, // (5) "Quarterly"
        SemiAnnual, // (6) "SemiAnnual"
        Annual, // (7) "Annual"
        _LAST_
    }
    public partial class CompoundingFrequencyValue : IFpMLCodeValue
    {
        public CompoundingFrequencyValue()
        { }
        public CompoundingFrequencyValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class CompoundingFrequencyScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Continuous", // (1) Continuous
            "Daily", // (2) Daily
            "Weekly", // (3) Weekly
            "Monthly", // (4) Monthly
            "Quarterly", // (5) Quarterly
            "SemiAnnual", // (6) SemiAnnual
            "Annual", // (7) Annual
            null // (nn) _LAST_
        };
        public static string GetEnumString(CompoundingFrequencyEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out CompoundingFrequencyEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (CompoundingFrequencyEnum tempId in Enum.GetValues(typeof(CompoundingFrequencyEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = CompoundingFrequencyEnum.Undefined;
            return false;
        }
        public static CompoundingFrequencyEnum ParseEnumString(string idString)
        {
            CompoundingFrequencyEnum result = CompoundingFrequencyEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to CompoundingFrequencyEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "CompoundingFrequency"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "CompoundingFrequency");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new CompoundingFrequencyValue(dataRow); }
        public string GetFpMLSource() { return "compounding-frequency-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(CompoundingFrequencyValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(CompoundingFrequencyValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                CompoundingFrequencyValue[] newValues = new CompoundingFrequencyValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (CompoundingFrequencyValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("CompoundingFrequencyScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- ContractualDefinitions ----------------------------------------
    public enum ContractualDefinitionsEnum
    {
        Undefined,
        ISDA1991, // (1) "ISDA1991"
        ISDA1996Equity, // (2) "ISDA1996Equity"
        ISDA1997GovernmentBond, // (3) "ISDA1997GovernmentBond"
        ISDA1998FX, // (4) "ISDA1998FX"
        ISDA2000, // (5) "ISDA2000"
        ISDA2002Equity, // (6) "ISDA2002Equity"
        ISDA1999Credit, // (7) "ISDA1999Credit"
        ISDA2003Credit, // (8) "ISDA2003Credit"
        ISDA2004Novation, // (9) "ISDA2004Novation"
        ISDA2006, // (10) "ISDA2006"
        ISDA2006Inflation, // (11) "ISDA2006Inflation"
        _LAST_
    }
    public partial class ContractualDefinitionsValue : IFpMLCodeValue
    {
        public ContractualDefinitionsValue()
        { }
        public ContractualDefinitionsValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class ContractualDefinitionsScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "ISDA1991", // (1) ISDA1991
            "ISDA1996Equity", // (2) ISDA1996Equity
            "ISDA1997GovernmentBond", // (3) ISDA1997GovernmentBond
            "ISDA1998FX", // (4) ISDA1998FX
            "ISDA2000", // (5) ISDA2000
            "ISDA2002Equity", // (6) ISDA2002Equity
            "ISDA1999Credit", // (7) ISDA1999Credit
            "ISDA2003Credit", // (8) ISDA2003Credit
            "ISDA2004Novation", // (9) ISDA2004Novation
            "ISDA2006", // (10) ISDA2006
            "ISDA2006Inflation", // (11) ISDA2006Inflation
            null // (nn) _LAST_
        };
        public static string GetEnumString(ContractualDefinitionsEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out ContractualDefinitionsEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (ContractualDefinitionsEnum tempId in Enum.GetValues(typeof(ContractualDefinitionsEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = ContractualDefinitionsEnum.Undefined;
            return false;
        }
        public static ContractualDefinitionsEnum ParseEnumString(string idString)
        {
            ContractualDefinitionsEnum result = ContractualDefinitionsEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to ContractualDefinitionsEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "ContractualDefinitions"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "ContractualDefinitions");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new ContractualDefinitionsValue(dataRow); }
        public string GetFpMLSource() { return "contractual-definitions-3-2"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(ContractualDefinitionsValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(ContractualDefinitionsValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                ContractualDefinitionsValue[] newValues = new ContractualDefinitionsValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (ContractualDefinitionsValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("ContractualDefinitionsScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- ContractualSupplement ----------------------------------------
    public enum ContractualSupplementEnum
    {
        Undefined,
        ISDA1999CreditRestructuring, // (1) "ISDA1999CreditRestructuring"
        ISDA1999CreditConvertibleExchangeableAccretingObligations, // (2) "ISDA1999CreditConvertibleExchangeableAccretingObligations"
        ISDA1999CreditSuccessorAndCreditEvents, // (3) "ISDA1999CreditSuccessorAndCreditEvents"
        ISDA2003CreditMay2003, // (4) "ISDA2003CreditMay2003"
        ISDA2003CreditMonolineInsurers, // (5) "ISDA2003CreditMonolineInsurers"
        ISDA2003CreditUSMunicipals, // (6) "ISDA2003CreditUSMunicipals"
        ISDA2003CreditRussianFederation, // (7) "ISDA2003CreditRussianFederation"
        ISDA2003CreditRepublicOfHungary, // (8) "ISDA2003CreditRepublicOfHungary"
        ISDA2003CreditRepublicOfHungary2005, // (9) "ISDA2003CreditRepublicOfHungary2005"
        ISDA2003CreditMonolineInsurers2005, // (10) "ISDA2003CreditMonolineInsurers2005"
        ISDA2003Credit2005MatrixSupplement, // (11) "ISDA2003Credit2005MatrixSupplement"
        iTraxxEuropeDealer, // (12) "iTraxxEuropeDealer"
        iTraxxEuropeNonDealer, // (13) "iTraxxEuropeNonDealer"
        iTraxxEuropeTranche, // (14) "iTraxxEuropeTranche"
        iTraxxCJ, // (15) "iTraxxCJ"
        iTraxxCJTranche, // (16) "iTraxxCJTranche"
        iTraxxAsiaExJapan, // (17) "iTraxxAsiaExJapan"
        iTraxxAsiaExJapanTranche, // (18) "iTraxxAsiaExJapanTranche"
        iTraxxAustralia, // (19) "iTraxxAustralia"
        iTraxxAustraliaTranche, // (20) "iTraxxAustraliaTranche"
        CDXTranche, // (21) "CDXTranche"
        CDXEmergingMarketsDiversifiedTranche, // (22) "CDXEmergingMarketsDiversifiedTranche"
        iTraxxSDI75Dealer, // (23) "iTraxxSDI75Dealer"
        iTraxxSDI75NonDealer, // (24) "iTraxxSDI75NonDealer"
        ISDA2003CreditArgentineRepublic, // (25) "ISDA2003CreditArgentineRepublic"
        ISDA2003LPNReferenceEntities, // (26) "ISDA2003LPNReferenceEntities"
        ISDA2003SecuredDeliverableObligationCharacteristic, // (27) "ISDA2003SecuredDeliverableObligationCharacteristic"
        iTraxxLevX, // (28) "iTraxxLevX"
        ISDA2003DeliveryRestrictions, // (29) "ISDA2003DeliveryRestrictions"
        ISDAMarch2004EquityCanadianSupplement, // (30) "ISDAMarch2004EquityCanadianSupplement"
        ABXTranche, // (31) "ABXTranche"
        ABX, // (32) "ABX"
        LCDX, // (33) "LCDX"
        LCDXTranche, // (34) "LCDXTranche"
        CMBX, // (35) "CMBX"
        ISDA2003AdditionalProvisionsLPN, // (36) "ISDA2003AdditionalProvisionsLPN"
        ISDA2003STMicroelectronicsNV, // (37) "ISDA2003STMicroelectronicsNV"
        ISDA2007FullLookthroughDepositoryReceiptSupplement, // (38) "ISDA2007FullLookthroughDepositoryReceiptSupplement"
        ISDA2007PartialLookthroughDepositoryReceiptSupplement, // (39) "ISDA2007PartialLookthroughDepositoryReceiptSupplement"
        CDX, // (40) "CDX"
        CDXEmergingMarkets, // (41) "CDXEmergingMarkets"
        CDXEmergingMarketsDiversified, // (42) "CDXEmergingMarketsDiversified"
        MCDX, // (43) "MCDX"
        CDSonLeveragedLoans, // (44) "CDSonLeveragedLoans"
        CDSonMBS, // (45) "CDSonMBS"
        iTraxxJapan, // (46) "iTraxxJapan"
        iTraxxJapanTranche, // (47) "iTraxxJapanTranche"
        SyndicatedSecuredLoanCDS, // (48) "SyndicatedSecuredLoanCDS"
        ISDA2003ContingentCreditSpreadTransaction, // (49) "ISDA2003ContingentCreditSpreadTransaction"
        _LAST_
    }
    public partial class ContractualSupplementValue : IFpMLCodeValue
    {
        public ContractualSupplementValue()
        { }
        public ContractualSupplementValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class ContractualSupplementScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "ISDA1999CreditRestructuring", // (1) ISDA1999CreditRestructuring
            "ISDA1999CreditConvertibleExchangeableAccretingObligations", // (2) ISDA1999CreditConvertibleExchangeableAccretingObligations
            "ISDA1999CreditSuccessorAndCreditEvents", // (3) ISDA1999CreditSuccessorAndCreditEvents
            "ISDA2003CreditMay2003", // (4) ISDA2003CreditMay2003
            "ISDA2003CreditMonolineInsurers", // (5) ISDA2003CreditMonolineInsurers
            "ISDA2003CreditUSMunicipals", // (6) ISDA2003CreditUSMunicipals
            "ISDA2003CreditRussianFederation", // (7) ISDA2003CreditRussianFederation
            "ISDA2003CreditRepublicOfHungary", // (8) ISDA2003CreditRepublicOfHungary
            "ISDA2003CreditRepublicOfHungary2005", // (9) ISDA2003CreditRepublicOfHungary2005
            "ISDA2003CreditMonolineInsurers2005", // (10) ISDA2003CreditMonolineInsurers2005
            "ISDA2003Credit2005MatrixSupplement", // (11) ISDA2003Credit2005MatrixSupplement
            "iTraxxEuropeDealer", // (12) iTraxxEuropeDealer
            "iTraxxEuropeNonDealer", // (13) iTraxxEuropeNonDealer
            "iTraxxEuropeTranche", // (14) iTraxxEuropeTranche
            "iTraxxCJ", // (15) iTraxxCJ
            "iTraxxCJTranche", // (16) iTraxxCJTranche
            "iTraxxAsiaExJapan", // (17) iTraxxAsiaExJapan
            "iTraxxAsiaExJapanTranche", // (18) iTraxxAsiaExJapanTranche
            "iTraxxAustralia", // (19) iTraxxAustralia
            "iTraxxAustraliaTranche", // (20) iTraxxAustraliaTranche
            "CDXTranche", // (21) CDXTranche
            "CDXEmergingMarketsDiversifiedTranche", // (22) CDXEmergingMarketsDiversifiedTranche
            "iTraxxSDI75Dealer", // (23) iTraxxSDI75Dealer
            "iTraxxSDI75NonDealer", // (24) iTraxxSDI75NonDealer
            "ISDA2003CreditArgentineRepublic", // (25) ISDA2003CreditArgentineRepublic
            "ISDA2003LPNReferenceEntities", // (26) ISDA2003LPNReferenceEntities
            "ISDA2003SecuredDeliverableObligationCharacteristic", // (27) ISDA2003SecuredDeliverableObligationCharacteristic
            "iTraxxLevX", // (28) iTraxxLevX
            "ISDA2003DeliveryRestrictions", // (29) ISDA2003DeliveryRestrictions
            "ISDAMarch2004EquityCanadianSupplement", // (30) ISDAMarch2004EquityCanadianSupplement
            "ABXTranche", // (31) ABXTranche
            "ABX", // (32) ABX
            "LCDX", // (33) LCDX
            "LCDXTranche", // (34) LCDXTranche
            "CMBX", // (35) CMBX
            "ISDA2003AdditionalProvisionsLPN", // (36) ISDA2003AdditionalProvisionsLPN
            "ISDA2003STMicroelectronicsNV", // (37) ISDA2003STMicroelectronicsNV
            "ISDA2007FullLookthroughDepositoryReceiptSupplement", // (38) ISDA2007FullLookthroughDepositoryReceiptSupplement
            "ISDA2007PartialLookthroughDepositoryReceiptSupplement", // (39) ISDA2007PartialLookthroughDepositoryReceiptSupplement
            "CDX", // (40) CDX
            "CDXEmergingMarkets", // (41) CDXEmergingMarkets
            "CDXEmergingMarketsDiversified", // (42) CDXEmergingMarketsDiversified
            "MCDX", // (43) MCDX
            "CDSonLeveragedLoans", // (44) CDSonLeveragedLoans
            "CDSonMBS", // (45) CDSonMBS
            "iTraxxJapan", // (46) iTraxxJapan
            "iTraxxJapanTranche", // (47) iTraxxJapanTranche
            "SyndicatedSecuredLoanCDS", // (48) SyndicatedSecuredLoanCDS
            "ISDA2003ContingentCreditSpreadTransaction", // (49) ISDA2003ContingentCreditSpreadTransaction
            null // (nn) _LAST_
        };
        public static string GetEnumString(ContractualSupplementEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out ContractualSupplementEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (ContractualSupplementEnum tempId in Enum.GetValues(typeof(ContractualSupplementEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = ContractualSupplementEnum.Undefined;
            return false;
        }
        public static ContractualSupplementEnum ParseEnumString(string idString)
        {
            ContractualSupplementEnum result = ContractualSupplementEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to ContractualSupplementEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "ContractualSupplement"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "ContractualSupplement");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new ContractualSupplementValue(dataRow); }
        public string GetFpMLSource() { return "contractual-supplement-6-8"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(ContractualSupplementValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(ContractualSupplementValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                ContractualSupplementValue[] newValues = new ContractualSupplementValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (ContractualSupplementValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("ContractualSupplementScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- CouponType ----------------------------------------
    public enum CouponTypeEnum
    {
        Undefined,
        Fixed, // (1) "Fixed"
        Float, // (2) "Float"
        Struct, // (3) "Struct"
        _LAST_
    }
    public partial class CouponTypeValue : IFpMLCodeValue
    {
        public CouponTypeValue()
        { }
        public CouponTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class CouponTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Fixed", // (1) Fixed
            "Float", // (2) Float
            "Struct", // (3) Struct
            null // (nn) _LAST_
        };
        public static string GetEnumString(CouponTypeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out CouponTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (CouponTypeEnum tempId in Enum.GetValues(typeof(CouponTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = CouponTypeEnum.Undefined;
            return false;
        }
        public static CouponTypeEnum ParseEnumString(string idString)
        {
            CouponTypeEnum result = CouponTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to CouponTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "CouponType"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "CouponType");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new CouponTypeValue(dataRow); }
        public string GetFpMLSource() { return "coupon-type-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(CouponTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(CouponTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                CouponTypeValue[] newValues = new CouponTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (CouponTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("CouponTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- MatrixTerm ----------------------------------------
    public enum MatrixTermEnum
    {
        Undefined,
        NorthAmericanCorporate, // (1) "NorthAmericanCorporate"
        EuropeanCorporate, // (2) "EuropeanCorporate"
        AustraliaCorporate, // (3) "AustraliaCorporate"
        NewZealandCorporate, // (4) "NewZealandCorporate"
        JapanCorporate, // (5) "JapanCorporate"
        SingaporeCorporate, // (6) "SingaporeCorporate"
        AsiaCorporate, // (7) "AsiaCorporate"
        AsiaSovereign, // (8) "AsiaSovereign"
        EmergingEuropeanAndMiddleEasternSovereign, // (9) "EmergingEuropeanAndMiddleEasternSovereign"
        JapanSovereign, // (10) "JapanSovereign"
        AustraliaSovereign, // (11) "AustraliaSovereign"
        NewZealandSovereign, // (12) "NewZealandSovereign"
        SingaporeSovereign, // (13) "SingaporeSovereign"
        LatinAmericaSovereign, // (14) "LatinAmericaSovereign"
        WesternEuropeanSovereign, // (15) "WesternEuropeanSovereign"
        SubordinatedEuropeanInsuranceCorporate, // (16) "SubordinatedEuropeanInsuranceCorporate"
        LatinAmericaCorporate, // (17) "LatinAmericaCorporate"
        EmergingEuropeanCorporate, // (18) "EmergingEuropeanCorporate"
        LatinAmericaCorporateBond, // (19) "LatinAmericaCorporateBond"
        LatinAmericaCorporateBondOrLoan, // (20) "LatinAmericaCorporateBondOrLoan"
        EmergingEuropeanCorporateLPN, // (21) "EmergingEuropeanCorporateLPN"
        USMunicipalFullFaithAndCredit, // (22) "USMunicipalFullFaithAndCredit"
        USMunicipalGeneralFund, // (23) "USMunicipalGeneralFund"
        USMunicipalRevenue, // (24) "USMunicipalRevenue"
        _LAST_
    }
    public partial class MatrixTermValue : IFpMLCodeValue
    {
        public MatrixTermValue()
        { }
        public MatrixTermValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class MatrixTermScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "NorthAmericanCorporate", // (1) NorthAmericanCorporate
            "EuropeanCorporate", // (2) EuropeanCorporate
            "AustraliaCorporate", // (3) AustraliaCorporate
            "NewZealandCorporate", // (4) NewZealandCorporate
            "JapanCorporate", // (5) JapanCorporate
            "SingaporeCorporate", // (6) SingaporeCorporate
            "AsiaCorporate", // (7) AsiaCorporate
            "AsiaSovereign", // (8) AsiaSovereign
            "EmergingEuropeanAndMiddleEasternSovereign", // (9) EmergingEuropeanAndMiddleEasternSovereign
            "JapanSovereign", // (10) JapanSovereign
            "AustraliaSovereign", // (11) AustraliaSovereign
            "NewZealandSovereign", // (12) NewZealandSovereign
            "SingaporeSovereign", // (13) SingaporeSovereign
            "LatinAmericaSovereign", // (14) LatinAmericaSovereign
            "WesternEuropeanSovereign", // (15) WesternEuropeanSovereign
            "SubordinatedEuropeanInsuranceCorporate", // (16) SubordinatedEuropeanInsuranceCorporate
            "LatinAmericaCorporate", // (17) LatinAmericaCorporate
            "EmergingEuropeanCorporate", // (18) EmergingEuropeanCorporate
            "LatinAmericaCorporateBond", // (19) LatinAmericaCorporateBond
            "LatinAmericaCorporateBondOrLoan", // (20) LatinAmericaCorporateBondOrLoan
            "EmergingEuropeanCorporateLPN", // (21) EmergingEuropeanCorporateLPN
            "USMunicipalFullFaithAndCredit", // (22) USMunicipalFullFaithAndCredit
            "USMunicipalGeneralFund", // (23) USMunicipalGeneralFund
            "USMunicipalRevenue", // (24) USMunicipalRevenue
            null // (nn) _LAST_
        };
        public static string GetEnumString(MatrixTermEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out MatrixTermEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (MatrixTermEnum tempId in Enum.GetValues(typeof(MatrixTermEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = MatrixTermEnum.Undefined;
            return false;
        }
        public static MatrixTermEnum ParseEnumString(string idString)
        {
            MatrixTermEnum result = MatrixTermEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to MatrixTermEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "MatrixTerm"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "MatrixTerm");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new MatrixTermValue(dataRow); }
        public string GetFpMLSource() { return "credit-matrix-transaction-type-3-1"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(MatrixTermValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(MatrixTermValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                MatrixTermValue[] newValues = new MatrixTermValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (MatrixTermValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("MatrixTermScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- CreditSeniority ----------------------------------------
    public enum CreditSeniorityEnum
    {
        Undefined,
        Senior, // (1) "Senior"
        SubTier1, // (2) "SubTier1"
        SubUpperTier2, // (3) "SubUpperTier2"
        SubLowerTier2, // (4) "SubLowerTier2"
        SubTier3, // (5) "SubTier3"
        _LAST_
    }
    public partial class CreditSeniorityValue : IFpMLCodeValue
    {
        public CreditSeniorityValue()
        { }
        public CreditSeniorityValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class CreditSeniorityScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Senior", // (1) Senior
            "SubTier1", // (2) SubTier1
            "SubUpperTier2", // (3) SubUpperTier2
            "SubLowerTier2", // (4) SubLowerTier2
            "SubTier3", // (5) SubTier3
            null // (nn) _LAST_
        };
        public static string GetEnumString(CreditSeniorityEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out CreditSeniorityEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (CreditSeniorityEnum tempId in Enum.GetValues(typeof(CreditSeniorityEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = CreditSeniorityEnum.Undefined;
            return false;
        }
        public static CreditSeniorityEnum ParseEnumString(string idString)
        {
            CreditSeniorityEnum result = CreditSeniorityEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to CreditSeniorityEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "CreditSeniority"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "CreditSeniority");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new CreditSeniorityValue(dataRow); }
        public string GetFpMLSource() { return "credit-seniority-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(CreditSeniorityValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(CreditSeniorityValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                CreditSeniorityValue[] newValues = new CreditSeniorityValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (CreditSeniorityValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("CreditSeniorityScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- CreditSeniorityTrading ----------------------------------------
    public enum CreditSeniorityTradingEnum
    {
        Undefined,
        Senior, // (1) "Senior"
        Subordinate, // (2) "Subordinate"
        _LAST_
    }
    public partial class CreditSeniorityTradingValue : IFpMLCodeValue
    {
        public CreditSeniorityTradingValue()
        { }
        public CreditSeniorityTradingValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class CreditSeniorityTradingScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Senior", // (1) Senior
            "Subordinate", // (2) Subordinate
            null // (nn) _LAST_
        };
        public static string GetEnumString(CreditSeniorityTradingEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out CreditSeniorityTradingEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (CreditSeniorityTradingEnum tempId in Enum.GetValues(typeof(CreditSeniorityTradingEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = CreditSeniorityTradingEnum.Undefined;
            return false;
        }
        public static CreditSeniorityTradingEnum ParseEnumString(string idString)
        {
            CreditSeniorityTradingEnum result = CreditSeniorityTradingEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to CreditSeniorityTradingEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "CreditSeniorityTrading"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "CreditSeniorityTrading");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new CreditSeniorityTradingValue(dataRow); }
        public string GetFpMLSource() { return "credit-seniority-trading-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(CreditSeniorityTradingValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(CreditSeniorityTradingValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                CreditSeniorityTradingValue[] newValues = new CreditSeniorityTradingValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (CreditSeniorityTradingValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("CreditSeniorityTradingScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- CreditSupportAgreementType ----------------------------------------
    public enum CreditSupportAgreementTypeEnum
    {
        Undefined,
        ISDA1994CreditSupportAnnexNewYorkLaw, // (1) "ISDA1994CreditSupportAnnexNewYorkLaw"
        ISDA1995CreditSupportAnnexEnglishLaw, // (2) "ISDA1995CreditSupportAnnexEnglishLaw"
        ISDA1995CreditSupportDeedEnglishLaw, // (3) "ISDA1995CreditSupportDeedEnglishLaw"
        ISDA1995CreditSupportAnnexJapaneseLaw, // (4) "ISDA1995CreditSupportAnnexJapaneseLaw"
        ISDA2001MarginProvisions, // (5) "ISDA2001MarginProvisions"
        _LAST_
    }
    public partial class CreditSupportAgreementTypeValue : IFpMLCodeValue
    {
        public CreditSupportAgreementTypeValue()
        { }
        public CreditSupportAgreementTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class CreditSupportAgreementTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "ISDA1994CreditSupportAnnexNewYorkLaw", // (1) ISDA1994CreditSupportAnnexNewYorkLaw
            "ISDA1995CreditSupportAnnexEnglishLaw", // (2) ISDA1995CreditSupportAnnexEnglishLaw
            "ISDA1995CreditSupportDeedEnglishLaw", // (3) ISDA1995CreditSupportDeedEnglishLaw
            "ISDA1995CreditSupportAnnexJapaneseLaw", // (4) ISDA1995CreditSupportAnnexJapaneseLaw
            "ISDA2001MarginProvisions", // (5) ISDA2001MarginProvisions
            null // (nn) _LAST_
        };
        public static string GetEnumString(CreditSupportAgreementTypeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out CreditSupportAgreementTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (CreditSupportAgreementTypeEnum tempId in Enum.GetValues(typeof(CreditSupportAgreementTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = CreditSupportAgreementTypeEnum.Undefined;
            return false;
        }
        public static CreditSupportAgreementTypeEnum ParseEnumString(string idString)
        {
            CreditSupportAgreementTypeEnum result = CreditSupportAgreementTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to CreditSupportAgreementTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "CreditSupportAgreementType"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "CreditSupportAgreementType");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new CreditSupportAgreementTypeValue(dataRow); }
        public string GetFpMLSource() { return "credit-support-agreement-type-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(CreditSupportAgreementTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(CreditSupportAgreementTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                CreditSupportAgreementTypeValue[] newValues = new CreditSupportAgreementTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (CreditSupportAgreementTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("CreditSupportAgreementTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- CutName ----------------------------------------
    public enum CutNameEnum
    {
        Undefined,
        Comex, // (1) "Comex"
        ECB, // (2) "ECB"
        LondonMorningGold, // (3) "LondonMorningGold"
        LondonEveningPgm, // (4) "LondonEveningPgm"
        LondonMorningPgm, // (5) "LondonMorningPgm"
        LondonEveningGold, // (6) "LondonEveningGold"
        Mexico, // (7) "Mexico"
        NewYork, // (8) "NewYork"
        NewYorkPgm, // (9) "NewYorkPgm"
        SilverLondon, // (10) "SilverLondon"
        _LAST_
    }
    public partial class CutNameValue : IFpMLCodeValue
    {
        public CutNameValue()
        { }
        public CutNameValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class CutNameScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Comex", // (1) Comex
            "ECB", // (2) ECB
            "LondonMorningGold", // (3) LondonMorningGold
            "LondonEveningPgm", // (4) LondonEveningPgm
            "LondonMorningPgm", // (5) LondonMorningPgm
            "LondonEveningGold", // (6) LondonEveningGold
            "Mexico", // (7) Mexico
            "NewYork", // (8) NewYork
            "NewYorkPgm", // (9) NewYorkPgm
            "SilverLondon", // (10) SilverLondon
            null // (nn) _LAST_
        };
        public static string GetEnumString(CutNameEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out CutNameEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (CutNameEnum tempId in Enum.GetValues(typeof(CutNameEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = CutNameEnum.Undefined;
            return false;
        }
        public static CutNameEnum ParseEnumString(string idString)
        {
            CutNameEnum result = CutNameEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to CutNameEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "CutName"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "CutName");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new CutNameValue(dataRow); }
        public string GetFpMLSource() { return "cut-name-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(CutNameValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(CutNameValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                CutNameValue[] newValues = new CutNameValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (CutNameValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("CutNameScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- DayCountFraction ----------------------------------------
    public enum DayCountFractionEnum
    {
        Undefined,
        _1_1, // (1) "1/1"
        ACT_ACT_ISDA, // (2) "ACT/ACT.ISDA"
        ACT_ACT_ICMA, // (3) "ACT/ACT.ICMA"
        ACT_ACT_ISMA, // (4) "ACT/ACT.ISMA"
        ACT_ACT_AFB, // (5) "ACT/ACT.AFB"
        ACT_365_FIXED, // (6) "ACT/365.FIXED"
        ACT_360, // (7) "ACT/360"
        _30_360, // (8) "30/360"
        _30E_360, // (9) "30E/360"
        _30E_360_ISDA, // (10) "30E/360.ISDA"
        BUS_252, // (11) "BUS/252"
        _LAST_
    }
    public partial class DayCountFractionValue : IFpMLCodeValue
    {
        public DayCountFractionValue()
        { }
        public DayCountFractionValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
                if ((dataRow.Value.Length > 3) && (dataRow.Value[3] != null))
                    HLClassName = dataRow.Value[3].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class DayCountFractionScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "1/1", // (1) _1_1
            "ACT/ACT.ISDA", // (2) ACT_ACT_ISDA
            "ACT/ACT.ICMA", // (3) ACT_ACT_ICMA
            "ACT/ACT.ISMA", // (4) ACT_ACT_ISMA
            "ACT/ACT.AFB", // (5) ACT_ACT_AFB
            "ACT/365.FIXED", // (6) ACT_365_FIXED
            "ACT/360", // (7) ACT_360
            "30/360", // (8) _30_360
            "30E/360", // (9) _30E_360
            "30E/360.ISDA", // (10) _30E_360_ISDA
            "BUS/252", // (11) BUS_252
            null // (nn) _LAST_
        };
        public static string GetEnumString(DayCountFractionEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out DayCountFractionEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (DayCountFractionEnum tempId in Enum.GetValues(typeof(DayCountFractionEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = DayCountFractionEnum.Undefined;
            return false;
        }
        public static DayCountFractionEnum ParseEnumString(string idString)
        {
            DayCountFractionEnum result = DayCountFractionEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to DayCountFractionEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "DayCountFraction"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "DayCountFraction");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new DayCountFractionValue(dataRow); }
        public string GetFpMLSource() { return "day-count-fraction-2-1"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(DayCountFractionValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(DayCountFractionValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                DayCountFractionValue[] newValues = new DayCountFractionValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (DayCountFractionValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("DayCountFractionScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- DerivativeCalculationMethod ----------------------------------------
    public enum DerivativeCalculationMethodEnum
    {
        Undefined,
        Analytic, // (1) "Analytic"
        Perturbation, // (2) "Perturbation"
        Substitution, // (3) "Substitution"
        Numerical, // (4) "Numerical"
        _LAST_
    }
    public partial class DerivativeCalculationMethodValue : IFpMLCodeValue
    {
        public DerivativeCalculationMethodValue()
        { }
        public DerivativeCalculationMethodValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class DerivativeCalculationMethodScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Analytic", // (1) Analytic
            "Perturbation", // (2) Perturbation
            "Substitution", // (3) Substitution
            "Numerical", // (4) Numerical
            null // (nn) _LAST_
        };
        public static string GetEnumString(DerivativeCalculationMethodEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out DerivativeCalculationMethodEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (DerivativeCalculationMethodEnum tempId in Enum.GetValues(typeof(DerivativeCalculationMethodEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = DerivativeCalculationMethodEnum.Undefined;
            return false;
        }
        public static DerivativeCalculationMethodEnum ParseEnumString(string idString)
        {
            DerivativeCalculationMethodEnum result = DerivativeCalculationMethodEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to DerivativeCalculationMethodEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "DerivativeCalculationMethod"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "DerivativeCalculationMethod");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new DerivativeCalculationMethodValue(dataRow); }
        public string GetFpMLSource() { return "derivative-calculation-method-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(DerivativeCalculationMethodValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(DerivativeCalculationMethodValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                DerivativeCalculationMethodValue[] newValues = new DerivativeCalculationMethodValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (DerivativeCalculationMethodValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("DerivativeCalculationMethodScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- DesignatedPriority ----------------------------------------
    public enum DesignatedPriorityEnum
    {
        Undefined,
        FirstLienLoan, // (1) "FirstLienLoan"
        SecondLienLoan, // (2) "SecondLienLoan"
        ThirdLienLoan, // (3) "ThirdLienLoan"
        Unknown, // (4) "Unknown"
        _LAST_
    }
    public partial class DesignatedPriorityValue : IFpMLCodeValue
    {
        public DesignatedPriorityValue()
        { }
        public DesignatedPriorityValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class DesignatedPriorityScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "FirstLienLoan", // (1) FirstLienLoan
            "SecondLienLoan", // (2) SecondLienLoan
            "ThirdLienLoan", // (3) ThirdLienLoan
            "Unknown", // (4) Unknown
            null // (nn) _LAST_
        };
        public static string GetEnumString(DesignatedPriorityEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out DesignatedPriorityEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (DesignatedPriorityEnum tempId in Enum.GetValues(typeof(DesignatedPriorityEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = DesignatedPriorityEnum.Undefined;
            return false;
        }
        public static DesignatedPriorityEnum ParseEnumString(string idString)
        {
            DesignatedPriorityEnum result = DesignatedPriorityEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to DesignatedPriorityEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "DesignatedPriority"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "DesignatedPriority");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new DesignatedPriorityValue(dataRow); }
        public string GetFpMLSource() { return "designated-priority-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(DesignatedPriorityValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(DesignatedPriorityValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                DesignatedPriorityValue[] newValues = new DesignatedPriorityValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (DesignatedPriorityValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("DesignatedPriorityScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- EntityType ----------------------------------------
    public enum EntityTypeEnum
    {
        Undefined,
        WesternEuropean, // (1) "WesternEuropean"
        WesternEuropeanInsurance, // (2) "WesternEuropeanInsurance"
        EuropeanEmergingMarkets, // (3) "EuropeanEmergingMarkets"
        AustralianAndNewZealand, // (4) "AustralianAndNewZealand"
        Japanese, // (5) "Japanese"
        Singaporean, // (6) "Singaporean"
        Asian, // (7) "Asian"
        NorthAmericanInvestmentGrade, // (8) "NorthAmericanInvestmentGrade"
        NorthAmericanInsurance, // (9) "NorthAmericanInsurance"
        NorthAmericanHighYield, // (10) "NorthAmericanHighYield"
        _LAST_
    }
    public partial class EntityTypeValue : IFpMLCodeValue
    {
        public EntityTypeValue()
        { }
        public EntityTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class EntityTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "WesternEuropean", // (1) WesternEuropean
            "WesternEuropeanInsurance", // (2) WesternEuropeanInsurance
            "EuropeanEmergingMarkets", // (3) EuropeanEmergingMarkets
            "AustralianAndNewZealand", // (4) AustralianAndNewZealand
            "Japanese", // (5) Japanese
            "Singaporean", // (6) Singaporean
            "Asian", // (7) Asian
            "NorthAmericanInvestmentGrade", // (8) NorthAmericanInvestmentGrade
            "NorthAmericanInsurance", // (9) NorthAmericanInsurance
            "NorthAmericanHighYield", // (10) NorthAmericanHighYield
            null // (nn) _LAST_
        };
        public static string GetEnumString(EntityTypeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out EntityTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (EntityTypeEnum tempId in Enum.GetValues(typeof(EntityTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = EntityTypeEnum.Undefined;
            return false;
        }
        public static EntityTypeEnum ParseEnumString(string idString)
        {
            EntityTypeEnum result = EntityTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to EntityTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "EntityType"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "EntityType");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new EntityTypeValue(dataRow); }
        public string GetFpMLSource() { return "entity-type-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(EntityTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(EntityTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                EntityTypeValue[] newValues = new EntityTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (EntityTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("EntityTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- LoanType ----------------------------------------
    public enum LoanTypeEnum
    {
        Undefined,
        BridgeLoan, // (1) "BridgeLoan"
        LetterOfCredit, // (2) "LetterOfCredit"
        RevolvingLoan, // (3) "RevolvingLoan"
        SwinglineFunding, // (4) "SwinglineFunding"
        TermLoan, // (5) "TermLoan"
        TradeClaim, // (6) "TradeClaim"
        _LAST_
    }
    public partial class LoanTypeValue : IFpMLCodeValue
    {
        public LoanTypeValue()
        { }
        public LoanTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class LoanTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "BridgeLoan", // (1) BridgeLoan
            "LetterOfCredit", // (2) LetterOfCredit
            "RevolvingLoan", // (3) RevolvingLoan
            "SwinglineFunding", // (4) SwinglineFunding
            "TermLoan", // (5) TermLoan
            "TradeClaim", // (6) TradeClaim
            null // (nn) _LAST_
        };
        public static string GetEnumString(LoanTypeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out LoanTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (LoanTypeEnum tempId in Enum.GetValues(typeof(LoanTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = LoanTypeEnum.Undefined;
            return false;
        }
        public static LoanTypeEnum ParseEnumString(string idString)
        {
            LoanTypeEnum result = LoanTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to LoanTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "LoanType"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "LoanType");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new LoanTypeValue(dataRow); }
        public string GetFpMLSource() { return "facility-type-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(LoanTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(LoanTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                LoanTypeValue[] newValues = new LoanTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (LoanTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("LoanTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- FloatingRateIndex ----------------------------------------
    public enum FloatingRateIndexEnum
    {
        Undefined,
        AUD_AONIA_OIS_COMPOUND, // (1) "AUD-AONIA-OIS-COMPOUND"
        AUD_AONIA_OIS_COMPOUND_SwapMarker, // (2) "AUD-AONIA-OIS-COMPOUND-SwapMarker"
        AUD_BBR_AUBBSW, // (3) "AUD-BBR-AUBBSW"
        AUD_BBR_BBSW, // (4) "AUD-BBR-BBSW"
        AUD_BBR_BBSW_Bloomberg, // (5) "AUD-BBR-BBSW-Bloomberg"
        AUD_BBR_BBSY_BID, // (6) "AUD-BBR-BBSY-BID"
        AUD_BBR_ISDC, // (7) "AUD-BBR-ISDC"
        AUD_LIBOR_BBA, // (8) "AUD-LIBOR-BBA"
        AUD_LIBOR_BBA_Bloomberg, // (9) "AUD-LIBOR-BBA-Bloomberg"
        AUD_LIBOR_Reference_Banks, // (10) "AUD-LIBOR-Reference Banks"
        AUD_Swap_Rate_Reuters, // (11) "AUD-Swap Rate-Reuters"
        CAD_BA_ISDD, // (12) "CAD-BA-ISDD"
        CAD_BA_CDOR, // (13) "CAD-BA-CDOR"
        CAD_BA_CDOR_Bloomberg, // (14) "CAD-BA-CDOR-Bloomberg"
        CAD_BA_Reuters, // (15) "CAD-BA-Reuters"
        CAD_BA_Telerate, // (16) "CAD-BA-Telerate"
        CAD_BA_Reference_Banks, // (17) "CAD-BA-Reference Banks"
        CAD_TBILL_ISDD, // (18) "CAD-TBILL-ISDD"
        CAD_TBILL_Reuters, // (19) "CAD-TBILL-Reuters"
        CAD_TBILL_Telerate, // (20) "CAD-TBILL-Telerate"
        CAD_TBILL_Reference_Banks, // (21) "CAD-TBILL-Reference Banks"
        CAD_LIBOR_BBA, // (22) "CAD-LIBOR-BBA"
        CAD_LIBOR_BBA_Bloomberg, // (23) "CAD-LIBOR-BBA-Bloomberg"
        CAD_LIBOR_BBA_SwapMarker, // (24) "CAD-LIBOR-BBA-SwapMarker"
        CAD_LIBOR_Reference_Banks, // (25) "CAD-LIBOR-Reference Banks"
        CAD_REPO_CORRA, // (26) "CAD-REPO-CORRA"
        CAD_CORRA_OIS_COMPOUND, // (27) "CAD-CORRA-OIS-COMPOUND"
        CAD_ISDA_Swap_Rate, // (28) "CAD-ISDA-Swap Rate"
        CL_CLICP_Bloomberg, // (29) "CL-CLICP-Bloomberg"
        CZK_PRIBOR_PRBO, // (30) "CZK-PRIBOR-PRBO"
        CZK_PRIBOR_Reference_Banks, // (31) "CZK-PRIBOR-Reference Banks"
        DKK_CIBOR_DKNA13, // (32) "DKK-CIBOR-DKNA13"
        DKK_CIBOR_DKNA13_Bloomberg, // (33) "DKK-CIBOR-DKNA13-Bloomberg"
        DKK_CIBOR2_DKNA13, // (34) "DKK-CIBOR2-DKNA13"
        DKK_CITA_DKNA14_COMPOUND, // (35) "DKK-CITA-DKNA14-COMPOUND"
        DKK_CIBOR_Reference_Banks, // (36) "DKK-CIBOR-Reference Banks"
        DKK_DKKOIS_OIS_COMPOUND, // (37) "DKK-DKKOIS-OIS-COMPOUND"
        EUR_EURIBOR_Reuters, // (38) "EUR-EURIBOR-Reuters"
        EUR_EURIBOR_Telerate, // (39) "EUR-EURIBOR-Telerate"
        EUR_EURIBOR_Act_365, // (40) "EUR-EURIBOR-Act/365"
        EUR_EURIBOR_Act_365_Bloomberg, // (41) "EUR-EURIBOR-Act/365-Bloomberg"
        EUR_EURIBOR_Reference_Banks, // (42) "EUR-EURIBOR-Reference Banks"
        EUR_LIBOR_BBA, // (43) "EUR-LIBOR-BBA"
        EUR_LIBOR_BBA_Bloomberg, // (44) "EUR-LIBOR-BBA-Bloomberg"
        EUR_LIBOR_Reference_Banks, // (45) "EUR-LIBOR-Reference Banks"
        EUR_EONIA_OIS_COMPOUND, // (46) "EUR-EONIA-OIS-COMPOUND"
        EUR_EONIA_OIS_COMPOUND_Bloomberg, // (47) "EUR-EONIA-OIS-COMPOUND-Bloomberg"
        EUR_EURONIA_OIS_COMPOUND, // (48) "EUR-EURONIA-OIS-COMPOUND"
        EUR_TAM_CDC, // (49) "EUR-TAM-CDC"
        EUR_TMM_CDC_COMPOUND, // (50) "EUR-TMM-CDC-COMPOUND"
        EUR_EONIA_AVERAGE, // (51) "EUR-EONIA-AVERAGE"
        EUR_TEC10_CNO, // (52) "EUR-TEC10-CNO"
        EUR_TEC10_CNO_SwapMarker, // (53) "EUR-TEC10-CNO-SwapMarker"
        EUR_TEC10_Reference_Banks, // (54) "EUR-TEC10-Reference Banks"
        EUR_TEC5_CNO, // (55) "EUR-TEC5-CNO"
        EUR_TEC5_CNO_SwapMarker, // (56) "EUR-TEC5-CNO-SwapMarker"
        EUR_TEC5_Reference_Banks, // (57) "EUR-TEC5-Reference Banks"
        EUR_Annual_Swap_Rate_10_00, // (58) "EUR-Annual Swap Rate-10:00"
        EUR_Annual_Swap_Rate_10_00_Bloomberg, // (59) "EUR-Annual Swap Rate-10:00-Bloomberg"
        EUR_Annual_Swap_Rate_10_00_SwapMarker, // (60) "EUR-Annual Swap Rate-10:00-SwapMarker"
        EUR_Annual_Swap_Rate_11_00, // (61) "EUR-Annual Swap Rate-11:00"
        EUR_Annual_Swap_Rate_11_00_Bloomberg, // (62) "EUR-Annual Swap Rate-11:00-Bloomberg"
        EUR_Annual_Swap_Rate_11_00_SwapMarker, // (63) "EUR-Annual Swap Rate-11:00-SwapMarker"
        EUR_Annual_Swap_Rate_3_Month, // (64) "EUR-Annual Swap Rate-3 Month"
        EUR_Annual_Swap_Rate_3_Month_SwapMarker, // (65) "EUR-Annual Swap Rate-3 Month-SwapMarker"
        EUR_ISDA_EURIBOR_Swap_Rate_11_00, // (66) "EUR-ISDA-EURIBOR Swap Rate-11:00"
        EUR_ISDA_EURIBOR_Swap_Rate_12_00, // (67) "EUR-ISDA-EURIBOR Swap Rate-12:00"
        EUR_ISDA_LIBOR_Swap_Rate_10_00, // (68) "EUR-ISDA-LIBOR Swap Rate-10:00"
        EUR_ISDA_LIBOR_Swap_Rate_11_00, // (69) "EUR-ISDA-LIBOR Swap Rate-11:00"
        EUR_EONIA_Swap_Index, // (70) "EUR-EONIA-Swap-Index"
        EUR_Annual_Swap_Rate_Reference_Banks, // (71) "EUR-Annual Swap Rate-Reference Banks"
        GRD_ATHIBOR_ATHIBOR, // (72) "GRD-ATHIBOR-ATHIBOR"
        GRD_ATHIBOR_Telerate, // (73) "GRD-ATHIBOR-Telerate"
        GRD_ATHIBOR_Reference_Banks, // (74) "GRD-ATHIBOR-Reference Banks"
        GRD_ATHIMID_Reuters, // (75) "GRD-ATHIMID-Reuters"
        GRD_ATHIMID_Reference_Banks, // (76) "GRD-ATHIMID-Reference Banks"
        HKD_HIBOR_ISDC, // (77) "HKD-HIBOR-ISDC"
        HKD_HIBOR_HIBOR_, // (78) "HKD-HIBOR-HIBOR="
        HKD_HIBOR_HIBOR_Bloomberg, // (79) "HKD-HIBOR-HIBOR-Bloomberg"
        HKD_HIBOR_HKAB, // (80) "HKD-HIBOR-HKAB"
        HKD_HIBOR_HKAB_Bloomberg, // (81) "HKD-HIBOR-HKAB-Bloomberg"
        HKD_HIBOR_Reference_Banks, // (82) "HKD-HIBOR-Reference Banks"
        HKD_HONIX_OIS_COMPOUND, // (83) "HKD-HONIX-OIS-COMPOUND"
        HKD_ISDA_Swap_Rate_11_00, // (84) "HKD-ISDA-Swap Rate-11:00"
        HKD_ISDA_Swap_Rate_4_00, // (85) "HKD-ISDA-Swap Rate-4:00"
        HUF_BUBOR_Reuters, // (86) "HUF-BUBOR-Reuters"
        HUF_BUBOR_Reference_Banks, // (87) "HUF-BUBOR-Reference Banks"
        INR_MIBOR_OIS_COMPOUND, // (88) "INR-MIBOR-OIS-COMPOUND"
        INR_MITOR_OIS_COMPOUND, // (89) "INR-MITOR-OIS-COMPOUND"
        INR_MIFOR, // (90) "INR-MIFOR"
        INR_MIOIS, // (91) "INR-MIOIS"
        INR_BMK, // (92) "INR-BMK"
        INR_INBMK_REUTERS, // (93) "INR-INBMK-REUTERS"
        INR_CMT, // (94) "INR-CMT"
        INR_Reference_Banks, // (95) "INR-Reference Banks"
        IDR_IDRFIX, // (96) "IDR-IDRFIX"
        IDR_IDMA_Bloomberg, // (97) "IDR-IDMA-Bloomberg"
        IDR_SBI_Reuters, // (98) "IDR-SBI-Reuters"
        IDR_SOR_Reuters, // (99) "IDR-SOR-Reuters"
        IDR_SOR_Telerate, // (100) "IDR-SOR-Telerate"
        IDR_SOR_Reference_Banks, // (101) "IDR-SOR-Reference Banks"
        ILS_TELBOR01_Reuters, // (102) "ILS-TELBOR01-Reuters"
        ILS_TELBOR_Reference_Banks, // (103) "ILS-TELBOR-Reference Banks"
        JPY_BBSF_Bloomberg_10_00, // (104) "JPY-BBSF-Bloomberg-10:00"
        JPY_BBSF_Bloomberg_15_00, // (105) "JPY-BBSF-Bloomberg-15:00"
        JPY_LIBOR_FRASETT, // (106) "JPY-LIBOR-FRASETT"
        JPY_LIBOR_ISDA, // (107) "JPY-LIBOR-ISDA"
        JPY_LIBOR_BBA, // (108) "JPY-LIBOR-BBA"
        JPY_LIBOR_BBA_Bloomberg, // (109) "JPY-LIBOR-BBA-Bloomberg"
        JPY_LIBOR_Reference_Banks, // (110) "JPY-LIBOR-Reference Banks"
        JPY_MUTANCALL_TONAR, // (111) "JPY-MUTANCALL-TONAR"
        JPY_TIBOR_TIBM__10_Banks_, // (112) "JPY-TIBOR-TIBM (10 Banks)"
        JPY_TIBOR_TIBM__5_Banks_, // (113) "JPY-TIBOR-TIBM (5 Banks)"
        JPY_TIBOR_TIBM__All_Banks_, // (114) "JPY-TIBOR-TIBM (All Banks)"
        JPY_TIBOR_TIBM__All_Banks__Bloomberg, // (115) "JPY-TIBOR-TIBM (All Banks)-Bloomberg"
        JPY_TIBOR_ZTIBOR, // (116) "JPY-TIBOR-ZTIBOR"
        JPY_TIBOR_TIBM_Reference_Banks, // (117) "JPY-TIBOR-TIBM-Reference Banks"
        JPY_TSR_Reuters_10_00, // (118) "JPY-TSR-Reuters-10:00"
        JPY_TSR_Telerate_10_00, // (119) "JPY-TSR-Telerate-10:00"
        JPY_ISDA_Swap_Rate_10_00, // (120) "JPY-ISDA-Swap Rate-10:00"
        JPY_TSR_Reuters_15_00, // (121) "JPY-TSR-Reuters-15:00"
        JPY_TSR_Telerate_15_00, // (122) "JPY-TSR-Telerate-15:00"
        JPY_ISDA_Swap_Rate_15_00, // (123) "JPY-ISDA-Swap Rate-15:00"
        JPY_TSR_Reference_Banks, // (124) "JPY-TSR-Reference Banks"
        JPY_TONA_OIS_COMPOUND, // (125) "JPY-TONA-OIS-COMPOUND"
        JPY_TIBOR_17096, // (126) "JPY-TIBOR-17096"
        JPY_TIBOR_17097, // (127) "JPY-TIBOR-17097"
        KRW_CD_KSDA_Bloomberg, // (128) "KRW-CD-KSDA-Bloomberg"
        KRW_CD_3220, // (129) "KRW-CD-3220"
        MYR_KLIBOR_BNM, // (130) "MYR-KLIBOR-BNM"
        MYR_KLIBOR_Reference_Banks, // (131) "MYR-KLIBOR-Reference Banks"
        MXN_TIIE_Banxico, // (132) "MXN-TIIE-Banxico"
        MXN_TIIE_Banxico_Bloomberg, // (133) "MXN-TIIE-Banxico-Bloomberg"
        MXN_TIIE_Banxico_Reference_Banks, // (134) "MXN-TIIE-Banxico-Reference Banks"
        NZD_BBR_BID, // (135) "NZD-BBR-BID"
        NZD_BBR_ISDC, // (136) "NZD-BBR-ISDC"
        NZD_BBR_FRA, // (137) "NZD-BBR-FRA"
        NZD_BBR_Telerate, // (138) "NZD-BBR-Telerate"
        NZD_BBR_Reference_Banks, // (139) "NZD-BBR-Reference Banks"
        NZD_NZIONA_OIS_COMPOUND, // (140) "NZD-NZIONA-OIS-COMPOUND"
        NOK_NIBOR_NIBR, // (141) "NOK-NIBOR-NIBR"
        NOK_NIBOR_NIBR_Reference_Banks, // (142) "NOK-NIBOR-NIBR-Reference Banks"
        NOK_NIBOR_Reference_Banks, // (143) "NOK-NIBOR-Reference Banks"
        PLN_WIBOR_WIBO, // (144) "PLN-WIBOR-WIBO"
        PLN_WIBOR_Reference_Banks, // (145) "PLN-WIBOR-Reference Banks"
        PLZ_WIBOR_WIBO, // (146) "PLZ-WIBOR-WIBO"
        PLZ_WIBOR_Reference_Banks, // (147) "PLZ-WIBOR-Reference Banks"
        SAR_SRIOR_SUAA, // (148) "SAR-SRIOR-SUAA"
        SAR_SRIOR_Reference_Banks, // (149) "SAR-SRIOR-Reference Banks"
        SGD_SIBOR_Reuters, // (150) "SGD-SIBOR-Reuters"
        SGD_SIBOR_Telerate, // (151) "SGD-SIBOR-Telerate"
        SGD_SIBOR_Reference_Banks, // (152) "SGD-SIBOR-Reference Banks"
        SGD_SOR_Reuters, // (153) "SGD-SOR-Reuters"
        SGD_SOR_Telerate, // (154) "SGD-SOR-Telerate"
        SGD_SOR_Reference_Banks, // (155) "SGD-SOR-Reference Banks"
        SGD_SONAR_OIS_COMPOUND, // (156) "SGD-SONAR-OIS-COMPOUND"
        SKK_BRIBOR_NBSK07, // (157) "SKK-BRIBOR-NBSK07"
        SKK_BRIBOR_BRBO, // (158) "SKK-BRIBOR-BRBO"
        SKK_BRIBOR_Bloomberg, // (159) "SKK-BRIBOR-Bloomberg"
        SKK_BRIBOR_Reference_Banks, // (160) "SKK-BRIBOR-Reference Banks"
        ZAR_JIBAR_SAFEX, // (161) "ZAR-JIBAR-SAFEX"
        ZAR_JIBAR_Reference_Banks, // (162) "ZAR-JIBAR-Reference Banks"
        ZAR_PRIME_AVERAGE, // (163) "ZAR-PRIME-AVERAGE"
        ZAR_PRIME_AVERAGE_Reference_Banks, // (164) "ZAR-PRIME-AVERAGE-Reference Banks"
        ZAR_DEPOSIT_SAFEX, // (165) "ZAR-DEPOSIT-SAFEX"
        ZAR_DEPOSIT_Reference_Banks, // (166) "ZAR-DEPOSIT-Reference Banks"
        GBP_LIBOR_ISDA, // (167) "GBP-LIBOR-ISDA"
        GBP_LIBOR_BBA, // (168) "GBP-LIBOR-BBA"
        GBP_LIBOR_BBA_Bloomberg, // (169) "GBP-LIBOR-BBA-Bloomberg"
        GBP_LIBOR_Reference_Banks, // (170) "GBP-LIBOR-Reference Banks"
        GBP_ISDA_Swap_Rate, // (171) "GBP-ISDA-Swap Rate"
        GBP_Semi_Annual_Swap_Rate, // (172) "GBP-Semi-Annual Swap Rate"
        GBP_Semi_Annual_Swap_Rate_Reference_Banks, // (173) "GBP-Semi-Annual Swap Rate-Reference Banks"
        GBP_WMBA_SONIA_COMPOUND, // (174) "GBP-WMBA-SONIA-COMPOUND"
        SEK_Annual_Swap_Rate, // (175) "SEK-Annual Swap Rate"
        SEK_STIBOR_SIDE, // (176) "SEK-STIBOR-SIDE"
        SEK_STIBOR_Bloomberg, // (177) "SEK-STIBOR-Bloomberg"
        SEK_STIBOR_Reference_Banks, // (178) "SEK-STIBOR-Reference Banks"
        SEK_SIOR_OIS_COMPOUND, // (179) "SEK-SIOR-OIS-COMPOUND"
        CHF_LIBOR_ISDA, // (180) "CHF-LIBOR-ISDA"
        CHF_LIBOR_BBA, // (181) "CHF-LIBOR-BBA"
        CHF_LIBOR_BBA_Bloomberg, // (182) "CHF-LIBOR-BBA-Bloomberg"
        CHF_LIBOR_Reference_Banks, // (183) "CHF-LIBOR-Reference Banks"
        CHF_TOIS_OIS_COMPOUND, // (184) "CHF-TOIS-OIS-COMPOUND"
        CHF_Annual_Swap_Rate, // (185) "CHF-Annual Swap Rate"
        CHF_ISDAFIX_Swap_Rate, // (186) "CHF-ISDAFIX-Swap Rate"
        CHF_Annual_Swap_Rate_Reference_Banks, // (187) "CHF-Annual Swap Rate-Reference Banks"
        TWD_Reuters_6165, // (188) "TWD-Reuters-6165"
        TWD_Telerate_6165, // (189) "TWD-Telerate-6165"
        TWD_TWCPBA, // (190) "TWD-TWCPBA"
        TWD_Reference_Dealers, // (191) "TWD-Reference Dealers"
        THB_SOR_Reuters, // (192) "THB-SOR-Reuters"
        THB_SOR_Telerate, // (193) "THB-SOR-Telerate"
        THB_SOR_Reference_Banks, // (194) "THB-SOR-Reference Banks"
        THB_THBFIX_Reuters, // (195) "THB-THBFIX-Reuters"
        USD_BA_H_15, // (196) "USD-BA-H.15"
        USD_BA_Reference_Dealers, // (197) "USD-BA-Reference Dealers"
        USD_CD_H_15, // (198) "USD-CD-H.15"
        USD_CD_Reference_Dealers, // (199) "USD-CD-Reference Dealers"
        USD_CMS_Reuters, // (200) "USD-CMS-Reuters"
        USD_CMS_Telerate, // (201) "USD-CMS-Telerate"
        USD_ISDA_Swap_Rate, // (202) "USD-ISDA-Swap Rate"
        USD_ISDA_Swap_Rate_3_00, // (203) "USD-ISDA-Swap Rate-3:00"
        USD_ISDAFIX3_Swap_Rate, // (204) "USD-ISDAFIX3-Swap Rate"
        USD_ISDAFIX3_Swap_Rate_3_00, // (205) "USD-ISDAFIX3-Swap Rate-3:00"
        USD_CMS_Reference_Banks, // (206) "USD-CMS-Reference Banks"
        USD_CMS_Reference_Banks_ICAP_SwapPX, // (207) "USD-CMS-Reference Banks-ICAP SwapPX"
        USD_CMT_T7051, // (208) "USD-CMT-T7051"
        USD_CMT_T7052, // (209) "USD-CMT-T7052"
        USD_COF11_Reuters, // (210) "USD-COF11-Reuters"
        USD_COF11_Telerate, // (211) "USD-COF11-Telerate"
        USD_COF11_FHLBSF, // (212) "USD-COF11-FHLBSF"
        USD_CP_H_15, // (213) "USD-CP-H.15"
        USD_CP_Reference_Dealers, // (214) "USD-CP-Reference Dealers"
        USD_Federal_Funds_H_15, // (215) "USD-Federal Funds-H.15"
        USD_Federal_Funds_H_15_Bloomberg, // (216) "USD-Federal Funds-H.15-Bloomberg"
        USD_Federal_Funds_Reference_Dealers, // (217) "USD-Federal Funds-Reference Dealers"
        USD_FFCB_DISCO, // (218) "USD-FFCB-DISCO"
        USD_LIBOR_BBA, // (219) "USD-LIBOR-BBA"
        USD_LIBOR_BBA_Bloomberg, // (220) "USD-LIBOR-BBA-Bloomberg"
        USD_LIBOR_ISDA, // (221) "USD-LIBOR-ISDA"
        USD_LIBOR_LIBO, // (222) "USD-LIBOR-LIBO"
        USD_LIBOR_Reference_Banks, // (223) "USD-LIBOR-Reference Banks"
        USD_Prime_H_15, // (224) "USD-Prime-H.15"
        USD_Prime_Reference_Banks, // (225) "USD-Prime-Reference Banks"
        USD_SIBOR_SIBO, // (226) "USD-SIBOR-SIBO"
        USD_SIBOR_Reference_Banks, // (227) "USD-SIBOR-Reference Banks"
        USD_TBILL_H_15, // (228) "USD-TBILL-H.15"
        USD_TBILL_H_15_Bloomberg, // (229) "USD-TBILL-H.15-Bloomberg"
        USD_TBILL_Secondary_Market, // (230) "USD-TBILL-Secondary Market"
        USD_TIBOR_ISDC, // (231) "USD-TIBOR-ISDC"
        USD_TIBOR_Reference_Banks, // (232) "USD-TIBOR-Reference Banks"
        USD_Treasury_Rate_T500, // (233) "USD-Treasury Rate-T500"
        USD_Treasury_Rate_ICAP_BrokerTec, // (234) "USD-Treasury Rate-ICAP BrokerTec"
        USD_Treasury_Rate_SwapMarker99, // (235) "USD-Treasury Rate-SwapMarker99"
        USD_Treasury_Rate_T19901, // (236) "USD-Treasury Rate-T19901"
        USD_Treasury_Rate_SwapMarker100, // (237) "USD-Treasury Rate-SwapMarker100"
        USD_Federal_Funds_H_15_OIS_COMPOUND, // (238) "USD-Federal Funds-H.15-OIS-COMPOUND"
        USD_SIFMA_Municipal_Swap_Index, // (239) "USD-SIFMA Municipal Swap Index"
        USD_BMA_Municipal_Swap_Index, // (240) "USD-BMA Municipal Swap Index"
        USD_S_P_Index_High_Grade, // (241) "USD-S&P Index-High Grade"
        _LAST_
    }
    public partial class FloatingRateIndexValue : IFpMLCodeValue
    {
        public FloatingRateIndexValue()
        { }
        public FloatingRateIndexValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class FloatingRateIndexScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "AUD-AONIA-OIS-COMPOUND", // (1) AUD_AONIA_OIS_COMPOUND
            "AUD-AONIA-OIS-COMPOUND-SwapMarker", // (2) AUD_AONIA_OIS_COMPOUND_SwapMarker
            "AUD-BBR-AUBBSW", // (3) AUD_BBR_AUBBSW
            "AUD-BBR-BBSW", // (4) AUD_BBR_BBSW
            "AUD-BBR-BBSW-Bloomberg", // (5) AUD_BBR_BBSW_Bloomberg
            "AUD-BBR-BBSY-BID", // (6) AUD_BBR_BBSY_BID
            "AUD-BBR-ISDC", // (7) AUD_BBR_ISDC
            "AUD-LIBOR-BBA", // (8) AUD_LIBOR_BBA
            "AUD-LIBOR-BBA-Bloomberg", // (9) AUD_LIBOR_BBA_Bloomberg
            "AUD-LIBOR-Reference Banks", // (10) AUD_LIBOR_Reference_Banks
            "AUD-Swap Rate-Reuters", // (11) AUD_Swap_Rate_Reuters
            "CAD-BA-ISDD", // (12) CAD_BA_ISDD
            "CAD-BA-CDOR", // (13) CAD_BA_CDOR
            "CAD-BA-CDOR-Bloomberg", // (14) CAD_BA_CDOR_Bloomberg
            "CAD-BA-Reuters", // (15) CAD_BA_Reuters
            "CAD-BA-Telerate", // (16) CAD_BA_Telerate
            "CAD-BA-Reference Banks", // (17) CAD_BA_Reference_Banks
            "CAD-TBILL-ISDD", // (18) CAD_TBILL_ISDD
            "CAD-TBILL-Reuters", // (19) CAD_TBILL_Reuters
            "CAD-TBILL-Telerate", // (20) CAD_TBILL_Telerate
            "CAD-TBILL-Reference Banks", // (21) CAD_TBILL_Reference_Banks
            "CAD-LIBOR-BBA", // (22) CAD_LIBOR_BBA
            "CAD-LIBOR-BBA-Bloomberg", // (23) CAD_LIBOR_BBA_Bloomberg
            "CAD-LIBOR-BBA-SwapMarker", // (24) CAD_LIBOR_BBA_SwapMarker
            "CAD-LIBOR-Reference Banks", // (25) CAD_LIBOR_Reference_Banks
            "CAD-REPO-CORRA", // (26) CAD_REPO_CORRA
            "CAD-CORRA-OIS-COMPOUND", // (27) CAD_CORRA_OIS_COMPOUND
            "CAD-ISDA-Swap Rate", // (28) CAD_ISDA_Swap_Rate
            "CL-CLICP-Bloomberg", // (29) CL_CLICP_Bloomberg
            "CZK-PRIBOR-PRBO", // (30) CZK_PRIBOR_PRBO
            "CZK-PRIBOR-Reference Banks", // (31) CZK_PRIBOR_Reference_Banks
            "DKK-CIBOR-DKNA13", // (32) DKK_CIBOR_DKNA13
            "DKK-CIBOR-DKNA13-Bloomberg", // (33) DKK_CIBOR_DKNA13_Bloomberg
            "DKK-CIBOR2-DKNA13", // (34) DKK_CIBOR2_DKNA13
            "DKK-CITA-DKNA14-COMPOUND", // (35) DKK_CITA_DKNA14_COMPOUND
            "DKK-CIBOR-Reference Banks", // (36) DKK_CIBOR_Reference_Banks
            "DKK-DKKOIS-OIS-COMPOUND", // (37) DKK_DKKOIS_OIS_COMPOUND
            "EUR-EURIBOR-Reuters", // (38) EUR_EURIBOR_Reuters
            "EUR-EURIBOR-Telerate", // (39) EUR_EURIBOR_Telerate
            "EUR-EURIBOR-Act/365", // (40) EUR_EURIBOR_Act_365
            "EUR-EURIBOR-Act/365-Bloomberg", // (41) EUR_EURIBOR_Act_365_Bloomberg
            "EUR-EURIBOR-Reference Banks", // (42) EUR_EURIBOR_Reference_Banks
            "EUR-LIBOR-BBA", // (43) EUR_LIBOR_BBA
            "EUR-LIBOR-BBA-Bloomberg", // (44) EUR_LIBOR_BBA_Bloomberg
            "EUR-LIBOR-Reference Banks", // (45) EUR_LIBOR_Reference_Banks
            "EUR-EONIA-OIS-COMPOUND", // (46) EUR_EONIA_OIS_COMPOUND
            "EUR-EONIA-OIS-COMPOUND-Bloomberg", // (47) EUR_EONIA_OIS_COMPOUND_Bloomberg
            "EUR-EURONIA-OIS-COMPOUND", // (48) EUR_EURONIA_OIS_COMPOUND
            "EUR-TAM-CDC", // (49) EUR_TAM_CDC
            "EUR-TMM-CDC-COMPOUND", // (50) EUR_TMM_CDC_COMPOUND
            "EUR-EONIA-AVERAGE", // (51) EUR_EONIA_AVERAGE
            "EUR-TEC10-CNO", // (52) EUR_TEC10_CNO
            "EUR-TEC10-CNO-SwapMarker", // (53) EUR_TEC10_CNO_SwapMarker
            "EUR-TEC10-Reference Banks", // (54) EUR_TEC10_Reference_Banks
            "EUR-TEC5-CNO", // (55) EUR_TEC5_CNO
            "EUR-TEC5-CNO-SwapMarker", // (56) EUR_TEC5_CNO_SwapMarker
            "EUR-TEC5-Reference Banks", // (57) EUR_TEC5_Reference_Banks
            "EUR-Annual Swap Rate-10:00", // (58) EUR_Annual_Swap_Rate_10_00
            "EUR-Annual Swap Rate-10:00-Bloomberg", // (59) EUR_Annual_Swap_Rate_10_00_Bloomberg
            "EUR-Annual Swap Rate-10:00-SwapMarker", // (60) EUR_Annual_Swap_Rate_10_00_SwapMarker
            "EUR-Annual Swap Rate-11:00", // (61) EUR_Annual_Swap_Rate_11_00
            "EUR-Annual Swap Rate-11:00-Bloomberg", // (62) EUR_Annual_Swap_Rate_11_00_Bloomberg
            "EUR-Annual Swap Rate-11:00-SwapMarker", // (63) EUR_Annual_Swap_Rate_11_00_SwapMarker
            "EUR-Annual Swap Rate-3 Month", // (64) EUR_Annual_Swap_Rate_3_Month
            "EUR-Annual Swap Rate-3 Month-SwapMarker", // (65) EUR_Annual_Swap_Rate_3_Month_SwapMarker
            "EUR-ISDA-EURIBOR Swap Rate-11:00", // (66) EUR_ISDA_EURIBOR_Swap_Rate_11_00
            "EUR-ISDA-EURIBOR Swap Rate-12:00", // (67) EUR_ISDA_EURIBOR_Swap_Rate_12_00
            "EUR-ISDA-LIBOR Swap Rate-10:00", // (68) EUR_ISDA_LIBOR_Swap_Rate_10_00
            "EUR-ISDA-LIBOR Swap Rate-11:00", // (69) EUR_ISDA_LIBOR_Swap_Rate_11_00
            "EUR-EONIA-Swap-Index", // (70) EUR_EONIA_Swap_Index
            "EUR-Annual Swap Rate-Reference Banks", // (71) EUR_Annual_Swap_Rate_Reference_Banks
            "GRD-ATHIBOR-ATHIBOR", // (72) GRD_ATHIBOR_ATHIBOR
            "GRD-ATHIBOR-Telerate", // (73) GRD_ATHIBOR_Telerate
            "GRD-ATHIBOR-Reference Banks", // (74) GRD_ATHIBOR_Reference_Banks
            "GRD-ATHIMID-Reuters", // (75) GRD_ATHIMID_Reuters
            "GRD-ATHIMID-Reference Banks", // (76) GRD_ATHIMID_Reference_Banks
            "HKD-HIBOR-ISDC", // (77) HKD_HIBOR_ISDC
            "HKD-HIBOR-HIBOR=", // (78) HKD_HIBOR_HIBOR_
            "HKD-HIBOR-HIBOR-Bloomberg", // (79) HKD_HIBOR_HIBOR_Bloomberg
            "HKD-HIBOR-HKAB", // (80) HKD_HIBOR_HKAB
            "HKD-HIBOR-HKAB-Bloomberg", // (81) HKD_HIBOR_HKAB_Bloomberg
            "HKD-HIBOR-Reference Banks", // (82) HKD_HIBOR_Reference_Banks
            "HKD-HONIX-OIS-COMPOUND", // (83) HKD_HONIX_OIS_COMPOUND
            "HKD-ISDA-Swap Rate-11:00", // (84) HKD_ISDA_Swap_Rate_11_00
            "HKD-ISDA-Swap Rate-4:00", // (85) HKD_ISDA_Swap_Rate_4_00
            "HUF-BUBOR-Reuters", // (86) HUF_BUBOR_Reuters
            "HUF-BUBOR-Reference Banks", // (87) HUF_BUBOR_Reference_Banks
            "INR-MIBOR-OIS-COMPOUND", // (88) INR_MIBOR_OIS_COMPOUND
            "INR-MITOR-OIS-COMPOUND", // (89) INR_MITOR_OIS_COMPOUND
            "INR-MIFOR", // (90) INR_MIFOR
            "INR-MIOIS", // (91) INR_MIOIS
            "INR-BMK", // (92) INR_BMK
            "INR-INBMK-REUTERS", // (93) INR_INBMK_REUTERS
            "INR-CMT", // (94) INR_CMT
            "INR-Reference Banks", // (95) INR_Reference_Banks
            "IDR-IDRFIX", // (96) IDR_IDRFIX
            "IDR-IDMA-Bloomberg", // (97) IDR_IDMA_Bloomberg
            "IDR-SBI-Reuters", // (98) IDR_SBI_Reuters
            "IDR-SOR-Reuters", // (99) IDR_SOR_Reuters
            "IDR-SOR-Telerate", // (100) IDR_SOR_Telerate
            "IDR-SOR-Reference Banks", // (101) IDR_SOR_Reference_Banks
            "ILS-TELBOR01-Reuters", // (102) ILS_TELBOR01_Reuters
            "ILS-TELBOR-Reference Banks", // (103) ILS_TELBOR_Reference_Banks
            "JPY-BBSF-Bloomberg-10:00", // (104) JPY_BBSF_Bloomberg_10_00
            "JPY-BBSF-Bloomberg-15:00", // (105) JPY_BBSF_Bloomberg_15_00
            "JPY-LIBOR-FRASETT", // (106) JPY_LIBOR_FRASETT
            "JPY-LIBOR-ISDA", // (107) JPY_LIBOR_ISDA
            "JPY-LIBOR-BBA", // (108) JPY_LIBOR_BBA
            "JPY-LIBOR-BBA-Bloomberg", // (109) JPY_LIBOR_BBA_Bloomberg
            "JPY-LIBOR-Reference Banks", // (110) JPY_LIBOR_Reference_Banks
            "JPY-MUTANCALL-TONAR", // (111) JPY_MUTANCALL_TONAR
            "JPY-TIBOR-TIBM (10 Banks)", // (112) JPY_TIBOR_TIBM__10_Banks_
            "JPY-TIBOR-TIBM (5 Banks)", // (113) JPY_TIBOR_TIBM__5_Banks_
            "JPY-TIBOR-TIBM (All Banks)", // (114) JPY_TIBOR_TIBM__All_Banks_
            "JPY-TIBOR-TIBM (All Banks)-Bloomberg", // (115) JPY_TIBOR_TIBM__All_Banks__Bloomberg
            "JPY-TIBOR-ZTIBOR", // (116) JPY_TIBOR_ZTIBOR
            "JPY-TIBOR-TIBM-Reference Banks", // (117) JPY_TIBOR_TIBM_Reference_Banks
            "JPY-TSR-Reuters-10:00", // (118) JPY_TSR_Reuters_10_00
            "JPY-TSR-Telerate-10:00", // (119) JPY_TSR_Telerate_10_00
            "JPY-ISDA-Swap Rate-10:00", // (120) JPY_ISDA_Swap_Rate_10_00
            "JPY-TSR-Reuters-15:00", // (121) JPY_TSR_Reuters_15_00
            "JPY-TSR-Telerate-15:00", // (122) JPY_TSR_Telerate_15_00
            "JPY-ISDA-Swap Rate-15:00", // (123) JPY_ISDA_Swap_Rate_15_00
            "JPY-TSR-Reference Banks", // (124) JPY_TSR_Reference_Banks
            "JPY-TONA-OIS-COMPOUND", // (125) JPY_TONA_OIS_COMPOUND
            "JPY-TIBOR-17096", // (126) JPY_TIBOR_17096
            "JPY-TIBOR-17097", // (127) JPY_TIBOR_17097
            "KRW-CD-KSDA-Bloomberg", // (128) KRW_CD_KSDA_Bloomberg
            "KRW-CD-3220", // (129) KRW_CD_3220
            "MYR-KLIBOR-BNM", // (130) MYR_KLIBOR_BNM
            "MYR-KLIBOR-Reference Banks", // (131) MYR_KLIBOR_Reference_Banks
            "MXN-TIIE-Banxico", // (132) MXN_TIIE_Banxico
            "MXN-TIIE-Banxico-Bloomberg", // (133) MXN_TIIE_Banxico_Bloomberg
            "MXN-TIIE-Banxico-Reference Banks", // (134) MXN_TIIE_Banxico_Reference_Banks
            "NZD-BBR-BID", // (135) NZD_BBR_BID
            "NZD-BBR-ISDC", // (136) NZD_BBR_ISDC
            "NZD-BBR-FRA", // (137) NZD_BBR_FRA
            "NZD-BBR-Telerate", // (138) NZD_BBR_Telerate
            "NZD-BBR-Reference Banks", // (139) NZD_BBR_Reference_Banks
            "NZD-NZIONA-OIS-COMPOUND", // (140) NZD_NZIONA_OIS_COMPOUND
            "NOK-NIBOR-NIBR", // (141) NOK_NIBOR_NIBR
            "NOK-NIBOR-NIBR-Reference Banks", // (142) NOK_NIBOR_NIBR_Reference_Banks
            "NOK-NIBOR-Reference Banks", // (143) NOK_NIBOR_Reference_Banks
            "PLN-WIBOR-WIBO", // (144) PLN_WIBOR_WIBO
            "PLN-WIBOR-Reference Banks", // (145) PLN_WIBOR_Reference_Banks
            "PLZ-WIBOR-WIBO", // (146) PLZ_WIBOR_WIBO
            "PLZ-WIBOR-Reference Banks", // (147) PLZ_WIBOR_Reference_Banks
            "SAR-SRIOR-SUAA", // (148) SAR_SRIOR_SUAA
            "SAR-SRIOR-Reference Banks", // (149) SAR_SRIOR_Reference_Banks
            "SGD-SIBOR-Reuters", // (150) SGD_SIBOR_Reuters
            "SGD-SIBOR-Telerate", // (151) SGD_SIBOR_Telerate
            "SGD-SIBOR-Reference Banks", // (152) SGD_SIBOR_Reference_Banks
            "SGD-SOR-Reuters", // (153) SGD_SOR_Reuters
            "SGD-SOR-Telerate", // (154) SGD_SOR_Telerate
            "SGD-SOR-Reference Banks", // (155) SGD_SOR_Reference_Banks
            "SGD-SONAR-OIS-COMPOUND", // (156) SGD_SONAR_OIS_COMPOUND
            "SKK-BRIBOR-NBSK07", // (157) SKK_BRIBOR_NBSK07
            "SKK-BRIBOR-BRBO", // (158) SKK_BRIBOR_BRBO
            "SKK-BRIBOR-Bloomberg", // (159) SKK_BRIBOR_Bloomberg
            "SKK-BRIBOR-Reference Banks", // (160) SKK_BRIBOR_Reference_Banks
            "ZAR-JIBAR-SAFEX", // (161) ZAR_JIBAR_SAFEX
            "ZAR-JIBAR-Reference Banks", // (162) ZAR_JIBAR_Reference_Banks
            "ZAR-PRIME-AVERAGE", // (163) ZAR_PRIME_AVERAGE
            "ZAR-PRIME-AVERAGE-Reference Banks", // (164) ZAR_PRIME_AVERAGE_Reference_Banks
            "ZAR-DEPOSIT-SAFEX", // (165) ZAR_DEPOSIT_SAFEX
            "ZAR-DEPOSIT-Reference Banks", // (166) ZAR_DEPOSIT_Reference_Banks
            "GBP-LIBOR-ISDA", // (167) GBP_LIBOR_ISDA
            "GBP-LIBOR-BBA", // (168) GBP_LIBOR_BBA
            "GBP-LIBOR-BBA-Bloomberg", // (169) GBP_LIBOR_BBA_Bloomberg
            "GBP-LIBOR-Reference Banks", // (170) GBP_LIBOR_Reference_Banks
            "GBP-ISDA-Swap Rate", // (171) GBP_ISDA_Swap_Rate
            "GBP-Semi-Annual Swap Rate", // (172) GBP_Semi_Annual_Swap_Rate
            "GBP-Semi-Annual Swap Rate-Reference Banks", // (173) GBP_Semi_Annual_Swap_Rate_Reference_Banks
            "GBP-WMBA-SONIA-COMPOUND", // (174) GBP_WMBA_SONIA_COMPOUND
            "SEK-Annual Swap Rate", // (175) SEK_Annual_Swap_Rate
            "SEK-STIBOR-SIDE", // (176) SEK_STIBOR_SIDE
            "SEK-STIBOR-Bloomberg", // (177) SEK_STIBOR_Bloomberg
            "SEK-STIBOR-Reference Banks", // (178) SEK_STIBOR_Reference_Banks
            "SEK-SIOR-OIS-COMPOUND", // (179) SEK_SIOR_OIS_COMPOUND
            "CHF-LIBOR-ISDA", // (180) CHF_LIBOR_ISDA
            "CHF-LIBOR-BBA", // (181) CHF_LIBOR_BBA
            "CHF-LIBOR-BBA-Bloomberg", // (182) CHF_LIBOR_BBA_Bloomberg
            "CHF-LIBOR-Reference Banks", // (183) CHF_LIBOR_Reference_Banks
            "CHF-TOIS-OIS-COMPOUND", // (184) CHF_TOIS_OIS_COMPOUND
            "CHF-Annual Swap Rate", // (185) CHF_Annual_Swap_Rate
            "CHF-ISDAFIX-Swap Rate", // (186) CHF_ISDAFIX_Swap_Rate
            "CHF-Annual Swap Rate-Reference Banks", // (187) CHF_Annual_Swap_Rate_Reference_Banks
            "TWD-Reuters-6165", // (188) TWD_Reuters_6165
            "TWD-Telerate-6165", // (189) TWD_Telerate_6165
            "TWD-TWCPBA", // (190) TWD_TWCPBA
            "TWD-Reference Dealers", // (191) TWD_Reference_Dealers
            "THB-SOR-Reuters", // (192) THB_SOR_Reuters
            "THB-SOR-Telerate", // (193) THB_SOR_Telerate
            "THB-SOR-Reference Banks", // (194) THB_SOR_Reference_Banks
            "THB-THBFIX-Reuters", // (195) THB_THBFIX_Reuters
            "USD-BA-H.15", // (196) USD_BA_H_15
            "USD-BA-Reference Dealers", // (197) USD_BA_Reference_Dealers
            "USD-CD-H.15", // (198) USD_CD_H_15
            "USD-CD-Reference Dealers", // (199) USD_CD_Reference_Dealers
            "USD-CMS-Reuters", // (200) USD_CMS_Reuters
            "USD-CMS-Telerate", // (201) USD_CMS_Telerate
            "USD-ISDA-Swap Rate", // (202) USD_ISDA_Swap_Rate
            "USD-ISDA-Swap Rate-3:00", // (203) USD_ISDA_Swap_Rate_3_00
            "USD-ISDAFIX3-Swap Rate", // (204) USD_ISDAFIX3_Swap_Rate
            "USD-ISDAFIX3-Swap Rate-3:00", // (205) USD_ISDAFIX3_Swap_Rate_3_00
            "USD-CMS-Reference Banks", // (206) USD_CMS_Reference_Banks
            "USD-CMS-Reference Banks-ICAP SwapPX", // (207) USD_CMS_Reference_Banks_ICAP_SwapPX
            "USD-CMT-T7051", // (208) USD_CMT_T7051
            "USD-CMT-T7052", // (209) USD_CMT_T7052
            "USD-COF11-Reuters", // (210) USD_COF11_Reuters
            "USD-COF11-Telerate", // (211) USD_COF11_Telerate
            "USD-COF11-FHLBSF", // (212) USD_COF11_FHLBSF
            "USD-CP-H.15", // (213) USD_CP_H_15
            "USD-CP-Reference Dealers", // (214) USD_CP_Reference_Dealers
            "USD-Federal Funds-H.15", // (215) USD_Federal_Funds_H_15
            "USD-Federal Funds-H.15-Bloomberg", // (216) USD_Federal_Funds_H_15_Bloomberg
            "USD-Federal Funds-Reference Dealers", // (217) USD_Federal_Funds_Reference_Dealers
            "USD-FFCB-DISCO", // (218) USD_FFCB_DISCO
            "USD-LIBOR-BBA", // (219) USD_LIBOR_BBA
            "USD-LIBOR-BBA-Bloomberg", // (220) USD_LIBOR_BBA_Bloomberg
            "USD-LIBOR-ISDA", // (221) USD_LIBOR_ISDA
            "USD-LIBOR-LIBO", // (222) USD_LIBOR_LIBO
            "USD-LIBOR-Reference Banks", // (223) USD_LIBOR_Reference_Banks
            "USD-Prime-H.15", // (224) USD_Prime_H_15
            "USD-Prime-Reference Banks", // (225) USD_Prime_Reference_Banks
            "USD-SIBOR-SIBO", // (226) USD_SIBOR_SIBO
            "USD-SIBOR-Reference Banks", // (227) USD_SIBOR_Reference_Banks
            "USD-TBILL-H.15", // (228) USD_TBILL_H_15
            "USD-TBILL-H.15-Bloomberg", // (229) USD_TBILL_H_15_Bloomberg
            "USD-TBILL-Secondary Market", // (230) USD_TBILL_Secondary_Market
            "USD-TIBOR-ISDC", // (231) USD_TIBOR_ISDC
            "USD-TIBOR-Reference Banks", // (232) USD_TIBOR_Reference_Banks
            "USD-Treasury Rate-T500", // (233) USD_Treasury_Rate_T500
            "USD-Treasury Rate-ICAP BrokerTec", // (234) USD_Treasury_Rate_ICAP_BrokerTec
            "USD-Treasury Rate-SwapMarker99", // (235) USD_Treasury_Rate_SwapMarker99
            "USD-Treasury Rate-T19901", // (236) USD_Treasury_Rate_T19901
            "USD-Treasury Rate-SwapMarker100", // (237) USD_Treasury_Rate_SwapMarker100
            "USD-Federal Funds-H.15-OIS-COMPOUND", // (238) USD_Federal_Funds_H_15_OIS_COMPOUND
            "USD-SIFMA Municipal Swap Index", // (239) USD_SIFMA_Municipal_Swap_Index
            "USD-BMA Municipal Swap Index", // (240) USD_BMA_Municipal_Swap_Index
            "USD-S&P Index-High Grade", // (241) USD_S_P_Index_High_Grade
            null // (nn) _LAST_
        };
        public static string GetEnumString(FloatingRateIndexEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out FloatingRateIndexEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (FloatingRateIndexEnum tempId in Enum.GetValues(typeof(FloatingRateIndexEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = FloatingRateIndexEnum.Undefined;
            return false;
        }
        public static FloatingRateIndexEnum ParseEnumString(string idString)
        {
            FloatingRateIndexEnum result = FloatingRateIndexEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to FloatingRateIndexEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "FloatingRateIndex"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "FloatingRateIndex");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new FloatingRateIndexValue(dataRow); }
        public string GetFpMLSource() { return "floating-rate-index-2-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(FloatingRateIndexValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(FloatingRateIndexValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                FloatingRateIndexValue[] newValues = new FloatingRateIndexValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (FloatingRateIndexValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("FloatingRateIndexScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- GoverningLaw ----------------------------------------
    public enum GoverningLawEnum
    {
        Undefined,
        CAAB, // (1) "CAAB"
        CABC, // (2) "CABC"
        CAMN, // (3) "CAMN"
        CAON, // (4) "CAON"
        CAQC, // (5) "CAQC"
        DE, // (6) "DE"
        FR, // (7) "FR"
        GBEN, // (8) "GBEN"
        GBGY, // (9) "GBGY"
        GBIM, // (10) "GBIM"
        GBJY, // (11) "GBJY"
        GBSC, // (12) "GBSC"
        JP, // (13) "JP"
        USCA, // (14) "USCA"
        USIL, // (15) "USIL"
        USNY, // (16) "USNY"
        _LAST_
    }
    public partial class GoverningLawValue : IFpMLCodeValue
    {
        public GoverningLawValue()
        { }
        public GoverningLawValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class GoverningLawScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "CAAB", // (1) CAAB
            "CABC", // (2) CABC
            "CAMN", // (3) CAMN
            "CAON", // (4) CAON
            "CAQC", // (5) CAQC
            "DE", // (6) DE
            "FR", // (7) FR
            "GBEN", // (8) GBEN
            "GBGY", // (9) GBGY
            "GBIM", // (10) GBIM
            "GBJY", // (11) GBJY
            "GBSC", // (12) GBSC
            "JP", // (13) JP
            "USCA", // (14) USCA
            "USIL", // (15) USIL
            "USNY", // (16) USNY
            null // (nn) _LAST_
        };
        public static string GetEnumString(GoverningLawEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out GoverningLawEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (GoverningLawEnum tempId in Enum.GetValues(typeof(GoverningLawEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = GoverningLawEnum.Undefined;
            return false;
        }
        public static GoverningLawEnum ParseEnumString(string idString)
        {
            GoverningLawEnum result = GoverningLawEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to GoverningLawEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "GoverningLaw"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "GoverningLaw");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new GoverningLawValue(dataRow); }
        public string GetFpMLSource() { return "governing-law-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(GoverningLawValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(GoverningLawValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                GoverningLawValue[] newValues = new GoverningLawValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (GoverningLawValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("GoverningLawScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- InflationIndexDescription ----------------------------------------
    public enum InflationIndexDescriptionEnum
    {
        Undefined,
        AUD_CPI, // (1) "AUD-CPI"
        BLG_HICP, // (2) "BLG-HICP"
        BRL_IPCA, // (3) "BRL-IPCA"
        BRL_IGPM, // (4) "BRL-IGPM"
        CAD_CPI, // (5) "CAD-CPI"
        DEK_CPI, // (6) "DEK-CPI"
        EUR_EXT_CPI, // (7) "EUR-EXT-CPI"
        EUR_AI_CPI, // (8) "EUR-AI-CPI"
        EUR_AI_R_CPI, // (9) "EUR-AI-R-CPI"
        FRC_EXT_CPI, // (10) "FRC-EXT-CPI"
        DEM_CPI, // (11) "DEM-CPI"
        GRD_HICP, // (12) "GRD-HICP"
        GRD_CPI, // (13) "GRD-CPI"
        IRL_CPI, // (14) "IRL-CPI"
        ISK_CPI, // (15) "ISK-CPI"
        ISK_HICP, // (16) "ISK-HICP"
        ITL_WC_EXT_CPI, // (17) "ITL-WC-EXT-CPI"
        ITL_WC_INT_CPI, // (18) "ITL-WC-INT-CPI"
        ITL_BC_EXT_CPI, // (19) "ITL-BC-EXT-CPI"
        ITL_BC_INT_CPI, // (20) "ITL-BC-INT-CPI"
        JPY_CPI_EXF, // (21) "JPY-CPI-EXF"
        MXN_CPI, // (22) "MXN-CPI"
        MXN_UDI, // (23) "MXN-UDI"
        NLG_HICP, // (24) "NLG-HICP"
        NZD_CPI, // (25) "NZD-CPI"
        PLN_CPI, // (26) "PLN-CPI"
        KRW_CPI, // (27) "KRW-CPI"
        ESP_R_CPI, // (28) "ESP-R-CPI"
        ESP_CPI, // (29) "ESP-CPI"
        ESP_R_HICP, // (30) "ESP-R-HICP"
        ESP_HICP, // (31) "ESP-HICP"
        ZAR_CPIX, // (32) "ZAR-CPIX"
        ZAR_CPI, // (33) "ZAR-CPI"
        SEK_CPI, // (34) "SEK-CPI"
        UK_RPI, // (35) "UK-RPI"
        USA_CPI_U, // (36) "USA-CPI-U"
        _LAST_
    }
    public partial class InflationIndexDescriptionValue : IFpMLCodeValue
    {
        public InflationIndexDescriptionValue()
        { }
        public InflationIndexDescriptionValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class InflationIndexDescriptionScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "AUD-CPI", // (1) AUD_CPI
            "BLG-HICP", // (2) BLG_HICP
            "BRL-IPCA", // (3) BRL_IPCA
            "BRL-IGPM", // (4) BRL_IGPM
            "CAD-CPI", // (5) CAD_CPI
            "DEK-CPI", // (6) DEK_CPI
            "EUR-EXT-CPI", // (7) EUR_EXT_CPI
            "EUR-AI-CPI", // (8) EUR_AI_CPI
            "EUR-AI-R-CPI", // (9) EUR_AI_R_CPI
            "FRC-EXT-CPI", // (10) FRC_EXT_CPI
            "DEM-CPI", // (11) DEM_CPI
            "GRD-HICP", // (12) GRD_HICP
            "GRD-CPI", // (13) GRD_CPI
            "IRL-CPI", // (14) IRL_CPI
            "ISK-CPI", // (15) ISK_CPI
            "ISK-HICP", // (16) ISK_HICP
            "ITL-WC-EXT-CPI", // (17) ITL_WC_EXT_CPI
            "ITL-WC-INT-CPI", // (18) ITL_WC_INT_CPI
            "ITL-BC-EXT-CPI", // (19) ITL_BC_EXT_CPI
            "ITL-BC-INT-CPI", // (20) ITL_BC_INT_CPI
            "JPY-CPI-EXF", // (21) JPY_CPI_EXF
            "MXN-CPI", // (22) MXN_CPI
            "MXN-UDI", // (23) MXN_UDI
            "NLG-HICP", // (24) NLG_HICP
            "NZD-CPI", // (25) NZD_CPI
            "PLN-CPI", // (26) PLN_CPI
            "KRW-CPI", // (27) KRW_CPI
            "ESP-R-CPI", // (28) ESP_R_CPI
            "ESP-CPI", // (29) ESP_CPI
            "ESP-R-HICP", // (30) ESP_R_HICP
            "ESP-HICP", // (31) ESP_HICP
            "ZAR-CPIX", // (32) ZAR_CPIX
            "ZAR-CPI", // (33) ZAR_CPI
            "SEK-CPI", // (34) SEK_CPI
            "UK-RPI", // (35) UK_RPI
            "USA-CPI-U", // (36) USA_CPI_U
            null // (nn) _LAST_
        };
        public static string GetEnumString(InflationIndexDescriptionEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out InflationIndexDescriptionEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (InflationIndexDescriptionEnum tempId in Enum.GetValues(typeof(InflationIndexDescriptionEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = InflationIndexDescriptionEnum.Undefined;
            return false;
        }
        public static InflationIndexDescriptionEnum ParseEnumString(string idString)
        {
            InflationIndexDescriptionEnum result = InflationIndexDescriptionEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to InflationIndexDescriptionEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "InflationIndexDescription"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "InflationIndexDescription");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new InflationIndexDescriptionValue(dataRow); }
        public string GetFpMLSource() { return "inflation-index-description-2-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(InflationIndexDescriptionValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(InflationIndexDescriptionValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                InflationIndexDescriptionValue[] newValues = new InflationIndexDescriptionValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (InflationIndexDescriptionValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("InflationIndexDescriptionScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- InflationIndexSource ----------------------------------------
    public enum InflationIndexSourceEnum
    {
        Undefined,
        AUCPI, // (1) "AUCPI"
        CPALBE, // (2) "CPALBE"
        CACPI, // (3) "CACPI"
        DNCPINEW, // (4) "DNCPINEW"
        CPTFEMU, // (5) "CPTFEMU"
        HICPFIX, // (6) "HICPFIX"
        CPALEMU, // (7) "CPALEMU"
        OATINFLATION01, // (8) "OATINFLATION01"
        FRCPXTOB, // (9) "FRCPXTOB"
        GRCP2000, // (10) "GRCP2000"
        ITCPI, // (11) "ITCPI"
        ITCPNICT, // (12) "ITCPNICT"
        ITCPNIC, // (13) "ITCPNIC"
        ITCPFOI, // (14) "ITCPFOI"
        JCPNGENF, // (15) "JCPNGENF"
        SPIPC, // (16) "SPIPC"
        SPCPEU, // (17) "SPCPEU"
        SWCPI, // (18) "SWCPI"
        UKRPI, // (19) "UKRPI"
        CPURNSA, // (20) "CPURNSA"
        CPTFIEU, // (21) "CPTFIEU"
        _LAST_
    }
    public partial class InflationIndexSourceValue : IFpMLCodeValue
    {
        public InflationIndexSourceValue()
        { }
        public InflationIndexSourceValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class InflationIndexSourceScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "AUCPI", // (1) AUCPI
            "CPALBE", // (2) CPALBE
            "CACPI", // (3) CACPI
            "DNCPINEW", // (4) DNCPINEW
            "CPTFEMU", // (5) CPTFEMU
            "HICPFIX", // (6) HICPFIX
            "CPALEMU", // (7) CPALEMU
            "OATINFLATION01", // (8) OATINFLATION01
            "FRCPXTOB", // (9) FRCPXTOB
            "GRCP2000", // (10) GRCP2000
            "ITCPI", // (11) ITCPI
            "ITCPNICT", // (12) ITCPNICT
            "ITCPNIC", // (13) ITCPNIC
            "ITCPFOI", // (14) ITCPFOI
            "JCPNGENF", // (15) JCPNGENF
            "SPIPC", // (16) SPIPC
            "SPCPEU", // (17) SPCPEU
            "SWCPI", // (18) SWCPI
            "UKRPI", // (19) UKRPI
            "CPURNSA", // (20) CPURNSA
            "CPTFIEU", // (21) CPTFIEU
            null // (nn) _LAST_
        };
        public static string GetEnumString(InflationIndexSourceEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out InflationIndexSourceEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (InflationIndexSourceEnum tempId in Enum.GetValues(typeof(InflationIndexSourceEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = InflationIndexSourceEnum.Undefined;
            return false;
        }
        public static InflationIndexSourceEnum ParseEnumString(string idString)
        {
            InflationIndexSourceEnum result = InflationIndexSourceEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to InflationIndexSourceEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "InflationIndexSource"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "InflationIndexSource");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new InflationIndexSourceValue(dataRow); }
        public string GetFpMLSource() { return "inflation-index-source-2-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(InflationIndexSourceValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(InflationIndexSourceValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                InflationIndexSourceValue[] newValues = new InflationIndexSourceValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (InflationIndexSourceValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("InflationIndexSourceScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- InflationMainPublication ----------------------------------------
    public enum InflationMainPublicationEnum
    {
        Undefined,
        ABS, // (1) "ABS"
        Eurostat, // (2) "Eurostat"
        STCA, // (3) "STCA"
        DS, // (4) "DS"
        ECBMB, // (5) "ECBMB"
        INSEEOJ, // (6) "INSEEOJ"
        SB, // (7) "SB"
        ISTAT, // (8) "ISTAT"
        MIA, // (9) "MIA"
        INE, // (10) "INE"
        SS, // (11) "SS"
        ONS, // (12) "ONS"
        BLS, // (13) "BLS"
        _LAST_
    }
    public partial class InflationMainPublicationValue : IFpMLCodeValue
    {
        public InflationMainPublicationValue()
        { }
        public InflationMainPublicationValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class InflationMainPublicationScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "ABS", // (1) ABS
            "Eurostat", // (2) Eurostat
            "STCA", // (3) STCA
            "DS", // (4) DS
            "ECBMB", // (5) ECBMB
            "INSEEOJ", // (6) INSEEOJ
            "SB", // (7) SB
            "ISTAT", // (8) ISTAT
            "MIA", // (9) MIA
            "INE", // (10) INE
            "SS", // (11) SS
            "ONS", // (12) ONS
            "BLS", // (13) BLS
            null // (nn) _LAST_
        };
        public static string GetEnumString(InflationMainPublicationEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out InflationMainPublicationEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (InflationMainPublicationEnum tempId in Enum.GetValues(typeof(InflationMainPublicationEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = InflationMainPublicationEnum.Undefined;
            return false;
        }
        public static InflationMainPublicationEnum ParseEnumString(string idString)
        {
            InflationMainPublicationEnum result = InflationMainPublicationEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to InflationMainPublicationEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "InflationMainPublication"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "InflationMainPublication");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new InflationMainPublicationValue(dataRow); }
        public string GetFpMLSource() { return "inflation-main-publication-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(InflationMainPublicationValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(InflationMainPublicationValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                InflationMainPublicationValue[] newValues = new InflationMainPublicationValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (InflationMainPublicationValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("InflationMainPublicationScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- InformationProvider ----------------------------------------
    public enum InformationProviderEnum
    {
        Undefined,
        BankOfCanada, // (1) "BankOfCanada"
        BankOfJapan, // (2) "BankOfJapan"
        Bloomberg, // (3) "Bloomberg"
        FederalReserve, // (4) "FederalReserve"
        FHLBSF, // (5) "FHLBSF"
        ISDA, // (6) "ISDA"
        Reuters, // (7) "Reuters"
        SAFEX, // (8) "SAFEX"
        Telerate, // (9) "Telerate"
        _LAST_
    }
    public partial class InformationProviderValue : IFpMLCodeValue
    {
        public InformationProviderValue()
        { }
        public InformationProviderValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class InformationProviderScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "BankOfCanada", // (1) BankOfCanada
            "BankOfJapan", // (2) BankOfJapan
            "Bloomberg", // (3) Bloomberg
            "FederalReserve", // (4) FederalReserve
            "FHLBSF", // (5) FHLBSF
            "ISDA", // (6) ISDA
            "Reuters", // (7) Reuters
            "SAFEX", // (8) SAFEX
            "Telerate", // (9) Telerate
            null // (nn) _LAST_
        };
        public static string GetEnumString(InformationProviderEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out InformationProviderEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (InformationProviderEnum tempId in Enum.GetValues(typeof(InformationProviderEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = InformationProviderEnum.Undefined;
            return false;
        }
        public static InformationProviderEnum ParseEnumString(string idString)
        {
            InformationProviderEnum result = InformationProviderEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to InformationProviderEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "InformationProvider"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "InformationProvider");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new InformationProviderValue(dataRow); }
        public string GetFpMLSource() { return "information-provider-2-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(InformationProviderValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(InformationProviderValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                InformationProviderValue[] newValues = new InformationProviderValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (InformationProviderValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("InformationProviderScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- InterpolationMethod ----------------------------------------
    public enum InterpolationMethodEnum
    {
        Undefined,
        LinearZeroYield, // (1) "LinearZeroYield"
        None, // (2) "None"
        _LAST_
    }
    public partial class InterpolationMethodValue : IFpMLCodeValue
    {
        public InterpolationMethodValue()
        { }
        public InterpolationMethodValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class InterpolationMethodScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "LinearZeroYield", // (1) LinearZeroYield
            "None", // (2) None
            null // (nn) _LAST_
        };
        public static string GetEnumString(InterpolationMethodEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out InterpolationMethodEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (InterpolationMethodEnum tempId in Enum.GetValues(typeof(InterpolationMethodEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = InterpolationMethodEnum.Undefined;
            return false;
        }
        public static InterpolationMethodEnum ParseEnumString(string idString)
        {
            InterpolationMethodEnum result = InterpolationMethodEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to InterpolationMethodEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "InterpolationMethod"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "InterpolationMethod");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new InterpolationMethodValue(dataRow); }
        public string GetFpMLSource() { return "interpolation-method-1-1"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(InterpolationMethodValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(InterpolationMethodValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                InterpolationMethodValue[] newValues = new InterpolationMethodValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (InterpolationMethodValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("InterpolationMethodScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- LocalJurisdiction ----------------------------------------
    public enum LocalJurisdictionEnum
    {
        Undefined,
        NotApplicable, // (1) "NotApplicable"
        India, // (2) "India"
        Indonesia, // (3) "Indonesia"
        Korea, // (4) "Korea"
        Malaysia, // (5) "Malaysia"
        Taiwan, // (6) "Taiwan"
        _LAST_
    }
    public partial class LocalJurisdictionValue : IFpMLCodeValue
    {
        public LocalJurisdictionValue()
        { }
        public LocalJurisdictionValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class LocalJurisdictionScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "NotApplicable", // (1) NotApplicable
            "India", // (2) India
            "Indonesia", // (3) Indonesia
            "Korea", // (4) Korea
            "Malaysia", // (5) Malaysia
            "Taiwan", // (6) Taiwan
            null // (nn) _LAST_
        };
        public static string GetEnumString(LocalJurisdictionEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out LocalJurisdictionEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (LocalJurisdictionEnum tempId in Enum.GetValues(typeof(LocalJurisdictionEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = LocalJurisdictionEnum.Undefined;
            return false;
        }
        public static LocalJurisdictionEnum ParseEnumString(string idString)
        {
            LocalJurisdictionEnum result = LocalJurisdictionEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to LocalJurisdictionEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "LocalJurisdiction"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "LocalJurisdiction");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new LocalJurisdictionValue(dataRow); }
        public string GetFpMLSource() { return "local-jurisdiction-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(LocalJurisdictionValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(LocalJurisdictionValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                LocalJurisdictionValue[] newValues = new LocalJurisdictionValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (LocalJurisdictionValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("LocalJurisdictionScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- MarketDisruption ----------------------------------------
    public enum MarketDisruptionEnum
    {
        Undefined,
        Omission, // (1) "Omission"
        Postponement, // (2) "Postponement"
        ModifiedPostponement, // (3) "ModifiedPostponement"
        _LAST_
    }
    public partial class MarketDisruptionValue : IFpMLCodeValue
    {
        public MarketDisruptionValue()
        { }
        public MarketDisruptionValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class MarketDisruptionScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Omission", // (1) Omission
            "Postponement", // (2) Postponement
            "ModifiedPostponement", // (3) ModifiedPostponement
            null // (nn) _LAST_
        };
        public static string GetEnumString(MarketDisruptionEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out MarketDisruptionEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (MarketDisruptionEnum tempId in Enum.GetValues(typeof(MarketDisruptionEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = MarketDisruptionEnum.Undefined;
            return false;
        }
        public static MarketDisruptionEnum ParseEnumString(string idString)
        {
            MarketDisruptionEnum result = MarketDisruptionEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to MarketDisruptionEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "MarketDisruption"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "MarketDisruption");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new MarketDisruptionValue(dataRow); }
        public string GetFpMLSource() { return "market-disruption-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(MarketDisruptionValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(MarketDisruptionValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                MarketDisruptionValue[] newValues = new MarketDisruptionValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (MarketDisruptionValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("MarketDisruptionScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- MasterAgreementType ----------------------------------------
    public enum MasterAgreementTypeEnum
    {
        Undefined,
        AFB, // (1) "AFB"
        German, // (2) "German"
        ISDA1987, // (3) "ISDA1987"
        ISDA1992, // (4) "ISDA1992"
        ISDA2002, // (5) "ISDA2002"
        Swiss, // (6) "Swiss"
        _LAST_
    }
    public partial class MasterAgreementTypeValue : IFpMLCodeValue
    {
        public MasterAgreementTypeValue()
        { }
        public MasterAgreementTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class MasterAgreementTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "AFB", // (1) AFB
            "German", // (2) German
            "ISDA1987", // (3) ISDA1987
            "ISDA1992", // (4) ISDA1992
            "ISDA2002", // (5) ISDA2002
            "Swiss", // (6) Swiss
            null // (nn) _LAST_
        };
        public static string GetEnumString(MasterAgreementTypeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out MasterAgreementTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (MasterAgreementTypeEnum tempId in Enum.GetValues(typeof(MasterAgreementTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = MasterAgreementTypeEnum.Undefined;
            return false;
        }
        public static MasterAgreementTypeEnum ParseEnumString(string idString)
        {
            MasterAgreementTypeEnum result = MasterAgreementTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to MasterAgreementTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "MasterAgreementType"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "MasterAgreementType");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new MasterAgreementTypeValue(dataRow); }
        public string GetFpMLSource() { return "master-agreement-type-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(MasterAgreementTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(MasterAgreementTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                MasterAgreementTypeValue[] newValues = new MasterAgreementTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (MasterAgreementTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("MasterAgreementTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- MasterConfirmationType ----------------------------------------
    public enum MasterConfirmationTypeEnum
    {
        Undefined,
        _2003CreditIndex, // (1) "2003CreditIndex"
        _2004EquityEuropeanInterdealer, // (2) "2004EquityEuropeanInterdealer"
        DJ_CDX_NA, // (3) "DJ.CDX.NA"
        DJ_iTraxx_Europe, // (4) "DJ.iTraxx.Europe"
        ISDA1999Credit, // (5) "ISDA1999Credit"
        ISDA2003CreditAsia, // (6) "ISDA2003CreditAsia"
        ISDA2003CreditAustraliaNewZealand, // (7) "ISDA2003CreditAustraliaNewZealand"
        ISDA2003CreditEuropean, // (8) "ISDA2003CreditEuropean"
        ISDA2003CreditJapan, // (9) "ISDA2003CreditJapan"
        ISDA2003CreditNorthAmerican, // (10) "ISDA2003CreditNorthAmerican"
        ISDA2003CreditSingapore, // (11) "ISDA2003CreditSingapore"
        ISDA2003CreditSovereignAsia, // (12) "ISDA2003CreditSovereignAsia"
        ISDA2003CreditSovereignCentralAndEasternEurope, // (13) "ISDA2003CreditSovereignCentralAndEasternEurope"
        ISDA2003CreditSovereignJapan, // (14) "ISDA2003CreditSovereignJapan"
        ISDA2003CreditSovereignLatinAmerica, // (15) "ISDA2003CreditSovereignLatinAmerica"
        ISDA2003CreditSovereignMiddleEast, // (16) "ISDA2003CreditSovereignMiddleEast"
        ISDA2003CreditSovereignWesternEurope, // (17) "ISDA2003CreditSovereignWesternEurope"
        ISDA2004CreditSovereignAsia, // (18) "ISDA2004CreditSovereignAsia"
        ISDA2004CreditSovereignEmergingEuropeanAndMiddleEastern, // (19) "ISDA2004CreditSovereignEmergingEuropeanAndMiddleEastern"
        ISDA2004CreditSovereignJapan, // (20) "ISDA2004CreditSovereignJapan"
        ISDA2004CreditSovereignLatinAmerican, // (21) "ISDA2004CreditSovereignLatinAmerican"
        ISDA2004CreditSovereignWesternEuropean, // (22) "ISDA2004CreditSovereignWesternEuropean"
        ISDA2004EquityAmericasInterdealer, // (23) "ISDA2004EquityAmericasInterdealer"
        ISDA2005EquityJapaneseInterdealer, // (24) "ISDA2005EquityJapaneseInterdealer"
        EquityAmericas, // (25) "EquityAmericas"
        EquityEuropean, // (26) "EquityEuropean"
        ISDA2005EquityAsiaExcludingJapanInterdealer, // (27) "ISDA2005EquityAsiaExcludingJapanInterdealer"
        _2005VarianceSwapEuropeanInterdealer, // (28) "2005VarianceSwapEuropeanInterdealer"
        ISDA2006VarianceSwapJapaneseInterdealer, // (29) "ISDA2006VarianceSwapJapaneseInterdealer"
        DJ_CDX_EM, // (30) "DJ.CDX.EM"
        DJ_CDX_EM_DIV, // (31) "DJ.CDX.EM.DIV"
        ISDA2007VarianceSwapAmericas, // (32) "ISDA2007VarianceSwapAmericas"
        ISDA2007VarianceSwapAsiaExcludingJapan, // (33) "ISDA2007VarianceSwapAsiaExcludingJapan"
        ISDA2007VarianceSwapEuropean, // (34) "ISDA2007VarianceSwapEuropean"
        EquityAsia, // (35) "EquityAsia"
        ISDA2007EquityEuropean, // (36) "ISDA2007EquityEuropean"
        _2006DividendSwapEuropean, // (37) "2006DividendSwapEuropean"
        _2006DividendSwapEuropeanInterdealer, // (38) "2006DividendSwapEuropeanInterdealer"
        ISDA2007EquityFinanceSwapEuropean, // (39) "ISDA2007EquityFinanceSwapEuropean"
        ISDA2004VarianceSwapAmericasInterdealer, // (40) "ISDA2004VarianceSwapAmericasInterdealer"
        ISDA2006VarianceSwapJapanese, // (41) "ISDA2006VarianceSwapJapanese"
        ISDA2008DividendSwapJapan, // (42) "ISDA2008DividendSwapJapan"
        ISDA2008EquityAmericas, // (43) "ISDA2008EquityAmericas"
        ISDA2008EquityFinanceSwapAsiaExcludingJapan, // (44) "ISDA2008EquityFinanceSwapAsiaExcludingJapan"
        ISDA2008EquityOptionAsiaExcludingJapan, // (45) "ISDA2008EquityOptionAsiaExcludingJapan"
        ISDA2008EquityOptionJapan, // (46) "ISDA2008EquityOptionJapan"
        _LAST_
    }
    public partial class MasterConfirmationTypeValue : IFpMLCodeValue
    {
        public MasterConfirmationTypeValue()
        { }
        public MasterConfirmationTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class MasterConfirmationTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "2003CreditIndex", // (1) _2003CreditIndex
            "2004EquityEuropeanInterdealer", // (2) _2004EquityEuropeanInterdealer
            "DJ.CDX.NA", // (3) DJ_CDX_NA
            "DJ.iTraxx.Europe", // (4) DJ_iTraxx_Europe
            "ISDA1999Credit", // (5) ISDA1999Credit
            "ISDA2003CreditAsia", // (6) ISDA2003CreditAsia
            "ISDA2003CreditAustraliaNewZealand", // (7) ISDA2003CreditAustraliaNewZealand
            "ISDA2003CreditEuropean", // (8) ISDA2003CreditEuropean
            "ISDA2003CreditJapan", // (9) ISDA2003CreditJapan
            "ISDA2003CreditNorthAmerican", // (10) ISDA2003CreditNorthAmerican
            "ISDA2003CreditSingapore", // (11) ISDA2003CreditSingapore
            "ISDA2003CreditSovereignAsia", // (12) ISDA2003CreditSovereignAsia
            "ISDA2003CreditSovereignCentralAndEasternEurope", // (13) ISDA2003CreditSovereignCentralAndEasternEurope
            "ISDA2003CreditSovereignJapan", // (14) ISDA2003CreditSovereignJapan
            "ISDA2003CreditSovereignLatinAmerica", // (15) ISDA2003CreditSovereignLatinAmerica
            "ISDA2003CreditSovereignMiddleEast", // (16) ISDA2003CreditSovereignMiddleEast
            "ISDA2003CreditSovereignWesternEurope", // (17) ISDA2003CreditSovereignWesternEurope
            "ISDA2004CreditSovereignAsia", // (18) ISDA2004CreditSovereignAsia
            "ISDA2004CreditSovereignEmergingEuropeanAndMiddleEastern", // (19) ISDA2004CreditSovereignEmergingEuropeanAndMiddleEastern
            "ISDA2004CreditSovereignJapan", // (20) ISDA2004CreditSovereignJapan
            "ISDA2004CreditSovereignLatinAmerican", // (21) ISDA2004CreditSovereignLatinAmerican
            "ISDA2004CreditSovereignWesternEuropean", // (22) ISDA2004CreditSovereignWesternEuropean
            "ISDA2004EquityAmericasInterdealer", // (23) ISDA2004EquityAmericasInterdealer
            "ISDA2005EquityJapaneseInterdealer", // (24) ISDA2005EquityJapaneseInterdealer
            "EquityAmericas", // (25) EquityAmericas
            "EquityEuropean", // (26) EquityEuropean
            "ISDA2005EquityAsiaExcludingJapanInterdealer", // (27) ISDA2005EquityAsiaExcludingJapanInterdealer
            "2005VarianceSwapEuropeanInterdealer", // (28) _2005VarianceSwapEuropeanInterdealer
            "ISDA2006VarianceSwapJapaneseInterdealer", // (29) ISDA2006VarianceSwapJapaneseInterdealer
            "DJ.CDX.EM", // (30) DJ_CDX_EM
            "DJ.CDX.EM.DIV", // (31) DJ_CDX_EM_DIV
            "ISDA2007VarianceSwapAmericas", // (32) ISDA2007VarianceSwapAmericas
            "ISDA2007VarianceSwapAsiaExcludingJapan", // (33) ISDA2007VarianceSwapAsiaExcludingJapan
            "ISDA2007VarianceSwapEuropean", // (34) ISDA2007VarianceSwapEuropean
            "EquityAsia", // (35) EquityAsia
            "ISDA2007EquityEuropean", // (36) ISDA2007EquityEuropean
            "2006DividendSwapEuropean", // (37) _2006DividendSwapEuropean
            "2006DividendSwapEuropeanInterdealer", // (38) _2006DividendSwapEuropeanInterdealer
            "ISDA2007EquityFinanceSwapEuropean", // (39) ISDA2007EquityFinanceSwapEuropean
            "ISDA2004VarianceSwapAmericasInterdealer", // (40) ISDA2004VarianceSwapAmericasInterdealer
            "ISDA2006VarianceSwapJapanese", // (41) ISDA2006VarianceSwapJapanese
            "ISDA2008DividendSwapJapan", // (42) ISDA2008DividendSwapJapan
            "ISDA2008EquityAmericas", // (43) ISDA2008EquityAmericas
            "ISDA2008EquityFinanceSwapAsiaExcludingJapan", // (44) ISDA2008EquityFinanceSwapAsiaExcludingJapan
            "ISDA2008EquityOptionAsiaExcludingJapan", // (45) ISDA2008EquityOptionAsiaExcludingJapan
            "ISDA2008EquityOptionJapan", // (46) ISDA2008EquityOptionJapan
            null // (nn) _LAST_
        };
        public static string GetEnumString(MasterConfirmationTypeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out MasterConfirmationTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (MasterConfirmationTypeEnum tempId in Enum.GetValues(typeof(MasterConfirmationTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = MasterConfirmationTypeEnum.Undefined;
            return false;
        }
        public static MasterConfirmationTypeEnum ParseEnumString(string idString)
        {
            MasterConfirmationTypeEnum result = MasterConfirmationTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to MasterConfirmationTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "MasterConfirmationType"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "MasterConfirmationType");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new MasterConfirmationTypeValue(dataRow); }
        public string GetFpMLSource() { return "master-confirmation-type-5-8"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(MasterConfirmationTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(MasterConfirmationTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                MasterConfirmationTypeValue[] newValues = new MasterConfirmationTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (MasterConfirmationTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("MasterConfirmationTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- MatrixType ----------------------------------------
    public enum MatrixTypeEnum
    {
        Undefined,
        SettlementMatrix, // (1) "SettlementMatrix"
        CreditDerivativesPhysicalSettlementMatrix, // (2) "CreditDerivativesPhysicalSettlementMatrix"
        _LAST_
    }
    public partial class MatrixTypeValue : IFpMLCodeValue
    {
        public MatrixTypeValue()
        { }
        public MatrixTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class MatrixTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "SettlementMatrix", // (1) SettlementMatrix
            "CreditDerivativesPhysicalSettlementMatrix", // (2) CreditDerivativesPhysicalSettlementMatrix
            null // (nn) _LAST_
        };
        public static string GetEnumString(MatrixTypeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out MatrixTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (MatrixTypeEnum tempId in Enum.GetValues(typeof(MatrixTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = MatrixTypeEnum.Undefined;
            return false;
        }
        public static MatrixTypeEnum ParseEnumString(string idString)
        {
            MatrixTypeEnum result = MatrixTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to MatrixTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "MatrixType"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "MatrixType");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new MatrixTypeValue(dataRow); }
        public string GetFpMLSource() { return "matrix-type-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(MatrixTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(MatrixTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                MatrixTypeValue[] newValues = new MatrixTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (MatrixTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("MatrixTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- MortgageSector ----------------------------------------
    public enum MortgageSectorEnum
    {
        Undefined,
        ABS, // (1) "ABS"
        CDO, // (2) "CDO"
        CMBS, // (3) "CMBS"
        RMBS, // (4) "RMBS"
        _LAST_
    }
    public partial class MortgageSectorValue : IFpMLCodeValue
    {
        public MortgageSectorValue()
        { }
        public MortgageSectorValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class MortgageSectorScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "ABS", // (1) ABS
            "CDO", // (2) CDO
            "CMBS", // (3) CMBS
            "RMBS", // (4) RMBS
            null // (nn) _LAST_
        };
        public static string GetEnumString(MortgageSectorEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out MortgageSectorEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (MortgageSectorEnum tempId in Enum.GetValues(typeof(MortgageSectorEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = MortgageSectorEnum.Undefined;
            return false;
        }
        public static MortgageSectorEnum ParseEnumString(string idString)
        {
            MortgageSectorEnum result = MortgageSectorEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to MortgageSectorEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "MortgageSector"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "MortgageSector");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new MortgageSectorValue(dataRow); }
        public string GetFpMLSource() { return "mortgage-sector-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(MortgageSectorValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(MortgageSectorValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                MortgageSectorValue[] newValues = new MortgageSectorValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (MortgageSectorValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("MortgageSectorScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- PerturbationType ----------------------------------------
    public enum PerturbationTypeEnum
    {
        Undefined,
        Absolute, // (1) "Absolute"
        Relative, // (2) "Relative"
        _LAST_
    }
    public partial class PerturbationTypeValue : IFpMLCodeValue
    {
        public PerturbationTypeValue()
        { }
        public PerturbationTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class PerturbationTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Absolute", // (1) Absolute
            "Relative", // (2) Relative
            null // (nn) _LAST_
        };
        public static string GetEnumString(PerturbationTypeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out PerturbationTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (PerturbationTypeEnum tempId in Enum.GetValues(typeof(PerturbationTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = PerturbationTypeEnum.Undefined;
            return false;
        }
        public static PerturbationTypeEnum ParseEnumString(string idString)
        {
            PerturbationTypeEnum result = PerturbationTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to PerturbationTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "PerturbationType"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "PerturbationType");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new PerturbationTypeValue(dataRow); }
        public string GetFpMLSource() { return "perturbation-type-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(PerturbationTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(PerturbationTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                PerturbationTypeValue[] newValues = new PerturbationTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (PerturbationTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("PerturbationTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- PositionStatus ----------------------------------------
    public enum PositionStatusEnum
    {
        Undefined,
        Matched, // (1) "Matched"
        Mismatched, // (2) "Mismatched"
        Unmatched, // (3) "Unmatched"
        Alleged, // (4) "Alleged"
        _LAST_
    }
    public partial class PositionStatusValue : IFpMLCodeValue
    {
        public PositionStatusValue()
        { }
        public PositionStatusValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class PositionStatusScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Matched", // (1) Matched
            "Mismatched", // (2) Mismatched
            "Unmatched", // (3) Unmatched
            "Alleged", // (4) Alleged
            null // (nn) _LAST_
        };
        public static string GetEnumString(PositionStatusEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out PositionStatusEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (PositionStatusEnum tempId in Enum.GetValues(typeof(PositionStatusEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = PositionStatusEnum.Undefined;
            return false;
        }
        public static PositionStatusEnum ParseEnumString(string idString)
        {
            PositionStatusEnum result = PositionStatusEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to PositionStatusEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "PositionStatus"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "PositionStatus");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new PositionStatusValue(dataRow); }
        public string GetFpMLSource() { return "position-status-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(PositionStatusValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(PositionStatusValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                PositionStatusValue[] newValues = new PositionStatusValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (PositionStatusValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("PositionStatusScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- PriceQuoteUnits ----------------------------------------
    public enum PriceQuoteUnitsEnum
    {
        Undefined,
        Price, // (1) "Price"
        ParValueDecimal, // (2) "ParValueDecimal"
        ParValueFraction, // (3) "ParValueFraction"
        Rate, // (4) "Rate"
        DecimalRate, // (5) "DecimalRate"
        InverseDecimalRate, // (6) "InverseDecimalRate"
        Discount, // (7) "Discount"
        IRFuturesPrice, // (8) "IRFuturesPrice"
        ExchangeRate, // (9) "ExchangeRate"
        LogNormalVolatility, // (10) "LogNormalVolatility"
        BasisPointValue, // (11) "BasisPointValue"
        RateSpread, // (12) "RateSpread"
        DecimalSpread, // (13) "DecimalSpread"
        BasisPointValuePerBasisPoint, // (14) "BasisPointValuePerBasisPoint"
        ValuePerPercent, // (15) "ValuePerPercent"
        ValuePerDay, // (16) "ValuePerDay"
        Shares, // (17) "Shares"
        MMBTU, // (18) "MMBTU"
        BBL, // (19) "BBL"
        GJ, // (20) "GJ"
        KL, // (21) "KL"
        KWH, // (22) "KWH"
        MWH, // (23) "MWH"
        t, // (24) "t"
        gal, // (25) "gal"
        _LAST_
    }
    public partial class PriceQuoteUnitsValue : IFpMLCodeValue
    {
        public PriceQuoteUnitsValue()
        { }
        public PriceQuoteUnitsValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class PriceQuoteUnitsScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Price", // (1) Price
            "ParValueDecimal", // (2) ParValueDecimal
            "ParValueFraction", // (3) ParValueFraction
            "Rate", // (4) Rate
            "DecimalRate", // (5) DecimalRate
            "InverseDecimalRate", // (6) InverseDecimalRate
            "Discount", // (7) Discount
            "IRFuturesPrice", // (8) IRFuturesPrice
            "ExchangeRate", // (9) ExchangeRate
            "LogNormalVolatility", // (10) LogNormalVolatility
            "BasisPointValue", // (11) BasisPointValue
            "RateSpread", // (12) RateSpread
            "DecimalSpread", // (13) DecimalSpread
            "BasisPointValuePerBasisPoint", // (14) BasisPointValuePerBasisPoint
            "ValuePerPercent", // (15) ValuePerPercent
            "ValuePerDay", // (16) ValuePerDay
            "Shares", // (17) Shares
            "MMBTU", // (18) MMBTU
            "BBL", // (19) BBL
            "GJ", // (20) GJ
            "KL", // (21) KL
            "KWH", // (22) KWH
            "MWH", // (23) MWH
            "t", // (24) t
            "gal", // (25) gal
            null // (nn) _LAST_
        };
        public static string GetEnumString(PriceQuoteUnitsEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out PriceQuoteUnitsEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (PriceQuoteUnitsEnum tempId in Enum.GetValues(typeof(PriceQuoteUnitsEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = PriceQuoteUnitsEnum.Undefined;
            return false;
        }
        public static PriceQuoteUnitsEnum ParseEnumString(string idString)
        {
            PriceQuoteUnitsEnum result = PriceQuoteUnitsEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to PriceQuoteUnitsEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "PriceQuoteUnits"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "PriceQuoteUnits");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new PriceQuoteUnitsValue(dataRow); }

        public string GetFpMLSource() { return "price-quote-units-1-1"; }

        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(PriceQuoteUnitsValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(PriceQuoteUnitsValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                var newValues = new PriceQuoteUnitsValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (PriceQuoteUnitsValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("PriceQuoteUnitsScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- PricingInputType ----------------------------------------
    public enum PricingInputTypeEnum
    {
        Undefined,
        YieldCurve, // (1) "YieldCurve"
        CreditCurve, // (2) "CreditCurve"
        FXForecastCurve, // (3) "FXForecastCurve"
        VolatilityMatrix, // (4) "VolatilityMatrix"
        AssetPrices, // (5) "AssetPrices"
        Time, // (6) "Time"
        _LAST_
    }

    public partial class PricingInputTypeValue : IFpMLCodeValue
    {
        public PricingInputTypeValue()
        { }
        public PricingInputTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }

    public partial class PricingInputTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "YieldCurve", // (1) YieldCurve
            "CreditCurve", // (2) CreditCurve
            "FXForecastCurve", // (3) FXForecastCurve
            "VolatilityMatrix", // (4) VolatilityMatrix
            "AssetPrices", // (5) AssetPrices
            "Time", // (6) Time
            null // (nn) _LAST_
        };
        public static string GetEnumString(PricingInputTypeEnum id) { return _EnumStrings[(int)id]; }

        public static bool TryParseEnumString(string idString, out PricingInputTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (PricingInputTypeEnum tempId in Enum.GetValues(typeof(PricingInputTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = PricingInputTypeEnum.Undefined;
            return false;
        }
        public static PricingInputTypeEnum ParseEnumString(string idString)
        {
            PricingInputTypeEnum result = PricingInputTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to PricingInputTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "PricingInputType"
            + ((suffix == null) ? null : ("." + suffix));
        }

        public NamedValueSet GetItemProps()
        {
            var result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "PricingInputType");
            return result;
        }

        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new PricingInputTypeValue(dataRow); }

        public string GetFpMLSource() { return "pricing-input-type-1-0"; }

        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(PricingInputTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(PricingInputTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                var newValues = new PricingInputTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (PricingInputTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("PricingInputTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- ProductTypeSimple ----------------------------------------Added as not included yet
    public enum ProductTaxonomyEnum
    {
        Undefined,
        Commodity_Agricultural_Dairy_Exotic,
        Commodity_Agricultural_Dairy_LoanLease_Cash,
        Commodity_Agricultural_Dairy_LoanLease_Physical,
        Commodity_Agricultural_Dairy_Option_Cash,
        Commodity_Agricultural_Dairy_Option_Physical,
        Commodity_Agricultural_Dairy_SpotFwd_Physical,
        Commodity_Agricultural_Dairy_Swap_Cash,
        Commodity_Agricultural_Forestry_Exotic,
        Commodity_Agricultural_Forestry_LoanLease_Cash,
        Commodity_Agricultural_Forestry_LoanLease_Physical,
        Commodity_Agricultural_Forestry_Option_Cash,
        Commodity_Agricultural_Forestry_Option_Physical,
        Commodity_Agricultural_Forestry_SpotFwd_Physical,
        Commodity_Agricultural_Forestry_Swap_Cash,
        Commodity_Agricultural_GrainsOilSeeds_Exotic,
        Commodity_Agricultural_GrainsOilSeeds_LoanLease_Cash,
        Commodity_Agricultural_GrainsOilSeeds_LoanLease_Physical,
        Commodity_Agricultural_GrainsOilSeeds_Option_Cash,
        Commodity_Agricultural_GrainsOilSeeds_Option_Physical,
        Commodity_Agricultural_GrainsOilSeeds_SpotFwd_Physical,
        Commodity_Agricultural_GrainsOilSeeds_Swap_Cash,
        Commodity_Agricultural_Livestock_Exotic,
        Commodity_Agricultural_Livestock_LoanLease_Cash,
        Commodity_Agricultural_Livestock_LoanLease_Physical,
        Commodity_Agricultural_Livestock_Option_Cash,
        Commodity_Agricultural_Livestock_Option_Physical,
        Commodity_Agricultural_Livestock_SpotFwd_Physical,
        Commodity_Agricultural_Livestock_Swap_Cash,
        Commodity_Agricultural_Softs_Exotic,
        Commodity_Agricultural_Softs_LoanLease_Cash,
        Commodity_Agricultural_Softs_LoanLease_Physical,
        Commodity_Agricultural_Softs_Option_Cash,
        Commodity_Agricultural_Softs_Option_Physical,
        Commodity_Agricultural_Softs_SpotFwd_Physical,
        Commodity_Agricultural_Softs_Swap_Cash,
        Commodity_Energy_Coal_Exotic,
        Commodity_Energy_Coal_LoanLease_Cash,
        Commodity_Energy_Coal_LoanLease_Physical,
        Commodity_Energy_Coal_Option_Cash,
        Commodity_Energy_Coal_Option_Physical,
        Commodity_Energy_Coal_SpotFwd_Physical,
        Commodity_Energy_Coal_Swap_Cash,
        Commodity_Energy_Elec_Exotic,
        Commodity_Energy_Elec_LoanLease_Cash,
        Commodity_Energy_Elec_LoanLease_Physical,
        Commodity_Energy_Elec_Option_Cash,
        Commodity_Energy_Elec_Option_Physical,
        Commodity_Energy_Elec_SpotFwd_Physical,
        Commodity_Energy_Elec_Swap_Cash,
        Commodity_Energy_Elec_Transmission,
        Commodity_Energy_InterEnergy_Exotic,
        Commodity_Energy_InterEnergy_LoanLease_Cash,
        Commodity_Energy_InterEnergy_LoanLease_Physical,
        Commodity_Energy_InterEnergy_Option_Cash,
        Commodity_Energy_InterEnergy_Option_Physical,
        Commodity_Energy_InterEnergy_SpotFwd_Physical,
        Commodity_Energy_InterEnergy_Swap_Cash,
        Commodity_Energy_NatGas_Exotic,
        Commodity_Energy_NatGas_LoanLease_Cash,
        Commodity_Energy_NatGas_LoanLease_Physical,
        Commodity_Energy_NatGas_Option_Cash,
        Commodity_Energy_NatGas_Option_Physical,
        Commodity_Energy_NatGas_SpotFwd_Physical,
        Commodity_Energy_NatGas_Swap_Cash,
        Commodity_Energy_NatGas_Transport,
        Commodity_Energy_Oil_Exotic,
        Commodity_Energy_Oil_LoanLease_Cash,
        Commodity_Energy_Oil_LoanLease_Physical,
        Commodity_Energy_Oil_Option_Cash,
        Commodity_Energy_Oil_Option_Physical,
        Commodity_Energy_Oil_SpotFwd_Physical,
        Commodity_Energy_Oil_Swap_Cash,
        Commodity_Environmental_Emissions_Exotic,
        Commodity_Environmental_Emissions_LoanLease_Cash,
        Commodity_Environmental_Emissions_LoanLease_Physical,
        Commodity_Environmental_Emissions_Option_Cash,
        Commodity_Environmental_Emissions_Option_Physical,
        Commodity_Environmental_Emissions_SpotFwd_Physical,
        Commodity_Environmental_Emissions_Swap_Cash,
        Commodity_Environmental_Weather_Exotic,
        Commodity_Environmental_Weather_LoanLease_Cash,
        Commodity_Environmental_Weather_Option_Cash,
        Commodity_Environmental_Weather_Swap_Cash,
        Commodity_Freight_Exotic,
        Commodity_Freight_LoanLease_Cash,
        Commodity_Freight_LoanLease_Physical,
        Commodity_Freight_Option_Cash,
        Commodity_Freight_Option_Physical,
        Commodity_Freight_SpotFwd_Physical,
        Commodity_Freight_Swap_Cash,
        Commodity_Index_Exotic,
        Commodity_Index_Option_Cash,
        Commodity_Index_Swap_Cash,
        Commodity_Metals_NonPrecious_Exotic,
        Commodity_Metals_NonPrecious_LoanLease_Cash,
        Commodity_Metals_NonPrecious_LoanLease_Physical,
        Commodity_Metals_NonPrecious_Option_Cash,
        Commodity_Metals_NonPrecious_Option_Physical,
        Commodity_Metals_NonPrecious_SpotFwd_Physical,
        Commodity_Metals_NonPrecious_Swap_Cash,
        Commodity_Metals_Precious_Exotic,
        Commodity_Metals_Precious_LoanLease_Cash,
        Commodity_Metals_Precious_LoanLease_Physical,
        Commodity_Metals_Precious_Option_Cash,
        Commodity_Metals_Precious_Option_Physical,
        Commodity_Metals_Precious_SpotFwd_Physical,
        Commodity_Metals_Precious_Swap_Cash,
        Commodity_MultiCommodityExotic,
        Credit_Exotic_Corporate_Refobonly,
        Credit_Exotic_Other,
        Credit_Exotic_StructuredCDS_ContingentCDS,
        Credit_Exotic_StructuredCDS_FirsttoDefaultNthtoDefault,
        Credit_Exotic_StructuredCDS_LongformBespoke,
        Credit_Exotic_StructuredCDS_StandardTermsBespoke,
        Credit_Index_ABX_ABXHE,
        Credit_Index_CDX_CDXEmergingMarkets,
        Credit_Index_CDX_CDXEmergingMarketsDiversified,
        Credit_Index_CDX_CDXHY,
        Credit_Index_CDX_CDXIG,
        Credit_Index_CDX_CDXXO,
        Credit_Index_CDX_StandardLCDXBullet,
        Credit_Index_CMBX_CMBX,
        Credit_Index_IOS_IOS,
        Credit_Index_iTraxx_iTraxxAsiaExJapan,
        Credit_Index_iTraxx_iTraxxAustralia,
        Credit_Index_iTraxx_iTraxxEurope,
        Credit_Index_iTraxx_iTraxxJapan,
        Credit_Index_iTraxx_iTraxxLevX,
        Credit_Index_iTraxx_ItraxxSDI,
        Credit_Index_iTraxx_iTraxxSovX,
        Credit_Index_LCDX_LCDX,
        Credit_Index_MBX_MBX,
        Credit_Index_MCDX_MCDX,
        Credit_Index_PO_PO,
        Credit_Index_PrimeX_PrimeX,
        Credit_Index_TRX_TRX,
        Credit_IndexTranche_ABX_ABXTranche,
        Credit_IndexTranche_CDX_CDXEmergingMarketsDiversifiedTranche,
        Credit_IndexTranche_CDX_CDXTrancheHY,
        Credit_IndexTranche_CDX_CDXTrancheIG,
        Credit_IndexTranche_CDX_CDXTrancheXO,
        Credit_IndexTranche_CDX_StandardCDXTrancheHY,
        Credit_IndexTranche_CDX_StandardCDXTrancheIG,
        Credit_IndexTranche_CDXStructuredTranche_CDXBlendedTranche,
        Credit_IndexTranche_CDXStructuredTranche_CDXRiskyZeroTranche,
        Credit_IndexTranche_iTraxx_iTraxxAsiaExJapanTranche,
        Credit_IndexTranche_iTraxx_iTraxxAustraliaTranche,
        Credit_IndexTranche_iTraxx_iTraxxEuropeTranche,
        Credit_IndexTranche_iTraxx_iTraxxJapanTranche,
        Credit_IndexTranche_iTraxx_StandardiTraxxEuropeTranche,
        Credit_IndexTranche_iTraxxStructuredTranche_iTraxxBlendedTranche,
        Credit_IndexTranche_iTraxxStructuredTranche_iTraxxRiskyZeroTranche,
        Credit_IndexTranche_LCDX_LCDXTranche,
        Credit_IndexTranche_LCDX_StandardLCDXBulletTranche,
        Credit_SingleName_ABS_CDSonCDO,
        Credit_SingleName_ABS_CMBS,
        Credit_SingleName_ABS_EuropeanCMBS,
        Credit_SingleName_ABS_EuropeanRMBS,
        Credit_SingleName_ABS_RMBS,
        Credit_SingleName_Corporate_AsiaCorporate,
        Credit_SingleName_Corporate_AustraliaCorporate,
        Credit_SingleName_Corporate_EmergingEuropeanCorporate,
        Credit_SingleName_Corporate_EmergingEuropeanCorporateLPN,
        Credit_SingleName_Corporate_EuropeanCorporate,
        Credit_SingleName_Corporate_JapanCorporate,
        Credit_SingleName_Corporate_LatinAmericaCorporate,
        Credit_SingleName_Corporate_LatinAmericaCorporateBond,
        Credit_SingleName_Corporate_LatinAmericaCorporateBondOrLoan,
        Credit_SingleName_Corporate_NewZealandCorporate,
        Credit_SingleName_Corporate_NorthAmericanCorporate,
        Credit_SingleName_Corporate_SingaporeCorporate,
        Credit_SingleName_Corporate_StandardAsiaCorporate,
        Credit_SingleName_Corporate_StandardAustraliaCorporate,
        Credit_SingleName_Corporate_StandardEmergingEuropeanCorporate,
        Credit_SingleName_Corporate_StandardEmergingEuropeanCorporateLPN,
        Credit_SingleName_Corporate_StandardEuropeanCorporate,
        Credit_SingleName_Corporate_StandardJapanCorporate,
        Credit_SingleName_Corporate_StandardLatinAmericaCorporateBond,
        Credit_SingleName_Corporate_StandardLatinAmericaCorporateBondOrLoan,
        Credit_SingleName_Corporate_StandardNewZealandCorporate,
        Credit_SingleName_Corporate_StandardNorthAmericanCorporate,
        Credit_SingleName_Corporate_StandardSingaporeCorporate,
        Credit_SingleName_Corporate_StandardSubordinatedEuropeanInsuranceCorporate,
        Credit_SingleName_Corporate_StandardSukukCorporate,
        Credit_SingleName_Corporate_SubordinatedEuropeanInsuranceCorporate,
        Credit_SingleName_Corporate_SukukCorporate,
        Credit_SingleName_Loans_ELCDS,
        Credit_SingleName_Loans_LCDS,
        Credit_SingleName_Loans_StandardLCDSBullet,
        Credit_SingleName_Muni_USMunicipalFullFaithAndCredit,
        Credit_SingleName_Muni_USMunicipalGeneralFund,
        Credit_SingleName_Muni_USMunicipalRevenue,
        Credit_SingleName_RecoveryCDS_FixedRecoverySwaps,
        Credit_SingleName_RecoveryCDS_RecoveryLocks,
        Credit_SingleName_Sovereign_AsiaSovereign,
        Credit_SingleName_Sovereign_AustraliaSovereign,
        Credit_SingleName_Sovereign_EmergingEuropeanAndMiddleEasternSovereign,
        Credit_SingleName_Sovereign_JapanSovereign,
        Credit_SingleName_Sovereign_LatinAmericaSovereign,
        Credit_SingleName_Sovereign_NewZealandSovereign,
        Credit_SingleName_Sovereign_SingaporeSovereign,
        Credit_SingleName_Sovereign_StandardAsiaSovereign,
        Credit_SingleName_Sovereign_StandardAustraliaSovereign,
        Credit_SingleName_Sovereign_StandardEmergingEuropeanAndMiddleEasternSovereign,
        Credit_SingleName_Sovereign_StandardJapanSovereign,
        Credit_SingleName_Sovereign_StandardLatinAmericaSovereign,
        Credit_SingleName_Sovereign_StandardNewZealandSovereign,
        Credit_SingleName_Sovereign_StandardSingaporeSovereign,
        Credit_SingleName_Sovereign_StandardSukukSovereign,
        Credit_SingleName_Sovereign_StandardWesternEuropeanSovereign,
        Credit_SingleName_Sovereign_SukukSovereign,
        Credit_SingleName_Sovereign_WesternEuropeanSovereign,
        Credit_Swaptions_CDX_CDXSwaption,
        Credit_Swaptions_Corporate_CDSSwaption,
        Credit_Swaptions_iTraxx_iTraxxAsiaExJapanSwaption,
        Credit_Swaptions_iTraxx_iTraxxAustraliaSwaption,
        Credit_Swaptions_iTraxx_iTraxxEuropeSwaption,
        Credit_Swaptions_iTraxx_iTraxxJapanSwaption,
        Credit_Swaptions_iTraxx_iTraxxSovXSwaption,
        Credit_Swaptions_Muni_CDSSwaption,
        Credit_Swaptions_Sovereign_CDSSwaption,
        Credit_TotalReturnSwap,
        Equity_ContractForDifference_PriceReturnBasicPerformance_Basket,
        Equity_ContractForDifference_PriceReturnBasicPerformance_SingleIndex,
        Equity_ContractForDifference_PriceReturnBasicPerformance_SingleName,
        Equity_Forward_PriceReturnBasicPerformance_Basket,
        Equity_Forward_PriceReturnBasicPerformance_SingleIndex,
        Equity_Forward_PriceReturnBasicPerformance_SingleName,
        Equity_Option_ParameterReturnDividend_Basket,
        Equity_Option_ParameterReturnDividend_SingleIndex,
        Equity_Option_ParameterReturnDividend_SingleName,
        Equity_Option_ParameterReturnVariance_Basket,
        Equity_Option_ParameterReturnVariance_SingleIndex,
        Equity_Option_ParameterReturnVariance_SingleName,
        Equity_Option_ParameterReturnVolatility_Basket,
        Equity_Option_ParameterReturnVolatility_SingleIndex,
        Equity_Option_ParameterReturnVolatility_SingleName,
        Equity_Option_PriceReturnBasicPerformance_Basket,
        Equity_Option_PriceReturnBasicPerformance_SingleIndex,
        Equity_Option_PriceReturnBasicPerformance_SingleName,
        Equity_Other,
        Equity_PortfolioSwap_PriceReturnBasicPerformance_Basket,
        Equity_PortfolioSwap_PriceReturnBasicPerformance_SingleIndex,
        Equity_PortfolioSwap_PriceReturnBasicPerformance_SingleName,
        Equity_Swap_ParameterReturnDividend_Basket,
        Equity_Swap_ParameterReturnDividend_SingleIndex,
        Equity_Swap_ParameterReturnDividend_SingleName,
        Equity_Swap_ParameterReturnVariance_Basket,
        Equity_Swap_ParameterReturnVariance_SingleIndex,
        Equity_Swap_ParameterReturnVariance_SingleName,
        Equity_Swap_ParameterReturnVolatility_Basket,
        Equity_Swap_ParameterReturnVolatility_SingleIndex,
        Equity_Swap_ParameterReturnVolatility_SingleName,
        Equity_Swap_PriceReturnBasicPerformance_Basket,
        Equity_Swap_PriceReturnBasicPerformance_SingleIndex,
        Equity_Swap_PriceReturnBasicPerformance_SingleName,
        ForeignExchange_ComplexExotic,
        ForeignExchange_Forward,
        ForeignExchange_NDF,
        ForeignExchange_NDO,
        ForeignExchange_SimpleExotic_Barrier,
        ForeignExchange_SimpleExotic_Digital,
        ForeignExchange_Spot,
        ForeignExchange_VanillaOption,
        InterestRate_CapFloor,
        InterestRate_CrossCurrency_Basis,
        InterestRate_CrossCurrency_FixedFixed,
        InterestRate_CrossCurrency_FixedFloat,
        InterestRate_Exotic,
        InterestRate_FRA,
        InterestRate_IRSwap_Basis,
        InterestRate_IRSwap_FixedFixed,
        InterestRate_IRSwap_FixedFloat,
        InterestRate_IRSwap_Inflation,
        InterestRate_IRSwap_OIS,
        InterestRate_Option_DebtOption,
        InterestRate_Option_Swaption,
        //Added
        ForeignExchange_Swap,
        InterestRate_Debt_Government_Fixed_Bullet,
        InterestRate_Debt_Government_Float_Bullet,
        Inflation_Debt_Government_Fixed_Ammortising,
        Inflation_Debt_Government_Float_Ammortising,
        InterestRate_TermDeposit,
        Cash_Payment,
        Credit_Debt_ABS_CDSonCDO,
        Credit_Debt_ABS_CMBS,
        Credit_Debt_ABS_EuropeanCMBS,
        Credit_Debt_ABS_EuropeanRMBS,
        Credit_Debt_ABS_RMBS,
        Equity_OrdinaryShares,
        Equity_Forward_Physical,
        Property_Residential,
        Exchange_Traded_Future
    }

    public partial class ProductTaxonomyValue : IFpMLCodeValue
    {
        public ProductTaxonomyValue()
        { }

        public ProductTaxonomyValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }

        public string GetPrimaryKey() { return Code; }
    }

    public partial class ProductTaxonomyScheme : IFpMLCodeScheme
    {
        private static readonly string[] EnumStrings = 
        {
            null, // (0) Undefined
            "Commodity:Agricultural:Dairy:Exotic",
            "Commodity:Agricultural:Dairy:LoanLease:Cash",
            "Commodity:Agricultural:Dairy:LoanLease:Physical",
            "Commodity:Agricultural:Dairy:Option:Cash",
            "Commodity:Agricultural:Dairy:Option:Physical",
            "Commodity:Agricultural:Dairy:SpotFwd:Physical",
            "Commodity:Agricultural:Dairy:Swap:Cash",
            "Commodity:Agricultural:Forestry:Exotic",
            "Commodity:Agricultural:Forestry:LoanLease:Cash",
            "Commodity:Agricultural:Forestry:LoanLease:Physical",
            "Commodity:Agricultural:Forestry:Option:Cash",
            "Commodity:Agricultural:Forestry:Option:Physical",
            "Commodity:Agricultural:Forestry:SpotFwd:Physical",
            "Commodity:Agricultural:Forestry:Swap:Cash",
            "Commodity:Agricultural:GrainsOilSeeds:Exotic",
            "Commodity:Agricultural:GrainsOilSeeds:LoanLease:Cash",
            "Commodity:Agricultural:GrainsOilSeeds:LoanLease:Physical",
            "Commodity:Agricultural:GrainsOilSeeds:Option:Cash",
            "Commodity:Agricultural:GrainsOilSeeds:Option:Physical",
            "Commodity:Agricultural:GrainsOilSeeds:SpotFwd:Physical",
            "Commodity:Agricultural:GrainsOilSeeds:Swap:Cash",
            "Commodity:Agricultural:Livestock:Exotic",
            "Commodity:Agricultural:Livestock:LoanLease:Cash",
            "Commodity:Agricultural:Livestock:LoanLease:Physical",
            "Commodity:Agricultural:Livestock:Option:Cash",
            "Commodity:Agricultural:Livestock:Option:Physical",
            "Commodity:Agricultural:Livestock:SpotFwd:Physical",
            "Commodity:Agricultural:Livestock:Swap:Cash",
            "Commodity:Agricultural:Softs:Exotic",
            "Commodity:Agricultural:Softs:LoanLease:Cash",
            "Commodity:Agricultural:Softs:LoanLease:Physical",
            "Commodity:Agricultural:Softs:Option:Cash",
            "Commodity:Agricultural:Softs:Option:Physical",
            "Commodity:Agricultural:Softs:SpotFwd:Physical",
            "Commodity:Agricultural:Softs:Swap:Cash",
            "Commodity:Energy:Coal:Exotic",
            "Commodity:Energy:Coal:LoanLease:Cash",
            "Commodity:Energy:Coal:LoanLease:Physical",
            "Commodity:Energy:Coal:Option:Cash",
            "Commodity:Energy:Coal:Option:Physical",
            "Commodity:Energy:Coal:SpotFwd:Physical",
            "Commodity:Energy:Coal:Swap:Cash",
            "Commodity:Energy:Elec:Exotic",
            "Commodity:Energy:Elec:LoanLease:Cash",
            "Commodity:Energy:Elec:LoanLease:Physical",
            "Commodity:Energy:Elec:Option:Cash",
            "Commodity:Energy:Elec:Option:Physical",
            "Commodity:Energy:Elec:SpotFwd:Physical",
            "Commodity:Energy:Elec:Swap:Cash",
            "Commodity:Energy:Elec:Transmission",
            "Commodity:Energy:InterEnergy:Exotic",
            "Commodity:Energy:InterEnergy:LoanLease:Cash",
            "Commodity:Energy:InterEnergy:LoanLease:Physical",
            "Commodity:Energy:InterEnergy:Option:Cash",
            "Commodity:Energy:InterEnergy:Option:Physical",
            "Commodity:Energy:InterEnergy:SpotFwd:Physical",
            "Commodity:Energy:InterEnergy:Swap:Cash",
            "Commodity:Energy:NatGas:Exotic",
            "Commodity:Energy:NatGas:LoanLease:Cash",
            "Commodity:Energy:NatGas:LoanLease:Physical",
            "Commodity:Energy:NatGas:Option:Cash",
            "Commodity:Energy:NatGas:Option:Physical",
            "Commodity:Energy:NatGas:SpotFwd:Physical",
            "Commodity:Energy:NatGas:Swap:Cash",
            "Commodity:Energy:NatGas:Transport",
            "Commodity:Energy:Oil:Exotic",
            "Commodity:Energy:Oil:LoanLease:Cash",
            "Commodity:Energy:Oil:LoanLease:Physical",
            "Commodity:Energy:Oil:Option:Cash",
            "Commodity:Energy:Oil:Option:Physical",
            "Commodity:Energy:Oil:SpotFwd:Physical",
            "Commodity:Energy:Oil:Swap:Cash",
            "Commodity:Environmental:Emissions:Exotic",
            "Commodity:Environmental:Emissions:LoanLease:Cash",
            "Commodity:Environmental:Emissions:LoanLease:Physical",
            "Commodity:Environmental:Emissions:Option:Cash",
            "Commodity:Environmental:Emissions:Option:Physical",
            "Commodity:Environmental:Emissions:SpotFwd:Physical",
            "Commodity:Environmental:Emissions:Swap:Cash",
            "Commodity:Environmental:Weather:Exotic",
            "Commodity:Environmental:Weather:LoanLease:Cash",
            "Commodity:Environmental:Weather:Option:Cash",
            "Commodity:Environmental:Weather:Swap:Cash",
            "Commodity:Freight:Exotic",
            "Commodity:Freight:LoanLease:Cash",
            "Commodity:Freight:LoanLease:Physical",
            "Commodity:Freight:Option:Cash",
            "Commodity:Freight:Option:Physical",
            "Commodity:Freight:SpotFwd:Physical",
            "Commodity:Freight:Swap:Cash",
            "Commodity:Index:Exotic",
            "Commodity:Index:Option:Cash",
            "Commodity:Index:Swap:Cash",
            "Commodity:Metals:NonPrecious:Exotic",
            "Commodity:Metals:NonPrecious:LoanLease:Cash",
            "Commodity:Metals:NonPrecious:LoanLease:Physical",
            "Commodity:Metals:NonPrecious:Option:Cash",
            "Commodity:Metals:NonPrecious:Option:Physical",
            "Commodity:Metals:NonPrecious:SpotFwd:Physical",
            "Commodity:Metals:NonPrecious:Swap:Cash",
            "Commodity:Metals:Precious:Exotic",
            "Commodity:Metals:Precious:LoanLease:Cash",
            "Commodity:Metals:Precious:LoanLease:Physical",
            "Commodity:Metals:Precious:Option:Cash",
            "Commodity:Metals:Precious:Option:Physical",
            "Commodity:Metals:Precious:SpotFwd:Physical",
            "Commodity:Metals:Precious:Swap:Cash",
            "Commodity:MultiCommodityExotic",
            "Credit:Exotic:Corporate:Refobonly",
            "Credit:Exotic:Other",
            "Credit:Exotic:StructuredCDS:ContingentCDS",
            "Credit:Exotic:StructuredCDS:FirsttoDefaultNthtoDefault",
            "Credit:Exotic:StructuredCDS:LongformBespoke",
            "Credit:Exotic:StructuredCDS:StandardTermsBespoke",
            "Credit:Index:ABX:ABXHE",
            "Credit:Index:CDX:CDXEmergingMarkets",
            "Credit:Index:CDX:CDXEmergingMarketsDiversified",
            "Credit:Index:CDX:CDXHY",
            "Credit:Index:CDX:CDXIG",
            "Credit:Index:CDX:CDXXO",
            "Credit:Index:CDX:StandardLCDXBullet",
            "Credit:Index:CMBX:CMBX",
            "Credit:Index:IOS:IOS",
            "Credit:Index:iTraxx:iTraxxAsiaExJapan",
            "Credit:Index:iTraxx:iTraxxAustralia",
            "Credit:Index:iTraxx:iTraxxEurope",
            "Credit:Index:iTraxx:iTraxxJapan",
            "Credit:Index:iTraxx:iTraxxLevX",
            "Credit:Index:iTraxx:ItraxxSDI",
            "Credit:Index:iTraxx:iTraxxSovX",
            "Credit:Index:LCDX:LCDX",
            "Credit:Index:MBX:MBX",
            "Credit:Index:MCDX:MCDX",
            "Credit:Index:PO:PO",
            "Credit:Index:PrimeX:PrimeX",
            "Credit:Index:TRX:TRX",
            "Credit:IndexTranche:ABX:ABXTranche",
            "Credit:IndexTranche:CDX:CDXEmergingMarketsDiversifiedTranche",
            "Credit:IndexTranche:CDX:CDXTrancheHY",
            "Credit:IndexTranche:CDX:CDXTrancheIG",
            "Credit:IndexTranche:CDX:CDXTrancheXO",
            "Credit:IndexTranche:CDX:StandardCDXTrancheHY",
            "Credit:IndexTranche:CDX:StandardCDXTrancheIG",
            "Credit:IndexTranche:CDXStructuredTranche:CDXBlendedTranche",
            "Credit:IndexTranche:CDXStructuredTranche:CDXRiskyZeroTranche",
            "Credit:IndexTranche:iTraxx:iTraxxAsiaExJapanTranche",
            "Credit:IndexTranche:iTraxx:iTraxxAustraliaTranche",
            "Credit:IndexTranche:iTraxx:iTraxxEuropeTranche",
            "Credit:IndexTranche:iTraxx:iTraxxJapanTranche",
            "Credit:IndexTranche:iTraxx:StandardiTraxxEuropeTranche",
            "Credit:IndexTranche:iTraxxStructuredTranche:iTraxxBlendedTranche",
            "Credit:IndexTranche:iTraxxStructuredTranche:iTraxxRiskyZeroTranche",
            "Credit:IndexTranche:LCDX:LCDXTranche",
            "Credit:IndexTranche:LCDX:StandardLCDXBulletTranche",
            "Credit:SingleName:ABS:CDSonCDO",
            "Credit:SingleName:ABS:CMBS",
            "Credit:SingleName:ABS:EuropeanCMBS",
            "Credit:SingleName:ABS:EuropeanRMBS",
            "Credit:SingleName:ABS:RMBS",
            "Credit:SingleName:Corporate:AsiaCorporate",
            "Credit:SingleName:Corporate:AustraliaCorporate",
            "Credit:SingleName:Corporate:EmergingEuropeanCorporate",
            "Credit:SingleName:Corporate:EmergingEuropeanCorporateLPN",
            "Credit:SingleName:Corporate:EuropeanCorporate",
            "Credit:SingleName:Corporate:JapanCorporate",
            "Credit:SingleName:Corporate:LatinAmericaCorporate",
            "Credit:SingleName:Corporate:LatinAmericaCorporateBond",
            "Credit:SingleName:Corporate:LatinAmericaCorporateBondOrLoan",
            "Credit:SingleName:Corporate:NewZealandCorporate",
            "Credit:SingleName:Corporate:NorthAmericanCorporate",
            "Credit:SingleName:Corporate:SingaporeCorporate",
            "Credit:SingleName:Corporate:StandardAsiaCorporate",
            "Credit:SingleName:Corporate:StandardAustraliaCorporate",
            "Credit:SingleName:Corporate:StandardEmergingEuropeanCorporate",
            "Credit:SingleName:Corporate:StandardEmergingEuropeanCorporateLPN",
            "Credit:SingleName:Corporate:StandardEuropeanCorporate",
            "Credit:SingleName:Corporate:StandardJapanCorporate",
            "Credit:SingleName:Corporate:StandardLatinAmericaCorporateBond",
            "Credit:SingleName:Corporate:StandardLatinAmericaCorporateBondOrLoan",
            "Credit:SingleName:Corporate:StandardNewZealandCorporate",
            "Credit:SingleName:Corporate:StandardNorthAmericanCorporate",
            "Credit:SingleName:Corporate:StandardSingaporeCorporate",
            "Credit:SingleName:Corporate:StandardSubordinatedEuropeanInsuranceCorporate",
            "Credit:SingleName:Corporate:StandardSukukCorporate",
            "Credit:SingleName:Corporate:SubordinatedEuropeanInsuranceCorporate",
            "Credit:SingleName:Corporate:SukukCorporate",
            "Credit:SingleName:Loans:ELCDS",
            "Credit:SingleName:Loans:LCDS",
            "Credit:SingleName:Loans:StandardLCDSBullet",
            "Credit:SingleName:Muni:USMunicipalFullFaithAndCredit",
            "Credit:SingleName:Muni:USMunicipalGeneralFund",
            "Credit:SingleName:Muni:USMunicipalRevenue",
            "Credit:SingleName:RecoveryCDS:FixedRecoverySwaps",
            "Credit:SingleName:RecoveryCDS:RecoveryLocks",
            "Credit:SingleName:Sovereign:AsiaSovereign",
            "Credit:SingleName:Sovereign:AustraliaSovereign",
            "Credit:SingleName:Sovereign:EmergingEuropeanAndMiddleEasternSovereign",
            "Credit:SingleName:Sovereign:JapanSovereign",
            "Credit:SingleName:Sovereign:LatinAmericaSovereign",
            "Credit:SingleName:Sovereign:NewZealandSovereign",
            "Credit:SingleName:Sovereign:SingaporeSovereign",
            "Credit:SingleName:Sovereign:StandardAsiaSovereign",
            "Credit:SingleName:Sovereign:StandardAustraliaSovereign",
            "Credit:SingleName:Sovereign:StandardEmergingEuropeanAndMiddleEasternSovereign",
            "Credit:SingleName:Sovereign:StandardJapanSovereign",
            "Credit:SingleName:Sovereign:StandardLatinAmericaSovereign",
            "Credit:SingleName:Sovereign:StandardNewZealandSovereign",
            "Credit:SingleName:Sovereign:StandardSingaporeSovereign",
            "Credit:SingleName:Sovereign:StandardSukukSovereign",
            "Credit:SingleName:Sovereign:StandardWesternEuropeanSovereign",
            "Credit:SingleName:Sovereign:SukukSovereign",
            "Credit:SingleName:Sovereign:WesternEuropeanSovereign",
            "Credit:Swaptions:CDX:CDXSwaption",
            "Credit:Swaptions:Corporate:CDSSwaption",
            "Credit:Swaptions:iTraxx:iTraxxAsiaExJapanSwaption",
            "Credit:Swaptions:iTraxx:iTraxxAustraliaSwaption",
            "Credit:Swaptions:iTraxx:iTraxxEuropeSwaption",
            "Credit:Swaptions:iTraxx:iTraxxJapanSwaption",
            "Credit:Swaptions:iTraxx:iTraxxSovXSwaption",
            "Credit:Swaptions:Muni:CDSSwaption",
            "Credit:Swaptions:Sovereign:CDSSwaption",
            "Credit:TotalReturnSwap",
            "Equity:ContractForDifference:PriceReturnBasicPerformance:Basket",
            "Equity:ContractForDifference:PriceReturnBasicPerformance:SingleIndex",
            "Equity:ContractForDifference:PriceReturnBasicPerformance:SingleName",
            "Equity:Forward:PriceReturnBasicPerformance:Basket",
            "Equity:Forward:PriceReturnBasicPerformance:SingleIndex",
            "Equity:Forward:PriceReturnBasicPerformance:SingleName",
            "Equity:Option:ParameterReturnDividend:Basket",
            "Equity:Option:ParameterReturnDividend:SingleIndex",
            "Equity:Option:ParameterReturnDividend:SingleName",
            "Equity:Option:ParameterReturnVariance:Basket",
            "Equity:Option:ParameterReturnVariance:SingleIndex",
            "Equity:Option:ParameterReturnVariance:SingleName",
            "Equity:Option:ParameterReturnVolatility:Basket",
            "Equity:Option:ParameterReturnVolatility:SingleIndex",
            "Equity:Option:ParameterReturnVolatility:SingleName",
            "Equity:Option:PriceReturnBasicPerformance:Basket",
            "Equity:Option:PriceReturnBasicPerformance:SingleIndex",
            "Equity:Option:PriceReturnBasicPerformance:SingleName",
            "Equity:Other",
            "Equity:PortfolioSwap:PriceReturnBasicPerformance:Basket",
            "Equity:PortfolioSwap:PriceReturnBasicPerformance:SingleIndex",
            "Equity:PortfolioSwap:PriceReturnBasicPerformance:SingleName",
            "Equity:Swap:ParameterReturnDividend:Basket",
            "Equity:Swap:ParameterReturnDividend:SingleIndex",
            "Equity:Swap:ParameterReturnDividend:SingleName",
            "Equity:Swap:ParameterReturnVariance:Basket",
            "Equity:Swap:ParameterReturnVariance:SingleIndex",
            "Equity:Swap:ParameterReturnVariance:SingleName",
            "Equity:Swap:ParameterReturnVolatility:Basket",
            "Equity:Swap:ParameterReturnVolatility:SingleIndex",
            "Equity:Swap:ParameterReturnVolatility:SingleName",
            "Equity:Swap:PriceReturnBasicPerformance:Basket",
            "Equity:Swap:PriceReturnBasicPerformance:SingleIndex",
            "Equity:Swap:PriceReturnBasicPerformance:SingleName",
            "ForeignExchange:ComplexExotic",
            "ForeignExchange:Forward",
            "ForeignExchange:NDF",
            "ForeignExchange:NDO",
            "ForeignExchange:SimpleExotic:Barrier",
            "ForeignExchange:SimpleExotic:Digital",
            "ForeignExchange:Spot",
            "ForeignExchange:VanillaOption",
            "InterestRate:CapFloor",
            "InterestRate:CrossCurrency:Basis",
            "InterestRate:CrossCurrency:FixedFixed",
            "InterestRate:CrossCurrency:FixedFloat",
            "InterestRate:Exotic",
            "InterestRate:FRA",
            "InterestRate:IRSwap:Basis",
            "InterestRate:IRSwap:FixedFixed",
            "InterestRate:IRSwap:FixedFloat",
            "InterestRate:IRSwap:Inflation",
            "InterestRate:IRSwap:OIS",
            "InterestRate:Option:DebtOption",
            "InterestRate:Option:Swaption",
            //Added to meet deficiencies.
            "ForeignExchange:Swap",
            "InterestRate:Debt:Government:Fixed:Bullet",
            "InterestRate:Debt:Government:Float:Bullet",
            "Inflation:Debt:Government:Fixed:Ammortising",
            "Inflation:Debt:Government:Float:Ammortising",
            "InterestRate:TermDeposit",
            "Cash:Payment",
            "Credit:Debt:ABS:CDSonCDO",
            "Credit:Debt:ABS:CMBS",
            "Credit:Debt:ABS:EuropeanCMBS",
            "Credit:Debt:ABS:EuropeanRMBS",
            "Credit:Debt:ABS:RMBS",
            "Equity:OrdinaryShares",
            "Equity:Forward:Physical",
            "Property:Residential",
            "ExchangeTraded:Future",
            null // (nn) _LAST_
        };

        public static string GetEnumString(ProductTaxonomyEnum id) { return EnumStrings[(int)id]; }

        public static bool TryParseEnumString(string idString, out ProductTaxonomyEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (ProductTaxonomyEnum tempId in Enum.GetValues(typeof(ProductTaxonomyEnum)))
            {
                if (String.Compare(idString, EnumStrings[(int)tempId], StringComparison.OrdinalIgnoreCase) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = ProductTaxonomyEnum.Undefined;
            return false;
        }
        public static ProductTaxonomyEnum ParseEnumString(string idString)
        {
            ProductTaxonomyEnum result;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to ProductTaxonomyEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "ProductTaxonomy"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            var result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "ProductTaxonomy");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new ProductTaxonomyValue(dataRow); }

        public string GetFpMLSource() { return "product-taxonomy-1-0"; }

        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(ProductTaxonomyValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(ProductTaxonomyValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                var newValues = new ProductTaxonomyValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (ProductTaxonomyValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("ProductTypeSimpleScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- ProductTypeSimple ----------------------------------------
    public enum ProductTypeSimpleEnum
    {
        Undefined,
        InterestRateSwap, // (1) "InterestRateSwap"
        AssetSwap, // (2) "AssetSwap"
        InflationSwap, // (3) "InflationSwap"
        CrossCurrencySwap, // (4) "CrossCurrencySwap"
        CreditDefaultSwap, // (5) "CreditDefaultSwap"
        TotalReturnSwap, // (6) "TotalReturnSwap"
        VarianceSwap, // (7) "VarianceSwap"
        CapFloor, // (8) "CapFloor"
        FRA, // (9) "FRA"
        FxForward, // (10) "FxForward"
        FxSwap, // (11) "FxSwap"
        EquityOption, // (12) "EquityOption"
        BondOption, // (13) "BondOption"
        FxOption, // (14) "FxOption"
        FxSpot, // (15) "FxSpot"
        FxOptionStrategy, // (16) "FxOptionStrategy"
        BulletPayment, // (17) "BulletPayment"
        CreditDefaultIndex, // (18) "CreditDefaultIndex"
        CreditDefaultIndexTranche, // (19) "CreditDefaultIndexTranche"
        CreditDefaultBasket, // (20) "CreditDefaultBasket"
        CreditDefaultBasketTranche, // (21) "CreditDefaultBasketTranche"
        CreditDefaultOption, // (22) "CreditDefaultOption"
        EquityForward, // (23) "EquityForward"
        InterestRateSwaption, // (24) "InterestRateSwaption"
        TermDeposit, // (25) "TermDeposit"
        DividendSwap, // (26) "DividendSwap"
        ConvertibleBondOption, // (27) "ConvertibleBondOption"
        BondTransaction, // (28) "BondTransaction"
        EquityTransaction, // (29) "EquityTransaction"
        PropertyTransaction, // (30) "PropertyTransaction"
        FutureTransaction, // (31) "FutureTransaction"
        CommodityForward, // (32) "CommodityForward"
        LeaseTransaction, // (33) "LeaseTransaction"
        _LAST_
    }
    public partial class ProductTypeSimpleValue : IFpMLCodeValue
    {
        public ProductTypeSimpleValue()
        { }
        public ProductTypeSimpleValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class ProductTypeSimpleScheme : IFpMLCodeScheme
    {
        private static readonly string[] EnumStrings = 
        {
            null, // (0) Undefined
            "InterestRateSwap", // (1) InterestRateSwap
            "AssetSwap", // (2) AssetSwap
            "InflationSwap", // (3) InflationSwap
            "CrossCurrencySwap", // (4) CrossCurrencySwap
            "CreditDefaultSwap", // (5) CreditDefaultSwap
            "TotalReturnSwap", // (6) TotalReturnSwap
            "VarianceSwap", // (7) VarianceSwap
            "CapFloor", // (8) CapFloor
            "FRA", // (9) FRA
            "FxForward", // (10) FxForward
            "FxSwap", // (11) FxSwap
            "EquityOption", // (12) EquityOption
            "BondOption", // (13) BondOption
            "FxOption", // (14) FxOption
            "FxSpot", // (15) FxSpot
            "FxOptionStrategy", // (16) FxOptionStrategy
            "BulletPayment", // (17) BulletPayment
            "CreditDefaultIndex", // (18) CreditDefaultIndex
            "CreditDefaultIndexTranche", // (19) CreditDefaultIndexTranche
            "CreditDefaultBasket", // (20) CreditDefaultBasket
            "CreditDefaultBasketTranche", // (21) CreditDefaultBasketTranche
            "CreditDefaultOption", // (22) CreditDefaultOption
            "EquityForward", // (23) EquityForward
            "InterestRateSwaption", // (24) InterestRateSwaption
            "TermDeposit", // (25) TermDeposit
            "DividendSwap", // (26) DividendSwap
            "ConvertibleBondOption", // (27) ConvertibleBondOption
            "BondTransaction", // (28) BondTransaction
            "EquityTransaction", // (29) EquityTransaction
            "PropertyTransaction", // (30) "PropertyTransaction"
            "FutureTransaction", //(31) FutureTransaction
            "CommodityForward", // (32) "CommodityForward"
            null // (nn) _LAST_
        };
        public static string GetEnumString(ProductTypeSimpleEnum id) { return EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out ProductTypeSimpleEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (ProductTypeSimpleEnum tempId in Enum.GetValues(typeof(ProductTypeSimpleEnum)))
            {
                if (String.Compare(idString, EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = ProductTypeSimpleEnum.Undefined;
            return false;
        }

        public static ProductTypeSimpleEnum ParseEnumString(string idString)
        {
            var result = ProductTypeSimpleEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to ProductTypeSimpleEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "ProductTypeSimple"
            + ((suffix == null) ? null : ("." + suffix));
        }

        public NamedValueSet GetItemProps()
        {
            var result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "ProductTypeSimple");
            return result;
        }

        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new ProductTypeSimpleValue(dataRow); }

        public string GetFpMLSource() { return "product-type-simple-1-2"; }

        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(ProductTypeSimpleValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(ProductTypeSimpleValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                var newValues = new ProductTypeSimpleValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (ProductTypeSimpleValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("ProductTypeSimpleScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- QueryParameterOperator ----------------------------------------
    public enum QueryParameterOperatorEnum
    {
        Undefined,
        Equals, // (1) "Equals"
        NotEquals, // (2) "NotEquals"
        LessThan, // (3) "LessThan"
        GreaterThan, // (4) "GreaterThan"
        _LAST_
    }
    public partial class QueryParameterOperatorValue : IFpMLCodeValue
    {
        public QueryParameterOperatorValue()
        { }
        public QueryParameterOperatorValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class QueryParameterOperatorScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Equals", // (1) Equals
            "NotEquals", // (2) NotEquals
            "LessThan", // (3) LessThan
            "GreaterThan", // (4) GreaterThan
            null // (nn) _LAST_
        };
        public static string GetEnumString(QueryParameterOperatorEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out QueryParameterOperatorEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (QueryParameterOperatorEnum tempId in Enum.GetValues(typeof(QueryParameterOperatorEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = QueryParameterOperatorEnum.Undefined;
            return false;
        }
        public static QueryParameterOperatorEnum ParseEnumString(string idString)
        {
            QueryParameterOperatorEnum result = QueryParameterOperatorEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to QueryParameterOperatorEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "QueryParameterOperator"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "QueryParameterOperator");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new QueryParameterOperatorValue(dataRow); }
        public string GetFpMLSource() { return "query-parameter-operator-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(QueryParameterOperatorValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(QueryParameterOperatorValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                QueryParameterOperatorValue[] newValues = new QueryParameterOperatorValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (QueryParameterOperatorValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("QueryParameterOperatorScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- QuoteTiming ----------------------------------------
    public enum QuoteTimingEnum
    {
        Undefined,
        Open, // (1) "Open"
        Close, // (2) "Close"
        High, // (3) "High"
        Low, // (4) "Low"
        _LAST_
    }
    public partial class QuoteTimingValue : IFpMLCodeValue
    {
        public QuoteTimingValue()
        { }
        public QuoteTimingValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class QuoteTimingScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Open", // (1) Open
            "Close", // (2) Close
            "High", // (3) High
            "Low", // (4) Low
            null // (nn) _LAST_
        };
        public static string GetEnumString(QuoteTimingEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out QuoteTimingEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (QuoteTimingEnum tempId in Enum.GetValues(typeof(QuoteTimingEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = QuoteTimingEnum.Undefined;
            return false;
        }
        public static QuoteTimingEnum ParseEnumString(string idString)
        {
            QuoteTimingEnum result = QuoteTimingEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to QuoteTimingEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "QuoteTiming"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "QuoteTiming");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new QuoteTimingValue(dataRow); }
        public string GetFpMLSource() { return "quote-timing-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(QuoteTimingValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(QuoteTimingValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                QuoteTimingValue[] newValues = new QuoteTimingValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (QuoteTimingValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("QuoteTimingScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- ReasonCode ----------------------------------------
    public enum ReasonCodeEnum
    {
        Undefined,
        _100, // (1) "100"
        _101, // (2) "101"
        _102, // (3) "102"
        _103, // (4) "103"
        _104, // (5) "104"
        _105, // (6) "105"
        _106, // (7) "106"
        _110, // (8) "110"
        _111, // (9) "111"
        _200, // (10) "200"
        _201, // (11) "201"
        _202, // (12) "202"
        _203, // (13) "203"
        _204, // (14) "204"
        _210, // (15) "210"
        _211, // (16) "211"
        _300, // (17) "300"
        _301, // (18) "301"
        _302, // (19) "302"
        _303, // (20) "303"
        _304, // (21) "304"
        _305, // (22) "305"
        _306, // (23) "306"
        _307, // (24) "307"
        _308, // (25) "308"
        _310, // (26) "310"
        _311, // (27) "311"
        _400, // (28) "400"
        _401, // (29) "401"
        _402, // (30) "402"
        _403, // (31) "403"
        _404, // (32) "404"
        _410, // (33) "410"
        _411, // (34) "411"
        _LAST_
    }
    public partial class ReasonCodeValue : IFpMLCodeValue
    {
        public ReasonCodeValue()
        { }
        public ReasonCodeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class ReasonCodeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "100", // (1) _100
            "101", // (2) _101
            "102", // (3) _102
            "103", // (4) _103
            "104", // (5) _104
            "105", // (6) _105
            "106", // (7) _106
            "110", // (8) _110
            "111", // (9) _111
            "200", // (10) _200
            "201", // (11) _201
            "202", // (12) _202
            "203", // (13) _203
            "204", // (14) _204
            "210", // (15) _210
            "211", // (16) _211
            "300", // (17) _300
            "301", // (18) _301
            "302", // (19) _302
            "303", // (20) _303
            "304", // (21) _304
            "305", // (22) _305
            "306", // (23) _306
            "307", // (24) _307
            "308", // (25) _308
            "310", // (26) _310
            "311", // (27) _311
            "400", // (28) _400
            "401", // (29) _401
            "402", // (30) _402
            "403", // (31) _403
            "404", // (32) _404
            "410", // (33) _410
            "411", // (34) _411
            null // (nn) _LAST_
        };
        public static string GetEnumString(ReasonCodeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out ReasonCodeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (ReasonCodeEnum tempId in Enum.GetValues(typeof(ReasonCodeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = ReasonCodeEnum.Undefined;
            return false;
        }
        public static ReasonCodeEnum ParseEnumString(string idString)
        {
            ReasonCodeEnum result = ReasonCodeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to ReasonCodeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "ReasonCode"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "ReasonCode");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new ReasonCodeValue(dataRow); }
        public string GetFpMLSource() { return "reason-code-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(ReasonCodeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(ReasonCodeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                ReasonCodeValue[] newValues = new ReasonCodeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (ReasonCodeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("ReasonCodeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- Restructuring ----------------------------------------
    public enum RestructuringEnum
    {
        Undefined,
        R, // (1) "R"
        ModR, // (2) "ModR"
        ModModR, // (3) "ModModR"
        _LAST_
    }
    public partial class RestructuringValue : IFpMLCodeValue
    {
        public RestructuringValue()
        { }
        public RestructuringValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class RestructuringScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "R", // (1) R
            "ModR", // (2) ModR
            "ModModR", // (3) ModModR
            null // (nn) _LAST_
        };
        public static string GetEnumString(RestructuringEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out RestructuringEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (RestructuringEnum tempId in Enum.GetValues(typeof(RestructuringEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = RestructuringEnum.Undefined;
            return false;
        }
        public static RestructuringEnum ParseEnumString(string idString)
        {
            RestructuringEnum result = RestructuringEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to RestructuringEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "Restructuring"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "Restructuring");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new RestructuringValue(dataRow); }
        public string GetFpMLSource() { return "restructuring-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(RestructuringValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(RestructuringValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                RestructuringValue[] newValues = new RestructuringValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (RestructuringValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("RestructuringScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- ScheduledDateType ----------------------------------------
    public enum ScheduledDateTypeEnum
    {
        Undefined,
        Effective, // (1) "Effective"
        Termination, // (2) "Termination"
        FirstPayment, // (3) "FirstPayment"
        PreviousPayment, // (4) "PreviousPayment"
        NextPayment, // (5) "NextPayment"
        FinalPayment, // (6) "FinalPayment"
        PreviousReset, // (7) "PreviousReset"
        NextReset, // (8) "NextReset"
        AccrualStart, // (9) "AccrualStart"
        _LAST_
    }
    public partial class ScheduledDateTypeValue : IFpMLCodeValue
    {
        public ScheduledDateTypeValue()
        { }
        public ScheduledDateTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class ScheduledDateTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Effective", // (1) Effective
            "Termination", // (2) Termination
            "FirstPayment", // (3) FirstPayment
            "PreviousPayment", // (4) PreviousPayment
            "NextPayment", // (5) NextPayment
            "FinalPayment", // (6) FinalPayment
            "PreviousReset", // (7) PreviousReset
            "NextReset", // (8) NextReset
            "AccrualStart", // (9) AccrualStart
            null // (nn) _LAST_
        };
        public static string GetEnumString(ScheduledDateTypeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out ScheduledDateTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (ScheduledDateTypeEnum tempId in Enum.GetValues(typeof(ScheduledDateTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = ScheduledDateTypeEnum.Undefined;
            return false;
        }
        public static ScheduledDateTypeEnum ParseEnumString(string idString)
        {
            ScheduledDateTypeEnum result = ScheduledDateTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to ScheduledDateTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "ScheduledDateType"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "ScheduledDateType");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new ScheduledDateTypeValue(dataRow); }
        public string GetFpMLSource() { return "scheduled-date-type-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(ScheduledDateTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(ScheduledDateTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                ScheduledDateTypeValue[] newValues = new ScheduledDateTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (ScheduledDateTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("ScheduledDateTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- SettledEntityMatrixSource ----------------------------------------
    public enum SettledEntityMatrixSourceEnum
    {
        Undefined,
        Publisher, // (1) "Publisher"
        ConfirmationAnnex, // (2) "ConfirmationAnnex"
        NotApplicable, // (3) "NotApplicable"
        _LAST_
    }
    public partial class SettledEntityMatrixSourceValue : IFpMLCodeValue
    {
        public SettledEntityMatrixSourceValue()
        { }
        public SettledEntityMatrixSourceValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class SettledEntityMatrixSourceScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Publisher", // (1) Publisher
            "ConfirmationAnnex", // (2) ConfirmationAnnex
            "NotApplicable", // (3) NotApplicable
            null // (nn) _LAST_
        };
        public static string GetEnumString(SettledEntityMatrixSourceEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out SettledEntityMatrixSourceEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (SettledEntityMatrixSourceEnum tempId in Enum.GetValues(typeof(SettledEntityMatrixSourceEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = SettledEntityMatrixSourceEnum.Undefined;
            return false;
        }
        public static SettledEntityMatrixSourceEnum ParseEnumString(string idString)
        {
            SettledEntityMatrixSourceEnum result = SettledEntityMatrixSourceEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to SettledEntityMatrixSourceEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "SettledEntityMatrixSource"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "SettledEntityMatrixSource");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new SettledEntityMatrixSourceValue(dataRow); }
        public string GetFpMLSource() { return "settled-entity-matrix-source-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(SettledEntityMatrixSourceValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(SettledEntityMatrixSourceValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                SettledEntityMatrixSourceValue[] newValues = new SettledEntityMatrixSourceValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (SettledEntityMatrixSourceValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("SettledEntityMatrixSourceScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- SettlementMethod ----------------------------------------
    public enum SettlementMethodEnum
    {
        Undefined,
        Chaps, // (1) "Chaps"
        ChipsABA, // (2) "ChipsABA"
        ChipsUID, // (3) "ChipsUID"
        CLS, // (4) "CLS"
        Fedwire, // (5) "Fedwire"
        SWIFT, // (6) "SWIFT"
        DDA, // (7) "DDA"
        _LAST_
    }
    public partial class SettlementMethodValue : IFpMLCodeValue
    {
        public SettlementMethodValue()
        { }
        public SettlementMethodValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class SettlementMethodScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Chaps", // (1) Chaps
            "ChipsABA", // (2) ChipsABA
            "ChipsUID", // (3) ChipsUID
            "CLS", // (4) CLS
            "Fedwire", // (5) Fedwire
            "SWIFT", // (6) SWIFT
            "DDA", // (7) DDA
            null // (nn) _LAST_
        };
        public static string GetEnumString(SettlementMethodEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out SettlementMethodEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (SettlementMethodEnum tempId in Enum.GetValues(typeof(SettlementMethodEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = SettlementMethodEnum.Undefined;
            return false;
        }
        public static SettlementMethodEnum ParseEnumString(string idString)
        {
            SettlementMethodEnum result = SettlementMethodEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to SettlementMethodEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "SettlementMethod"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "SettlementMethod");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new SettlementMethodValue(dataRow); }
        public string GetFpMLSource() { return "settlement-method-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(SettlementMethodValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(SettlementMethodValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                SettlementMethodValue[] newValues = new SettlementMethodValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (SettlementMethodValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("SettlementMethodScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- SettlementPriceSource ----------------------------------------
    public enum SettlementPriceSourceEnum
    {
        Undefined,
        Bid, // (1) "Bid"
        Offer, // (2) "Offer"
        Mid, // (3) "Mid"
        NASDAQ, // (4) "NASDAQ"
        OfficialClose, // (5) "OfficialClose"
        OfficialSettlement, // (6) "OfficialSettlement"
        PrezzoDiRiferimento, // (7) "PrezzoDiRiferimento"
        _LAST_
    }
    public partial class SettlementPriceSourceValue : IFpMLCodeValue
    {
        public SettlementPriceSourceValue()
        { }
        public SettlementPriceSourceValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class SettlementPriceSourceScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Bid", // (1) Bid
            "Offer", // (2) Offer
            "Mid", // (3) Mid
            "NASDAQ", // (4) NASDAQ
            "OfficialClose", // (5) OfficialClose
            "OfficialSettlement", // (6) OfficialSettlement
            "PrezzoDiRiferimento", // (7) PrezzoDiRiferimento
            null // (nn) _LAST_
        };
        public static string GetEnumString(SettlementPriceSourceEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out SettlementPriceSourceEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (SettlementPriceSourceEnum tempId in Enum.GetValues(typeof(SettlementPriceSourceEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = SettlementPriceSourceEnum.Undefined;
            return false;
        }
        public static SettlementPriceSourceEnum ParseEnumString(string idString)
        {
            SettlementPriceSourceEnum result = SettlementPriceSourceEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to SettlementPriceSourceEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "SettlementPriceSource"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "SettlementPriceSource");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new SettlementPriceSourceValue(dataRow); }
        public string GetFpMLSource() { return "settlement-price-source-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(SettlementPriceSourceValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(SettlementPriceSourceValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                SettlementPriceSourceValue[] newValues = new SettlementPriceSourceValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (SettlementPriceSourceValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("SettlementPriceSourceScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- SettlementRateOption ----------------------------------------
    public enum SettlementRateOptionEnum
    {
        Undefined,
        CNY_SAEC_CNY01, // (1) "CNY.SAEC/CNY01"
        INR_RBIB_INR01, // (2) "INR.RBIB/INR01"
        KRW_KEBEY_KRW01, // (3) "KRW.KEBEY/KRW01"
        KRW_KFTC18_KRW02, // (4) "KRW.KFTC18/KRW02"
        KRW_TELERATE_45644_KRW03, // (5) "KRW.TELERATE.45644/KRW03"
        PKR_SBPK_PKR01, // (6) "PKR.SBPK/PKR01"
        PHP_PHPESO_PHP01, // (7) "PHP.PHPESO/PHP01"
        PHP_TELERATE_2920_PHP02, // (8) "PHP.TELERATE.2920/PHP02"
        PHP_TELERATE_15439_PHP03, // (9) "PHP.TELERATE.15439/PHP03"
        TWD_TELERATE_6161_TWD01, // (10) "TWD.TELERATE.6161/TWD01"
        TWD_TFEMA_TWD02, // (11) "TWD.TFEMA/TWD02"
        TWD_TPFL_TWD03, // (12) "TWD.TPFL/TWD03"
        PLZ_NBPQ_PLZ01, // (13) "PLZ.NBPQ/PLZ01"
        PLZ_NBPR_PLZ02, // (14) "PLZ.NBPR/PLZ02"
        RUB_MICEXFRX_RUB01, // (15) "RUB.MICEXFRX/RUB01"
        RUB_MMVB_RUB02, // (16) "RUB.MMVB/RUB02"
        SKK_NBSB_SKK01, // (17) "SKK.NBSB/SKK01"
        UAH_UICEI_UAH01, // (18) "UAH.UICEI/UAH01"
        ARS_BNAR_ARS01, // (19) "ARS.BNAR/ARS01"
        ARS_OFFICIAL_RATE_ARS02, // (20) "ARS.OFFICIAL.RATE/ARS02"
        BRL_BRBY_BRL01, // (21) "BRL.BRBY/BRL01"
        BRL_OFFICIAL_RATE_BRL02, // (22) "BRL.OFFICIAL.RATE/BRL02"
        BRL_PCOT_COMMERCIAL_BRL03, // (23) "BRL.PCOT-COMMERCIAL/BRL03"
        BRL_PCOT_FLOATING_BRL04, // (24) "BRL.PCOT-FLOATING/BRL04"
        BRL_PTAX_COMMERCIAL_BRL05, // (25) "BRL.PTAX-COMMERCIAL/BRL05"
        BRL_PTAX_COMMERCIAL_BRFR_BRL06, // (26) "BRL.PTAX-COMMERCIAL.BRFR/BRL06"
        BRL_PTAX_FLOATING_BRL07, // (27) "BRL.PTAX-FLOATING/BRL07"
        BRL_PTAX_FLOATING_BRFR_BRL08, // (28) "BRL.PTAX-FLOATING.BRFR/BRL08"
        CLP_BCCH_CLP01, // (29) "CLP.BCCH/CLP01"
        CLP_CHILD_INFORMAL_CLP02, // (30) "CLP.CHILD-INFORMAL/CLP02"
        CLP_CHILD_INTERBANK_CLP03, // (31) "CLP.CHILD-INTERBANK/CLP03"
        CLP_CHILD_OBSERVADO_CLP04, // (32) "CLP.CHILD-OBSERVADO/CLP04"
        CLP_CHILG_INFORMAL_CLP05, // (33) "CLP.CHILG-INFORMAL/CLP05"
        CLP_CHILG_INTERBANK_CLP06, // (34) "CLP.CHILG-INTERBANK/CLP06"
        CLP_CHILG_OBSERVADO_CLP07, // (35) "CLP.CHILG-OBSERVADO/CLP07"
        CLP_OFFICIAL_RATE_CLP08, // (36) "CLP.OFFICIAL.RATE/CLP08"
        CLP_TELERATE_38942_CLP09, // (37) "CLP.TELERATE.38942/CLP09"
        COP_CO_COL03_COP01, // (38) "COP.CO/COL03/COP01"
        COP_TCRM_COP02, // (39) "COP.TCRM/COP02"
        ECS_DNRP_ECS01, // (40) "ECS.DNRP/ECS01"
        MXP_BNMX_MXP01, // (41) "MXP.BNMX/MXP01"
        MXP_FIXING_RATE_MXP02, // (42) "MXP.FIXING.RATE/MXP02"
        MXP_MEX01_MXP03, // (43) "MXP.MEX01/MXP03"
        MXP_PUBLISHED_MXP04, // (44) "MXP.PUBLISHED/MXP04"
        PEN_PDSB_PEN01, // (45) "PEN.PDSB/PEN01"
        VER_VBCV_VEB01, // (46) "VER.VBCV/VEB01"
        ILS_BOIJ_ILS01, // (47) "ILS.BOIJ/ILS01"
        ILS_FXIL_ILS02, // (48) "ILS.FXIL/ILS02"
        LBP_BDLX_LBP01, // (49) "LBP.BDLX/LBP01"
        MAD_OFFICIAL_RATE_MAD01, // (50) "MAD.OFFICIAL.RATE/MAD01"
        CURRENCY_IMPLIED_RATE__ADR__CURA1, // (51) "CURRENCY-IMPLIED.RATE.(ADR)/CURA1"
        CURRENCY_IMPLIED_RATE__LOCAL_ASSET__CURA2, // (52) "CURRENCY-IMPLIED.RATE.(LOCAL.ASSET)/CURA2"
        CURRENCY_MUTUAL_AGREEMENT_CURA3, // (53) "CURRENCY-MUTUAL.AGREEMENT/CURA3"
        CURRENCY_REFERENCE_DEALERS_CURA4, // (54) "CURRENCY-REFERENCE.DEALERS/CURA4"
        CURRENCY_WHOLESALE_MARKET_CURA5, // (55) "CURRENCY-WHOLESALE.MARKET/CURA5"
        MYR_ABS_MYR01, // (56) "MYR.ABS/MYR01"
        IDR_ABS_IDR01, // (57) "IDR.ABS/IDR01"
        THB_ABS_THB01, // (58) "THB.ABS/THB01"
        BRL_PTAX_BRL09, // (59) "BRL.PTAX/BRL09"
        _LAST_
    }
    public partial class SettlementRateOptionValue : IFpMLCodeValue
    {
        public SettlementRateOptionValue()
        { }
        public SettlementRateOptionValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class SettlementRateOptionScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "CNY.SAEC/CNY01", // (1) CNY_SAEC_CNY01
            "INR.RBIB/INR01", // (2) INR_RBIB_INR01
            "KRW.KEBEY/KRW01", // (3) KRW_KEBEY_KRW01
            "KRW.KFTC18/KRW02", // (4) KRW_KFTC18_KRW02
            "KRW.TELERATE.45644/KRW03", // (5) KRW_TELERATE_45644_KRW03
            "PKR.SBPK/PKR01", // (6) PKR_SBPK_PKR01
            "PHP.PHPESO/PHP01", // (7) PHP_PHPESO_PHP01
            "PHP.TELERATE.2920/PHP02", // (8) PHP_TELERATE_2920_PHP02
            "PHP.TELERATE.15439/PHP03", // (9) PHP_TELERATE_15439_PHP03
            "TWD.TELERATE.6161/TWD01", // (10) TWD_TELERATE_6161_TWD01
            "TWD.TFEMA/TWD02", // (11) TWD_TFEMA_TWD02
            "TWD.TPFL/TWD03", // (12) TWD_TPFL_TWD03
            "PLZ.NBPQ/PLZ01", // (13) PLZ_NBPQ_PLZ01
            "PLZ.NBPR/PLZ02", // (14) PLZ_NBPR_PLZ02
            "RUB.MICEXFRX/RUB01", // (15) RUB_MICEXFRX_RUB01
            "RUB.MMVB/RUB02", // (16) RUB_MMVB_RUB02
            "SKK.NBSB/SKK01", // (17) SKK_NBSB_SKK01
            "UAH.UICEI/UAH01", // (18) UAH_UICEI_UAH01
            "ARS.BNAR/ARS01", // (19) ARS_BNAR_ARS01
            "ARS.OFFICIAL.RATE/ARS02", // (20) ARS_OFFICIAL_RATE_ARS02
            "BRL.BRBY/BRL01", // (21) BRL_BRBY_BRL01
            "BRL.OFFICIAL.RATE/BRL02", // (22) BRL_OFFICIAL_RATE_BRL02
            "BRL.PCOT-COMMERCIAL/BRL03", // (23) BRL_PCOT_COMMERCIAL_BRL03
            "BRL.PCOT-FLOATING/BRL04", // (24) BRL_PCOT_FLOATING_BRL04
            "BRL.PTAX-COMMERCIAL/BRL05", // (25) BRL_PTAX_COMMERCIAL_BRL05
            "BRL.PTAX-COMMERCIAL.BRFR/BRL06", // (26) BRL_PTAX_COMMERCIAL_BRFR_BRL06
            "BRL.PTAX-FLOATING/BRL07", // (27) BRL_PTAX_FLOATING_BRL07
            "BRL.PTAX-FLOATING.BRFR/BRL08", // (28) BRL_PTAX_FLOATING_BRFR_BRL08
            "CLP.BCCH/CLP01", // (29) CLP_BCCH_CLP01
            "CLP.CHILD-INFORMAL/CLP02", // (30) CLP_CHILD_INFORMAL_CLP02
            "CLP.CHILD-INTERBANK/CLP03", // (31) CLP_CHILD_INTERBANK_CLP03
            "CLP.CHILD-OBSERVADO/CLP04", // (32) CLP_CHILD_OBSERVADO_CLP04
            "CLP.CHILG-INFORMAL/CLP05", // (33) CLP_CHILG_INFORMAL_CLP05
            "CLP.CHILG-INTERBANK/CLP06", // (34) CLP_CHILG_INTERBANK_CLP06
            "CLP.CHILG-OBSERVADO/CLP07", // (35) CLP_CHILG_OBSERVADO_CLP07
            "CLP.OFFICIAL.RATE/CLP08", // (36) CLP_OFFICIAL_RATE_CLP08
            "CLP.TELERATE.38942/CLP09", // (37) CLP_TELERATE_38942_CLP09
            "COP.CO/COL03/COP01", // (38) COP_CO_COL03_COP01
            "COP.TCRM/COP02", // (39) COP_TCRM_COP02
            "ECS.DNRP/ECS01", // (40) ECS_DNRP_ECS01
            "MXP.BNMX/MXP01", // (41) MXP_BNMX_MXP01
            "MXP.FIXING.RATE/MXP02", // (42) MXP_FIXING_RATE_MXP02
            "MXP.MEX01/MXP03", // (43) MXP_MEX01_MXP03
            "MXP.PUBLISHED/MXP04", // (44) MXP_PUBLISHED_MXP04
            "PEN.PDSB/PEN01", // (45) PEN_PDSB_PEN01
            "VER.VBCV/VEB01", // (46) VER_VBCV_VEB01
            "ILS.BOIJ/ILS01", // (47) ILS_BOIJ_ILS01
            "ILS.FXIL/ILS02", // (48) ILS_FXIL_ILS02
            "LBP.BDLX/LBP01", // (49) LBP_BDLX_LBP01
            "MAD.OFFICIAL.RATE/MAD01", // (50) MAD_OFFICIAL_RATE_MAD01
            "CURRENCY-IMPLIED.RATE.(ADR)/CURA1", // (51) CURRENCY_IMPLIED_RATE__ADR__CURA1
            "CURRENCY-IMPLIED.RATE.(LOCAL.ASSET)/CURA2", // (52) CURRENCY_IMPLIED_RATE__LOCAL_ASSET__CURA2
            "CURRENCY-MUTUAL.AGREEMENT/CURA3", // (53) CURRENCY_MUTUAL_AGREEMENT_CURA3
            "CURRENCY-REFERENCE.DEALERS/CURA4", // (54) CURRENCY_REFERENCE_DEALERS_CURA4
            "CURRENCY-WHOLESALE.MARKET/CURA5", // (55) CURRENCY_WHOLESALE_MARKET_CURA5
            "MYR.ABS/MYR01", // (56) MYR_ABS_MYR01
            "IDR.ABS/IDR01", // (57) IDR_ABS_IDR01
            "THB.ABS/THB01", // (58) THB_ABS_THB01
            "BRL.PTAX/BRL09", // (59) BRL_PTAX_BRL09
            null // (nn) _LAST_
        };
        public static string GetEnumString(SettlementRateOptionEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out SettlementRateOptionEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (SettlementRateOptionEnum tempId in Enum.GetValues(typeof(SettlementRateOptionEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = SettlementRateOptionEnum.Undefined;
            return false;
        }
        public static SettlementRateOptionEnum ParseEnumString(string idString)
        {
            SettlementRateOptionEnum result = SettlementRateOptionEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to SettlementRateOptionEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "SettlementRateOption"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "SettlementRateOption");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new SettlementRateOptionValue(dataRow); }
        public string GetFpMLSource() { return "settlement-rate-option-2-1"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(SettlementRateOptionValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(SettlementRateOptionValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                var newValues = new SettlementRateOptionValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (SettlementRateOptionValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("SettlementRateOptionScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- SpreadScheduleType ----------------------------------------
    public enum SpreadScheduleTypeEnum
    {
        Undefined,
        Long, // (1) "Long"
        Short, // (2) "Short"
        _LAST_
    }
    public partial class SpreadScheduleTypeValue : IFpMLCodeValue
    {
        public SpreadScheduleTypeValue()
        { }
        public SpreadScheduleTypeValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class SpreadScheduleTypeScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Long", // (1) Long
            "Short", // (2) Short
            null // (nn) _LAST_
        };
        public static string GetEnumString(SpreadScheduleTypeEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out SpreadScheduleTypeEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (SpreadScheduleTypeEnum tempId in Enum.GetValues(typeof(SpreadScheduleTypeEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = SpreadScheduleTypeEnum.Undefined;
            return false;
        }
        public static SpreadScheduleTypeEnum ParseEnumString(string idString)
        {
            var result = SpreadScheduleTypeEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to SpreadScheduleTypeEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "SpreadScheduleType"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            var result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "SpreadScheduleType");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new SpreadScheduleTypeValue(dataRow); }
        public string GetFpMLSource() { return "spread-schedule-type-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(SpreadScheduleTypeValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(SpreadScheduleTypeValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                var newValues = new SpreadScheduleTypeValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (SpreadScheduleTypeValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("SpreadScheduleTypeScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }

    // ---------------------------------------- TradeCashflowsStatus ----------------------------------------
    public enum TradeCashflowsStatusEnum
    {
        Undefined,
        Alleged, // (1) "Alleged"
        Matched, // (2) "Matched"
        Mismatched, // (3) "Mismatched"
        Unmatched, // (4) "Unmatched"
        _LAST_
    }
    public partial class TradeCashflowsStatusValue : IFpMLCodeValue
    {
        public TradeCashflowsStatusValue()
        { }
        public TradeCashflowsStatusValue(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                if ((dataRow.Value.Length > 0) && (dataRow.Value[0] != null))
                    Code = dataRow.Value[0].SimpleValue.Value;
                if ((dataRow.Value.Length > 1) && (dataRow.Value[1] != null))
                    Source = dataRow.Value[1].SimpleValue.Value;
                if ((dataRow.Value.Length > 2) && (dataRow.Value[2] != null))
                    Description = dataRow.Value[2].SimpleValue.Value;
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class TradeCashflowsStatusScheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            "Alleged", // (1) Alleged
            "Matched", // (2) Matched
            "Mismatched", // (3) Mismatched
            "Unmatched", // (4) Unmatched
            null // (nn) _LAST_
        };
        public static string GetEnumString(TradeCashflowsStatusEnum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out TradeCashflowsStatusEnum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach (TradeCashflowsStatusEnum tempId in Enum.GetValues(typeof(TradeCashflowsStatusEnum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = TradeCashflowsStatusEnum.Undefined;
            return false;
        }
        public static TradeCashflowsStatusEnum ParseEnumString(string idString)
        {
            TradeCashflowsStatusEnum result = TradeCashflowsStatusEnum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to TradeCashflowsStatusEnum", idString));
            return result;
        }

        public string GetItemName(string suffix)
        {
            return "Orion.V5r3.Configuration.FpMLCodeScheme." + "TradeCashflowsStatus"
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "TradeCashflowsStatus");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new TradeCashflowsStatusValue(dataRow); }
        public string GetFpMLSource() { return "trade-cashflows-status-1-0"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof(TradeCashflowsStatusValue))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof(TradeCashflowsStatusValue).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                TradeCashflowsStatusValue[] newValues = new TradeCashflowsStatusValue[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = (TradeCashflowsStatusValue)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("TradeCashflowsStatusScheme.AddCodeValue failed: {0}", excp));
            }
        }
    }
}
