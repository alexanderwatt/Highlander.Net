//------------------------------------------------------------------------------
//   This code was generated by {ToolTitle} Version: {ToolVersion}
//   using the template file: {TemplateFile}.
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//------------------------------------------------------------------------------
using System;
using System.Diagnostics;
using System.Collections.Generic;
using Orion.Utility.Helpers;
using Orion.Utility.NamedValues;
namespace {NameSpace}
{
    public interface IFpMLCodeValue
    {
        string GetPrimaryKey();
    }
    public interface IFpMLCodeScheme
    {
        string GetItemName(string suffix);
        NamedValueSet GetItemProps();
        IFpMLCodeValue CreateCodeValue(Row dataRow);
        string GetFpMLSource();
        void AddCodeValue(IFpMLCodeValue codeValue);
    }
    public enum FpMLCodeSchemeEnum
    {
        //##foreach:ClassDef
        {ClassDef},
        //##end
    }
    public class FpMLCodeSchemeFactory
    {
        public static IFpMLCodeScheme CreateCodeScheme(string classDefName)
        {
            switch(classDefName)
            {
			//##foreach:ClassDef
			case "{ClassDef}": return new {ClassDef}Scheme();
            //##end
            default:
                throw new ArgumentException("Unknown classDefName: " + classDefName);
            }
        }
    }
    //##foreach:ClassDef
    
    // ---------------------------------------- {ClassDef} ----------------------------------------
    public enum {ClassDef}Enum
    {
        Undefined,
        //##foreach:ValueDef
        {RowEnum}, // ({RowNum}) "{RowName}"
        //##end
        _LAST_
    }
    public partial class {ClassDef}Value : IFpMLCodeValue
    {
        public {ClassDef}Value()
        { }
        public {ClassDef}Value(Row dataRow)
        {
            if ((dataRow != null) && (dataRow.Value != null))
            {
                //##foreach:FieldDef
                if ((dataRow.Value.Length > {ColumnNum}) && (dataRow.Value[{ColumnNum}] != null))
                    {ColumnName} = dataRow.Value[{ColumnNum}].SimpleValue.Value;
                //##end
            }
        }
        public string GetPrimaryKey() { return Code; }
    }
    public partial class {ClassDef}Scheme : IFpMLCodeScheme
    {
        private static readonly string[] _EnumStrings = 
        {
            null, // (0) Undefined
            //##foreach:ValueDef
            "{RowName}", // ({RowNum}) {RowEnum}
            //##end
            null // (nn) _LAST_
        };
        public static string GetEnumString({ClassDef}Enum id) { return _EnumStrings[(int)id]; }
        public static bool TryParseEnumString(string idString, out {ClassDef}Enum id)
        {
            // note: we cannot use Enum.Parse() here, hence the loop...
            foreach({ClassDef}Enum tempId in Enum.GetValues(typeof({ClassDef}Enum)))
            {
                if (String.Compare(idString, _EnumStrings[(int)tempId], true) == 0)
                {
                    id = tempId;
                    return true;
                }
            }
            id = {ClassDef}Enum.Undefined;
            return false;
        }
        public static {ClassDef}Enum ParseEnumString(string idString)
        {
            {ClassDef}Enum result = {ClassDef}Enum.Undefined;
            if (!TryParseEnumString(idString, out result))
                throw new ArgumentException(String.Format("Cannot convert '{0}' to {ClassDef}Enum", idString));
            return result;
        }
        
        public string GetItemName(string suffix)
        {
            return "Highlander.Configuration.FpMLCodeScheme." + "{ClassDef}" 
            + ((suffix == null) ? null : ("." + suffix));
        }
        public NamedValueSet GetItemProps()
        {
            NamedValueSet result = new NamedValueSet();
            result.Set("Type", "FpMLCodeScheme");
            result.Set("FpMLCodeScheme", "{ClassDef}");
            return result;
        }
        public IFpMLCodeValue CreateCodeValue(Row dataRow) { return new {ClassDef}Value(dataRow); }
        public string GetFpMLSource() { return "{ClassDefDataFile}"; }
        public void AddCodeValue(IFpMLCodeValue codeValue)
        {
            try
            {
                if (codeValue.GetType() != typeof({ClassDef}Value))
                    throw new ApplicationException(
                        String.Format("Cannot convert type '{0}' to '{1}'!", codeValue.GetType().Name, typeof({ClassDef}Value).Name));
                int newLength = 1;
                if (schemeValuesField != null)
                    newLength = schemeValuesField.Length + 1;
                {ClassDef}Value[] newValues = new {ClassDef}Value[newLength];
                if (schemeValuesField != null)
                    schemeValuesField.CopyTo(newValues, 0);
                newValues[newLength - 1] = ({ClassDef}Value)codeValue;
                schemeValuesField = newValues;
            }
            catch (Exception excp)
            {
                Trace.WriteLine(String.Format("{ClassDef}Scheme.AddCodeValue failed: {0}", excp));
            }
        }
    }
    //##end
}
