<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2019\preview\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="16.0">
 <Namespaces>
  <Namespace Name="Highlander.Equities.Helpers">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Highlander.Equities.Helpers' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Highlander.Utilities">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Highlander.Utilities' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Highlander.Utilities.Compression">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Highlander.Utilities.Compression' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Highlander.Utilities.Diagnostics">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Highlander.Utilities.Diagnostics' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Highlander.Utilities.NamedValues">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Highlander.Utilities.NamedValues' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Highlander.Utilities.RefCounting">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Highlander.Utilities.RefCounting' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Highlander.Utilities.Serialisation">
   <Messages>
    <Message Id="Serialisation" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Serialisation' in namespace name 'Highlander.Utilities.Serialisation'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Highlander.Utilities.Servers">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Highlander.Utilities.Servers' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\bin\Debug\Highlander.Utilities.dll">
   <Modules>
    <Module Name="highlander.utilities.dll">
     <Messages>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'Highlander.Utilities.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Highlander.Equities.Helpers">
       <Types>
        <Type Name="PropertyHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetProperties`2(System.Collections.Generic.List`1&lt;!!1&gt;,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="PropertyHelper.cs" Line="41">Change 'List&lt;T2&gt;' in 'PropertyHelper.GetProperties&lt;T1, T2&gt;(List&lt;T2&gt;, string)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="PropertyHelper.cs" Line="42">In externally visible method 'PropertyHelper.GetProperties&lt;T1, T2&gt;(List&lt;T2&gt;, string)', validate parameter 'items' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Highlander.Utilities.Caching">
       <Types>
        <Type Name="CacheBase`3" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Certainty="85" Level="Error">Consider a design where 'CacheBase&lt;K, V, U&gt;' has no more than 2 type parameters.</Issue>
          </Message>
          <Message Id="K" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On type 'CacheBase&lt;K, V, U&gt;', consider providing a more meaningful name than generic type parameter name 'K'.</Issue>
          </Message>
          <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On type 'CacheBase&lt;K, V, U&gt;', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
          </Message>
          <Message Id="V" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On type 'CacheBase&lt;K, V, U&gt;', consider providing a more meaningful name than generic type parameter name 'V'.</Issue>
          </Message>
          <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameter" Certainty="95" Level="Error">On type 'CacheBase&lt;K, V, U&gt;', prefix generic type parameter name 'K' with 'T'.</Issue>
           <Issue Name="TypeTypeParameter" Certainty="95" Level="Error">On type 'CacheBase&lt;K, V, U&gt;', prefix generic type parameter name 'U' with 'T'.</Issue>
           <Issue Name="TypeTypeParameter" Certainty="95" Level="Error">On type 'CacheBase&lt;K, V, U&gt;', prefix generic type parameter name 'V' with 'T'.</Issue>
          </Message>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'CacheBase&lt;K, V, U&gt;' because it creates members of the following IDisposable types: 'Guarded&lt;CacheState&lt;K, V, U&gt;&gt;'. If 'CacheBase&lt;K, V, U&gt;' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CacheState" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CacheBase&lt;K, V, U&gt;.CacheState' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'CacheBase&lt;K, V, U&gt;.CacheState' doesn't nest generic type 'Guarded&lt;CacheState&lt;K, V, U&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CalculateExpiry(System.DateTimeOffset,System.TimeSpan)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectMessage" Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="130">Method 'CacheBase&lt;K, V, U&gt;.CalculateExpiry(DateTimeOffset, TimeSpan)' passes parameter name 'cacheDuration' as the 'message' argument to a 'ArgumentException' constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="128">The 'this' parameter (or 'Me' in Visual Basic) of 'CacheBase&lt;K, V, U&gt;.CalculateExpiry(DateTimeOffset, TimeSpan)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(!0,Highlander.Utilities.Caching.LoadSaveType,!2)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="294">In method 'CacheBase&lt;K, V, U&gt;.Get(K, LoadSaveType, U)', correct the spelling of 'Param' in parameter name 'userParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCacheItems()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="184">Change 'List&lt;CacheItem&lt;K, V, U&gt;&gt;' in 'CacheBase&lt;K, V, U&gt;.GetCacheItems()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="184">Consider a design where 'CacheBase&lt;K, V, U&gt;.GetCacheItems()' doesn't nest generic type 'List&lt;CacheItem&lt;K, V, U&gt;&gt;'.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="184">Change 'CacheBase&lt;K, V, U&gt;.GetCacheItems()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetKeys()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="170">Change 'List&lt;K&gt;' in 'CacheBase&lt;K, V, U&gt;.GetKeys()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="170">Change 'CacheBase&lt;K, V, U&gt;.GetKeys()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValues()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="145">Change 'List&lt;V&gt;' in 'CacheBase&lt;K, V, U&gt;.GetValues()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValues(Highlander.Utilities.Caching.LoadSaveType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="155">Change 'List&lt;V&gt;' in 'CacheBase&lt;K, V, U&gt;.GetValues(LoadSaveType)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnLoad(!0,!2)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="263">In method 'CacheBase&lt;K, V, U&gt;.OnLoad(K, U)', correct the spelling of 'Param' in parameter name 'userParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSave(!1,!1,!2)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="347">In method 'CacheBase&lt;K, V, U&gt;.OnSave(V, V, U)', correct the spelling of 'Param' in parameter name 'userParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnUpdate(Highlander.Utilities.Caching.CacheChange,!0,!1,!1,!2)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="242">In method 'CacheBase&lt;K, V, U&gt;.OnUpdate(CacheChange, K, V, V, U)', correct the spelling of 'Param' in parameter name 'userParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Put(!0,!1,!2)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="368">In method 'CacheBase&lt;K, V, U&gt;.Put(K, V, U)', correct the spelling of 'Param' in parameter name 'userParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Put(!0,!1,Highlander.Utilities.Caching.LoadSaveType,!2)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="393">In method 'CacheBase&lt;K, V, U&gt;.Put(K, V, LoadSaveType, U)', correct the spelling of 'Param' in parameter name 'userParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Put(!0,!1,Highlander.Utilities.Caching.LoadSaveType,!2,System.TimeSpan)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="407">In method 'CacheBase&lt;K, V, U&gt;.Put(K, V, LoadSaveType, U, TimeSpan)', correct the spelling of 'Param' in parameter name 'userParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(!0,!2)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="463">In method 'CacheBase&lt;K, V, U&gt;.Remove(K, U)', correct the spelling of 'Param' in parameter name 'userParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CacheItem`3" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Certainty="85" Level="Error">Consider a design where 'CacheItem&lt;K, V, U&gt;' has no more than 2 type parameters.</Issue>
          </Message>
          <Message Id="K" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On type 'CacheItem&lt;K, V, U&gt;', consider providing a more meaningful name than generic type parameter name 'K'.</Issue>
          </Message>
          <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On type 'CacheItem&lt;K, V, U&gt;', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
          </Message>
          <Message Id="V" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On type 'CacheItem&lt;K, V, U&gt;', consider providing a more meaningful name than generic type parameter name 'V'.</Issue>
          </Message>
          <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameter" Certainty="95" Level="Error">On type 'CacheItem&lt;K, V, U&gt;', prefix generic type parameter name 'K' with 'T'.</Issue>
           <Issue Name="TypeTypeParameter" Certainty="95" Level="Error">On type 'CacheItem&lt;K, V, U&gt;', prefix generic type parameter name 'U' with 'T'.</Issue>
           <Issue Name="TypeTypeParameter" Certainty="95" Level="Error">On type 'CacheItem&lt;K, V, U&gt;', prefix generic type parameter name 'V' with 'T'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(!0,!1,!2,System.DateTimeOffset)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Caching" File="CacheBase.cs" Line="62">In method 'CacheItem&lt;K, V, U&gt;.CacheItem(K, V, U, DateTimeOffset)', correct the spelling of 'Param' in parameter name 'userParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Expires" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CacheItem&lt;K, V, U&gt;.Expires' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UserKey" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'CacheItem&lt;K, V, U&gt;.UserKey' or change the field to one that is an immutable reference type. If the reference type 'K' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CacheItem&lt;K, V, U&gt;.UserKey' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UserParam" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'CacheItem&lt;K, V, U&gt;.UserParam' or change the field to one that is an immutable reference type. If the reference type 'U' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CacheItem&lt;K, V, U&gt;.UserParam' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Param' in member name 'CacheItem&lt;K, V, U&gt;.UserParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Value" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'CacheItem&lt;K, V, U&gt;.Value' or change the field to one that is an immutable reference type. If the reference type 'V' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CacheItem&lt;K, V, U&gt;.Value' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CacheState`3" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Certainty="85" Level="Error">Consider a design where 'CacheState&lt;K, V, U&gt;' has no more than 2 type parameters.</Issue>
          </Message>
          <Message Id="K" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On type 'CacheState&lt;K, V, U&gt;', consider providing a more meaningful name than generic type parameter name 'K'.</Issue>
          </Message>
          <Message Id="U" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On type 'CacheState&lt;K, V, U&gt;', consider providing a more meaningful name than generic type parameter name 'U'.</Issue>
          </Message>
          <Message Id="V" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On type 'CacheState&lt;K, V, U&gt;', consider providing a more meaningful name than generic type parameter name 'V'.</Issue>
          </Message>
          <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameter" Certainty="95" Level="Error">On type 'CacheState&lt;K, V, U&gt;', prefix generic type parameter name 'K' with 'T'.</Issue>
           <Issue Name="TypeTypeParameter" Certainty="95" Level="Error">On type 'CacheState&lt;K, V, U&gt;', prefix generic type parameter name 'U' with 'T'.</Issue>
           <Issue Name="TypeTypeParameter" Certainty="95" Level="Error">On type 'CacheState&lt;K, V, U&gt;', prefix generic type parameter name 'V' with 'T'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Cache" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'CacheState&lt;K, V, U&gt;.Cache' or change the field to one that is an immutable reference type. If the reference type 'Dictionary&lt;K, CacheItem&lt;K, V, U&gt;&gt;' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CacheState&lt;K, V, U&gt;.Cache' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'CacheState&lt;K, V, U&gt;.Cache' doesn't nest generic type 'Dictionary&lt;K, CacheItem&lt;K, V, U&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Highlander.Utilities.Diagnostics">
       <Types>
        <Type Name="AssemblyInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Reflection.Assembly)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Diagnostics" File="AssemblyInfo.cs" Line="176">In externally visible method 'AssemblyInfo.AssemblyInfo(Assembly)', validate parameter 'assembly' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_fileVersionInfo" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkAllNonSerializableFields" Category="Microsoft.Usage" CheckId="CA2235" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Field 'AssemblyInfo._fileVersionInfo' is a member of type 'AssemblyInfo', which is serializable, but is of type 'FileVersionInfo', which is not serializable. Add the NonSerializedAttribute to 'AssemblyInfo._fileVersionInfo'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AssemblyDetails(Highlander.Utilities.Diagnostics.AssemblyInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Diagnostics" File="AssemblyInfo.cs" Line="245">In externally visible method 'AssemblyInfo.AssemblyDetails(AssemblyInfo)', validate parameter 'assemblyInfo' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DictionaryFields" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Diagnostics" File="AssemblyInfo.cs" Line="120">Change 'List&lt;string&gt;' in 'AssemblyInfo.DictionaryFields' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPublicKeyToken(System.Reflection.Assembly)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Diagnostics" File="AssemblyInfo.cs" Line="259">In externally visible method 'AssemblyInfo.GetPublicKeyToken(Assembly)', validate parameter 'assembly' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPublicKeyToken(System.Reflection.AssemblyName)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Byte.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Diagnostics" File="AssemblyInfo.cs" Line="273">Because the behavior of 'byte.ToString(string)' could vary based on the current user's locale settings, replace this call in 'AssemblyInfo.GetPublicKeyToken(AssemblyName)' with a call to 'byte.ToString(string, IFormatProvider)'. If the result of 'byte.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Diagnostics" File="AssemblyInfo.cs" Line="270">In externally visible method 'AssemblyInfo.GetPublicKeyToken(AssemblyName)', validate parameter 'assemblyName' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToArray()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Return" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Diagnostics" File="AssemblyInfo.cs" Line="185">'AssemblyInfo.ToArray()' returns a multidimensional array of 'object[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToArray(System.Reflection.Assembly)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Return" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Diagnostics" File="AssemblyInfo.cs" Line="196">'AssemblyInfo.ToArray(Assembly)' returns a multidimensional array of 'object[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToDict()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dict" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Diagnostics" File="AssemblyInfo.cs" Line="205">Correct the spelling of 'Dict' in member name 'AssemblyInfo.ToDict()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToDict(System.Reflection.Assembly)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dict" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Diagnostics" File="AssemblyInfo.cs" Line="219">Correct the spelling of 'Dict' in member name 'AssemblyInfo.ToDict(Assembly)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Highlander.Utilities.Exception">
       <Types>
        <Type Name="DateToLargeException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="zeroDates" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Exception" File="CustomException.cs" Line="77">Correct the spelling of the unrecognized token 'zeroDates' in the literal '"The interpolation date is larger than zeroDates[]."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="Accessibility" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Exception" File="CustomException.cs" Line="106">Change the accessibility of 'DateToLargeException.DateToLargeException(SerializationInfo, StreamingContext)' to protected.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DateToSmallException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="zeroDates" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Exception" File="CustomException.cs" Line="32">Correct the spelling of the unrecognized token 'zeroDates' in the literal '"The interpolation date is smaller than zeroDates[]."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="Accessibility" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Exception" File="CustomException.cs" Line="61">Change the accessibility of 'DateToSmallException.DateToSmallException(SerializationInfo, StreamingContext)' to protected.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DuplicateNotAllowedException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DuplicateNotAllowedException': protected DuplicateNotAllowedException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DuplicateNotAllowedException': public DuplicateNotAllowedException(String, Exception).</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExtrapolationFailureException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Exception" File="ExtrapolationFailureException.cs" Line="40">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExtrapolationFailureException.ExtrapolationFailureException(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Exception" File="ExtrapolationFailureException.cs" Line="49">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExtrapolationFailureException.ExtrapolationFailureException(string, Exception)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IncompleteInputDataException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Exception" File="IncompleteInputDataException.cs" Line="40">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'IncompleteInputDataException.IncompleteInputDataException(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Exception" File="IncompleteInputDataException.cs" Line="49">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'IncompleteInputDataException.IncompleteInputDataException(string, Exception)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IncompleteLeadSurfaceException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Exception" File="IncompleteLeadSurfaceException.cs" Line="40">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'IncompleteLeadSurfaceException.IncompleteLeadSurfaceException(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Exception" File="IncompleteLeadSurfaceException.cs" Line="49">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'IncompleteLeadSurfaceException.IncompleteLeadSurfaceException(string, Exception)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InvalidValueException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidValueException': protected InvalidValueException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidValueException': public InvalidValueException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'InvalidValueException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UnequalArrayLengthsException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'UnequalArrayLengthsException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="Accessibility" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Exception" File="CustomException.cs" Line="195">Change the accessibility of 'UnequalArrayLengthsException.UnequalArrayLengthsException(SerializationInfo, StreamingContext)' to protected.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UnsortedDatesException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="Accessibility" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Exception" File="CustomException.cs" Line="151">Change the accessibility of 'UnsortedDatesException.UnsortedDatesException(SerializationInfo, StreamingContext)' to protected.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Highlander.Utilities.Expressions">
       <Types>
        <Type Name="Expr" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Expr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Expr' in type name 'Expr'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Highlander.Utilities.Expressions.V1QueryExpr)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="845">Modify 'Expr.Expr(V1QueryExpr)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="858">Modify 'Expr.Expr(V1QueryExpr)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Expr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="812">In method 'Expr.Expr(V1QueryExpr)', correct the spelling of 'Expr' in parameter name 'queryExpr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ALL" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ALL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="738">Correct the casing of 'ALL' in member name 'Expr.ALL' by changing it to 'All'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BoolAND(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AND" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="372">Correct the casing of 'AND' in member name 'Expr.BoolAND(IExpression, IExpression)' by changing it to 'And'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BoolAND(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AND" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="385">Correct the casing of 'AND' in member name 'Expr.BoolAND(IExpression, IExpression, IExpression)' by changing it to 'And'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BoolAND(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AND" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="399">Correct the casing of 'AND' in member name 'Expr.BoolAND(IExpression, IExpression, IExpression, IExpression)' by changing it to 'And'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BoolAND(Highlander.Utilities.Expressions.IExpression[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AND" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="410">Correct the casing of 'AND' in member name 'Expr.BoolAND(params IExpression[])' by changing it to 'And'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BoolAND(Highlander.Utilities.NamedValues.NamedValueSet)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AND" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="432">Correct the casing of 'AND' in member name 'Expr.BoolAND(NamedValueSet)' by changing it to 'And'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BoolAND(System.Collections.Generic.IEnumerable`1&lt;Highlander.Utilities.Expressions.IExpression&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AND" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="421">Correct the casing of 'AND' in member name 'Expr.BoolAND(IEnumerable&lt;IExpression&gt;)' by changing it to 'And'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BoolNOT(Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NOT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="516">Correct the casing of 'NOT' in member name 'Expr.BoolNOT(IExpression)' by changing it to 'Not'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CalcHash()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1789">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CalcHash()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CastTo`1(System.Object,!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="786">Modify 'Expr.CastTo&lt;T&gt;(object, T)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Convert.ChangeType(System.Object,System.Type)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="784">Because the behavior of 'Convert.ChangeType(object, Type)' could vary based on the current user's locale settings, replace this call in 'Expr.CastTo&lt;T&gt;(object, T)' with a call to 'Convert.ChangeType(object, Type, IFormatProvider)'. If the result of 'Convert.ChangeType(object, Type, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="788">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'Expr.CastTo&lt;T&gt;(object, T)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckArgCount(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1014">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgCount(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckArgCount(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1023">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgCount(int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1025">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgCount(int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1025">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgCount(int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckArgType(System.Int32,System.Type,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1033">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgType(int, Type, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1035">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgType(int, Type, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1037">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgType(int, Type, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1041">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgType(int, Type, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckArgTypeIsDateTime(System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1065">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgTypeIsDateTime(int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1067">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgTypeIsDateTime(int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1069">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgTypeIsDateTime(int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1073">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgTypeIsDateTime(int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckArgTypeIsNumeric(System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1049">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgTypeIsNumeric(int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1051">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgTypeIsNumeric(int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1053">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgTypeIsNumeric(int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1057">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckArgTypeIsNumeric(int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckMultiNumericOp()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1088">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckMultiNumericOp()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1090">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.CheckMultiNumericOp()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompareValues(System.Object,System.Object)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1141">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'Expr.CompareValues(object, object)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1142">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'Expr.CompareValues(object, object)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Create(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="171">In method 'Expr.Create(string)', correct the spelling of 'Str' in parameter name 'queryXmlStr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="174">Method 'Expr.Create(string)' passes 'querySpec' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="178">Method 'Expr.Create(string)' passes 'querySpec.v1QueryExpr' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message Id="QuerySpec" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="176">Correct the spelling of the unrecognized token 'QuerySpec' in the literal '"QuerySpec version: "'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="176">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.Create(string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Deserialise(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Deserialise" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="768">Correct the spelling of 'Deserialise' in member name 'Expr.Deserialise(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Display(Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="expr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="741">In method 'Expr.Display(IExpression)', correct the spelling of 'expr' in parameter name 'expr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DoOpAddValues(System.Object,System.Object)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1211">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'Expr.DoOpAddValues(object, object)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1211">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'Expr.DoOpAddValues(object, object)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DoOpDatePart(System.Object)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="DatePart" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1299">Correct the spelling of the unrecognized token 'DatePart' in the literal '"Cannot get DatePart of value \'"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DoOpDayOfWeek(System.Object)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="DayOfWeek" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1288">Correct the spelling of the unrecognized token 'DayOfWeek' in the literal '"Cannot get DayOfWeek of value \'"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DoOpSubtractValues(System.Object,System.Object)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1245">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'Expr.DoOpSubtractValues(object, object)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1245">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'Expr.DoOpSubtractValues(object, object)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DoOpTimePart(System.Object)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="TimePart" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1310">Correct the spelling of the unrecognized token 'TimePart' in the literal '"Cannot get TimePart of value \'"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EvalExpr(Highlander.Utilities.Expressions.IExprContext,System.DateTimeOffset)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1315">'Expr.EvalExpr(IExprContext, DateTimeOffset)' has a cyclomatic complexity of 47. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1471">In method 'Expr.EvalExpr(IExprContext, DateTimeOffset)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1366">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'Expr.EvalExpr(IExprContext, DateTimeOffset)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1386">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'Expr.EvalExpr(IExprContext, DateTimeOffset)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1386">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'Expr.EvalExpr(IExprContext, DateTimeOffset)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1321">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.EvalExpr(IExprContext, DateTimeOffset)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1336">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.EvalExpr(IExprContext, DateTimeOffset)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1354">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Expr.EvalExpr(IExprContext, DateTimeOffset)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1456">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'Expr.EvalExpr(IExprContext, DateTimeOffset)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1447">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'Expr.EvalExpr(IExprContext, DateTimeOffset)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Evaluate(Highlander.Utilities.Expressions.IExprContext,System.DateTimeOffset)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1745">Method 'Expr.Evaluate(IExprContext, DateTimeOffset)' passes 'ExprContext' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message Id="System.String.Equals(System.String,System.StringComparison)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="StringComparison" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1753">'Expr.Evaluate(IExprContext, DateTimeOffset)' passes 'StringComparison.InvariantCultureIgnoreCase' as the 'StringComparison' parameter to 'string.Equals(string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
             <Issue Name="StringComparison" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1760">'Expr.Evaluate(IExprContext, DateTimeOffset)' passes 'StringComparison.InvariantCultureIgnoreCase' as the 'StringComparison' parameter to 'string.Equals(string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
             <Issue Name="StringComparison" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1765">'Expr.Evaluate(IExprContext, DateTimeOffset)' passes 'StringComparison.InvariantCultureIgnoreCase' as the 'StringComparison' parameter to 'string.Equals(string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHashCode()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1813">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Expr.GetHashCode()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsEQU(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EQU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="225">Correct the casing of 'EQU' in member name 'Expr.IsEQU(IExpression, IExpression)' by changing it to 'Equ'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsEQU(System.String,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EQU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="230">Correct the casing of 'EQU' in member name 'Expr.IsEQU(string, object)' by changing it to 'Equ'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsGEQ(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GEQ" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="259">Correct the casing of 'GEQ' in member name 'Expr.IsGEQ(IExpression, IExpression)' by changing it to 'Geq'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsGEQ(System.String,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GEQ" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="264">Correct the casing of 'GEQ' in member name 'Expr.IsGEQ(string, object)' by changing it to 'Geq'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsGTR(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GTR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="276">Correct the casing of 'GTR' in member name 'Expr.IsGTR(IExpression, IExpression)' by changing it to 'Gtr'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsGTR(System.String,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GTR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="281">Correct the casing of 'GTR' in member name 'Expr.IsGTR(string, object)' by changing it to 'Gtr'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsLEQ(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LEQ" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="293">Correct the casing of 'LEQ' in member name 'Expr.IsLEQ(IExpression, IExpression)' by changing it to 'Leq'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsLEQ(System.String,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LEQ" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="298">Correct the casing of 'LEQ' in member name 'Expr.IsLEQ(string, object)' by changing it to 'Leq'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsLSS(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LSS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="322">Correct the casing of 'LSS' in member name 'Expr.IsLSS(IExpression, IExpression)' by changing it to 'Lss'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsLSS(System.String,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LSS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="327">Correct the casing of 'LSS' in member name 'Expr.IsLSS(string, object)' by changing it to 'Lss'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsNEQ(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NEQ" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="242">Correct the casing of 'NEQ' in member name 'Expr.IsNEQ(IExpression, IExpression)' by changing it to 'Neq'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsNEQ(System.String,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NEQ" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="247">Correct the casing of 'NEQ' in member name 'Expr.IsNEQ(string, object)' by changing it to 'Neq'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MatchesProperties(Highlander.Utilities.NamedValues.NamedValueSet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1634">In member 'Expr.MatchesProperties(NamedValueSet)', change parameter name 'dataContext' to 'propSet' in order to match the identifier as it has been declared in 'IExpression.MatchesProperties(NamedValueSet)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MatchesProperties(Highlander.Utilities.NamedValues.NamedValueSet,System.String,System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="1639">In member 'Expr.MatchesProperties(NamedValueSet, string, DateTimeOffset, DateTimeOffset, DateTimeOffset)', change parameter name 'dataContext' to 'propSet' in order to match the identifier as it has been declared in 'IExpression.MatchesProperties(NamedValueSet, string, DateTimeOffset, DateTimeOffset, DateTimeOffset)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NumADD(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ADD" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="673">Correct the casing of 'ADD' in member name 'Expr.NumADD(IExpression, IExpression)' by changing it to 'Add'.</Issue>
            </Message>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="673">Correct the spelling of 'Num' in member name 'Expr.NumADD(IExpression, IExpression)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NumDIV(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DIV" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="709">Correct the casing of 'DIV' in member name 'Expr.NumDIV(IExpression, IExpression)' by changing it to 'Div'.</Issue>
            </Message>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="709">Correct the spelling of 'Num' in member name 'Expr.NumDIV(IExpression, IExpression)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NumMUL(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MUL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="685">Correct the casing of 'MUL' in member name 'Expr.NumMUL(IExpression, IExpression)' by changing it to 'Mul'.</Issue>
            </Message>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="685">Correct the spelling of 'Num' in member name 'Expr.NumMUL(IExpression, IExpression)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NumSUB(Highlander.Utilities.Expressions.IExpression,Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SUB" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="697">Correct the casing of 'SUB' in member name 'Expr.NumSUB(IExpression, IExpression)' by changing it to 'Sub'.</Issue>
            </Message>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="697">Correct the spelling of 'Num' in member name 'Expr.NumSUB(IExpression, IExpression)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Serialise(Highlander.Utilities.Expressions.IExpression)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Serialise" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="746">Correct the spelling of 'Serialise' in member name 'Expr.Serialise(IExpression)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="expr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="746">In method 'Expr.Serialise(IExpression)', correct the spelling of 'expr' in parameter name 'expr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryDeserialise(System.String,Highlander.Utilities.Expressions.IExpression&amp;,System.Exception&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="751">Consider a design that does not require that 'result' be an out parameter.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="760">Modify 'Expr.TryDeserialise(string, out IExpression, out Exception)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Deserialise" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Expressions" File="Expressions.cs" Line="751">Correct the spelling of 'Deserialise' in member name 'Expr.TryDeserialise(string, out IExpression, out Exception)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExprContext" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Expr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Expr' in type name 'ExprContext'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IExprContext" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Expr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Expr' in type name 'IExprContext'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IExpression" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Evaluate(Highlander.Utilities.Expressions.IExprContext,System.DateTimeOffset)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="expr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IExpression.Evaluate(IExprContext, DateTimeOffset)', correct the spelling of 'expr' in parameter name 'exprContext' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MatchesProperties(Highlander.Utilities.Expressions.IExprContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="expr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IExpression.MatchesProperties(IExprContext)', correct the spelling of 'expr' in parameter name 'exprContext' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MatchesProperties(Highlander.Utilities.Expressions.IExprContext,System.DateTimeOffset)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dto" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IExpression.MatchesProperties(IExprContext, DateTimeOffset)', correct the spelling of 'dto' in parameter name 'dtoNow' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="expr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IExpression.MatchesProperties(IExprContext, DateTimeOffset)', correct the spelling of 'expr' in parameter name 'exprContext' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MatchesProperties(Highlander.Utilities.NamedValues.NamedValueSet,System.String,System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dto" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IExpression.MatchesProperties(NamedValueSet, string, DateTimeOffset, DateTimeOffset, DateTimeOffset)', correct the spelling of 'dto' in parameter name 'dtoNow' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Serialise()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Serialise" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Serialise' in member name 'IExpression.Serialise()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToV1QueryExpr()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Expr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Expr' in member name 'IExpression.ToV1QueryExpr()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Highlander.Utilities.Helpers">
       <Types>
        <Type Name="ArrayHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ArrayToHorizontalMatrix`1(!!0[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Body" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Body" Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="54">'ArrayHelper.ArrayToHorizontalMatrix&lt;T&gt;(T[])' uses a multidimensional array of 'T[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="Return" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="53">'ArrayHelper.ArrayToHorizontalMatrix&lt;T&gt;(T[])' returns a multidimensional array of 'T[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="54">In externally visible method 'ArrayHelper.ArrayToHorizontalMatrix&lt;T&gt;(T[])', validate parameter 'array' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ArrayToList`1(!!0[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="146">Change 'List&lt;T&gt;' in 'ArrayHelper.ArrayToList&lt;T&gt;(T[])' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ArrayToVerticalMatrix`1(!!0[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Body" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Body" Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="69">'ArrayHelper.ArrayToVerticalMatrix&lt;T&gt;(T[])' uses a multidimensional array of 'T[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="Return" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="68">'ArrayHelper.ArrayToVerticalMatrix&lt;T&gt;(T[])' returns a multidimensional array of 'T[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="69">In externally visible method 'ArrayHelper.ArrayToVerticalMatrix&lt;T&gt;(T[])', validate parameter 'array' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConvertDictionaryTo2DArray`2(System.Collections.Generic.IDictionary`2&lt;!!0,!!1&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Body" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Body" Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="35">'ArrayHelper.ConvertDictionaryTo2DArray&lt;T1, T2&gt;(IDictionary&lt;T1, T2&gt;)' uses a multidimensional array of 'object[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="Return" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="33">'ArrayHelper.ConvertDictionaryTo2DArray&lt;T1, T2&gt;(IDictionary&lt;T1, T2&gt;)' returns a multidimensional array of 'object[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="35">In externally visible method 'ArrayHelper.ConvertDictionaryTo2DArray&lt;T1, T2&gt;(IDictionary&lt;T1, T2&gt;)', validate parameter 'dictionary' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ListToArray`1(System.Collections.Generic.List`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="129">Change 'List&lt;T&gt;' in 'ArrayHelper.ListToArray&lt;T&gt;(List&lt;T&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="131">In externally visible method 'ArrayHelper.ListToArray&lt;T&gt;(List&lt;T&gt;)', validate parameter 'list' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MatrixToArray`1(!!0[,])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dbl" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="83">In method 'ArrayHelper.MatrixToArray&lt;T&gt;(T[,])', correct the spelling of 'dbl' in parameter name 'dblMatrix' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0#" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="83">'dblMatrix' is a multidimensional array. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="85">In externally visible method 'ArrayHelper.MatrixToArray&lt;T&gt;(T[,])', validate parameter 'dblMatrix' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RangeToMatrix`1(!!0[,])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dbl" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="110">In method 'ArrayHelper.RangeToMatrix&lt;T&gt;(T[,])', correct the spelling of 'dbl' in parameter name 'dblMatrix' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0#" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="110">'dblMatrix' is a multidimensional array. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="Body" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Body" Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="111">'ArrayHelper.RangeToMatrix&lt;T&gt;(T[,])' uses a multidimensional array of 'T[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="Return" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="110">'ArrayHelper.RangeToMatrix&lt;T&gt;(T[,])' returns a multidimensional array of 'T[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ArrayHelper.cs" Line="111">In externally visible method 'ArrayHelper.RangeToMatrix&lt;T&gt;(T[,])', validate parameter 'dblMatrix' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AssemblyFileInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetExecutableUTCDateTime(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="AssemblyFileInfo.cs" Line="47">Object 'stream' can be disposed more than once in method 'AssemblyFileInfo.GetExecutableUTCDateTime(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 47</Issue>
            </Message>
            <Message Id="UTC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="AssemblyFileInfo.cs" Line="35">Correct the casing of 'UTC' in member name 'AssemblyFileInfo.GetExecutableUTCDateTime(string)' by changing it to 'Utc'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DisposeHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SafeDispose`1(!!0&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="DisposeHelper.cs" Line="34">Modify 'DisposeHelper.SafeDispose&lt;T&gt;(ref T)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="DisposeHelper.cs" Line="29">Consider a design that does not require that 'target' be a reference parameter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EnumHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EnumToList`1()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="EnumParser.cs" Line="138">Change 'List&lt;T&gt;' in 'EnumHelper.EnumToList&lt;T&gt;()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse`1(System.Char)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="EnumParser.cs" Line="103">In method 'EnumHelper.Parse&lt;T&gt;(char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse`1(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="EnumParser.cs" Line="92">In method 'EnumHelper.Parse&lt;T&gt;(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse`1(System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="EnumParser.cs" Line="42">In method 'EnumHelper.Parse&lt;T&gt;(string, bool)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse`1(System.String,System.Boolean,!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="EnumParser.cs" Line="79">In method 'EnumHelper.Parse&lt;T&gt;(string, bool, T)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString(System.Enum)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="EnumParser.cs" Line="149">In method 'EnumHelper.ToString(Enum)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="EnumParser.cs" Line="151">In externally visible method 'EnumHelper.ToString(Enum)', validate parameter 'e' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToStrings(System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="EnumParser.cs" Line="175">In method 'EnumHelper.ToStrings(Type)', consider providing a more meaningful name than parameter name 't'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryParse`1(System.String,System.Boolean,!!0&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="EnumParser.cs" Line="55">In method 'EnumHelper.TryParse&lt;T&gt;(string, bool, out T)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InputValidator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EnumTypeNotSpecified`1(System.String,!!0,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="InputValidator.cs" Line="163">In method 'InputValidator.EnumTypeNotSpecified&lt;T&gt;(string, T, bool)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ListNotEmpty`1(System.String,System.Collections.Generic.List`1&lt;!!0&gt;,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="InputValidator.cs" Line="180">Change 'List&lt;T&gt;' in 'InputValidator.ListNotEmpty&lt;T&gt;(string, List&lt;T&gt;, bool)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NullDate" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'InputValidator.NullDate' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ObjectLookupHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetById`1(System.Object,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ObjectLookupHelper.cs" Line="41">In member 'ObjectLookupHelper.GetById&lt;T&gt;(object, string)', consider replacing the data type identifier 'object' in parameter name 'objectGraph' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetObjectProperties(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ObjectLookupHelper.cs" Line="151">In member 'ObjectLookupHelper.GetObjectProperties(object)', consider replacing the data type identifier 'Object' in parameter name 'theObject' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ObjectLookupHelper.cs" Line="152">In externally visible method 'ObjectLookupHelper.GetObjectProperties(object)', validate parameter 'theObject' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetObjectProperty(System.Object,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ObjectLookupHelper.cs" Line="135">In member 'ObjectLookupHelper.GetObjectProperty(object, string)', consider replacing the data type identifier 'Object' in parameter name 'theObject' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ObjectLookupHelper.cs" Line="136">In externally visible method 'ObjectLookupHelper.GetObjectProperty(object, string)', validate parameter 'theObject' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPropertyValue(System.Object,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ObjectLookupHelper.cs" Line="163">In member 'ObjectLookupHelper.GetPropertyValue(object, string)', consider replacing the data type identifier 'Object' in parameter name 'theObject' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ObjectPropertyExists(System.Object,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ObjectLookupHelper.cs" Line="122">In member 'ObjectLookupHelper.ObjectPropertyExists(object, string)', consider replacing the data type identifier 'Object' in parameter name 'theObject' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ObjectLookupHelper.cs" Line="123">In externally visible method 'ObjectLookupHelper.ObjectPropertyExists(object, string)', validate parameter 'theObject' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetPropertyValue(System.Object,System.String,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ObjectLookupHelper.cs" Line="176">In member 'ObjectLookupHelper.SetPropertyValue(object, string, object)', consider replacing the data type identifier 'Object' in parameter name 'theObject' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Pair`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#First" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Pair&lt;T1, T2&gt;.First' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Second" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Pair&lt;T1, T2&gt;.Second' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReflectionHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ChangeType(System.Object,System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ChangeType(System.Object,System.Type)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ReflectionHelper.cs" Line="60">Because the behavior of 'Convert.ChangeType(object, Type)' could vary based on the current user's locale settings, replace this call in 'ReflectionHelper.ChangeType(object, Type)' with a call to 'Convert.ChangeType(object, Type, IFormatProvider)'. If the result of 'Convert.ChangeType(object, Type, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ReflectionHelper.cs" Line="63">Because the behavior of 'Convert.ChangeType(object, Type)' could vary based on the current user's locale settings, replace this call in 'ReflectionHelper.ChangeType(object, Type)' with a call to 'Convert.ChangeType(object, Type, IFormatProvider)'. If the result of 'Convert.ChangeType(object, Type, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ReflectionHelper.cs" Line="58">In externally visible method 'ReflectionHelper.ChangeType(object, Type)', validate parameter 'conversionType' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAssemblyCodeBaseLocation(System.Reflection.Assembly)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ReflectionHelper.cs" Line="74">In externally visible method 'ReflectionHelper.GetAssemblyCodeBaseLocation(Assembly)', validate parameter 'assembly' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ResourceHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetResource(System.Reflection.Assembly,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ResourceHelper.cs" Line="68">In externally visible method 'ResourceHelper.GetResource(Assembly, string)', validate parameter 'assembly' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetResource(System.Reflection.Assembly,System.String,System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ResourceHelper.cs" Line="85">In externally visible method 'ResourceHelper.GetResource(Assembly, string, Type)', validate parameter 'deriveNamespaceFromThisType' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetResources(System.Reflection.Assembly,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ResourceHelper.cs" Line="108">In externally visible method 'ResourceHelper.GetResources(Assembly, string)', validate parameter 'assembly' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetResources(System.Reflection.Assembly,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ResourceHelper.cs" Line="129">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ResourceHelper.GetResources(Assembly, string, string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ResourceHelper.cs" Line="129">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ResourceHelper.GetResources(Assembly, string, string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ResourceHelper.cs" Line="126">In externally visible method 'ResourceHelper.GetResources(Assembly, string, string)', validate parameter 'assembly' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetResourceWithPartialName(System.Reflection.Assembly,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ResourceHelper.cs" Line="97">In externally visible method 'ResourceHelper.GetResourceWithPartialName(Assembly, string)', validate parameter 'assembly' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadResourceValue(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="ResourceHelper.cs" Line="51">Modify 'ResourceHelper.ReadResourceValue(string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ReplaceDateTimeTokens(System.String,System.DateTimeOffset)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.DateTimeOffset.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="StringHelper.cs" Line="44">Because the behavior of 'DateTimeOffset.ToString(string)' could vary based on the current user's locale settings, replace this call in 'StringHelper.ReplaceDateTimeTokens(string, DateTimeOffset)' with a call to 'DateTimeOffset.ToString(string, IFormatProvider)'. If the result of 'DateTimeOffset.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Triplet`3" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Certainty="85" Level="Error">Consider a design where 'Triplet&lt;T1, T2, T3&gt;' has no more than 2 type parameters.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#First" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Triplet&lt;T1, T2, T3&gt;.First' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Second" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Triplet&lt;T1, T2, T3&gt;.Second' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Third" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Triplet&lt;T1, T2, T3&gt;.Third' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddAttribute(System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="100">Modify member 'XmlHelper.AddAttribute(XmlDocument, XmlElement, string, object)' so that it no longer exposes the concrete type 'XmlAttribute'. Use IXPathNavigable to represent XML data sources.</Issue>
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="100">Modify member 'XmlHelper.AddAttribute(XmlDocument, XmlElement, string, object)' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="100">Modify member 'XmlHelper.AddAttribute(XmlDocument, XmlElement, string, object)' so that it no longer exposes the concrete type 'XmlElement'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="101">In externally visible method 'XmlHelper.AddAttribute(XmlDocument, XmlElement, string, object)', validate parameter 'document' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="103">In externally visible method 'XmlHelper.AddAttribute(XmlDocument, XmlElement, string, object)', validate parameter 'element' before using it.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="102">In externally visible method 'XmlHelper.AddAttribute(XmlDocument, XmlElement, string, object)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddDocumentElementToDom(System.Xml.XmlDocument,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="77">Modify member 'XmlHelper.AddDocumentElementToDom(XmlDocument, string)' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="77">Modify member 'XmlHelper.AddDocumentElementToDom(XmlDocument, string)' so that it no longer exposes the concrete type 'XmlElement'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="78">In externally visible method 'XmlHelper.AddDocumentElementToDom(XmlDocument, string)', validate parameter 'document' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddElementToDom(System.Xml.XmlDocument,System.Xml.XmlElement,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="84">Modify member 'XmlHelper.AddElementToDom(XmlDocument, XmlElement, string)' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="84">Modify member 'XmlHelper.AddElementToDom(XmlDocument, XmlElement, string)' so that it no longer exposes the concrete type 'XmlElement'. Use IXPathNavigable to represent XML data sources.</Issue>
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="84">Modify member 'XmlHelper.AddElementToDom(XmlDocument, XmlElement, string)' so that it no longer exposes the concrete type 'XmlElement'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="85">In externally visible method 'XmlHelper.AddElementToDom(XmlDocument, XmlElement, string)', validate parameter 'document' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="86">In externally visible method 'XmlHelper.AddElementToDom(XmlDocument, XmlElement, string)', validate parameter 'parentElement' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddNodeToDom(System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="91">Modify member 'XmlHelper.AddNodeToDom(XmlDocument, XmlElement, string, object)' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="91">Modify member 'XmlHelper.AddNodeToDom(XmlDocument, XmlElement, string, object)' so that it no longer exposes the concrete type 'XmlElement'. Use IXPathNavigable to represent XML data sources.</Issue>
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="91">Modify member 'XmlHelper.AddNodeToDom(XmlDocument, XmlElement, string, object)' so that it no longer exposes the concrete type 'XmlElement'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="92">In externally visible method 'XmlHelper.AddNodeToDom(XmlDocument, XmlElement, string, object)', validate parameter 'document' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="94">In externally visible method 'XmlHelper.AddNodeToDom(XmlDocument, XmlElement, string, object)', validate parameter 'parentElement' before using it.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="93">In externally visible method 'XmlHelper.AddNodeToDom(XmlDocument, XmlElement, string, object)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNodeValueBool(System.String,System.Xml.XmlNode)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bool" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="44">Consider replacing the language-specific data type identifier 'Bool' in member name 'XmlHelper.GetNodeValueBool(string, XmlNode)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="44">Modify member 'XmlHelper.GetNodeValueBool(string, XmlNode)' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="47">Replace the call to 'string.operator !=(string, string)' in 'XmlHelper.GetNodeValueBool(string, XmlNode)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNodeValueDate(System.String,System.Xml.XmlNode)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.DateTime.TryParse(System.String,System.DateTime@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="60">'XmlHelper.GetNodeValueDate(string, XmlNode)' calls 'DateTime.TryParse(string, out DateTime)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="59">Modify member 'XmlHelper.GetNodeValueDate(string, XmlNode)' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNodeValueDecimal(System.String,System.Xml.XmlNode)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Decimal.TryParse(System.String,System.Decimal@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="72">'XmlHelper.GetNodeValueDecimal(string, XmlNode)' calls 'decimal.TryParse(string, out decimal)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="71">Modify member 'XmlHelper.GetNodeValueDecimal(string, XmlNode)' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNodeValueDouble(System.String,System.Xml.XmlNode)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Double.TryParse(System.String,System.Double@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="66">'XmlHelper.GetNodeValueDouble(string, XmlNode)' calls 'double.TryParse(string, out double)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="65">Modify member 'XmlHelper.GetNodeValueDouble(string, XmlNode)' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNodeValueString(System.String,System.Xml.XmlNode)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="33">Modify member 'XmlHelper.GetNodeValueString(string, XmlNode)' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Helpers" File="XmlHelper.cs" Line="35">In externally visible method 'XmlHelper.GetNodeValueString(string, XmlNode)', validate parameter 'fromNode' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Highlander.Utilities.Logging">
       <Types>
        <Type Name="BaseLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="61">Modify 'BaseLogger.BaseLogger(string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="63">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.BaseLogger(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="85">Change 'BaseLogger.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="85">Modify 'BaseLogger.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="92">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.Dispose()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DoAsyncIo" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BaseLogger.DoAsyncIo' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Log(System.Int32,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Highlander.Utilities.Logging.BaseLogger.OnWrite(System.Int32,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="458">Method 'BaseLogger.Log(int, string, string)' passes a literal string as parameter 'text' of a call to 'BaseLogger.OnWrite(int, string)'. Retrieve the following string(s) from a resource table instead: "{0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="460">Modify 'BaseLogger.Log(int, string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="2#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="415">In member 'BaseLogger.Log(int, string, string)', change parameter name 'input' to 'msg' in order to match the identifier as it has been declared in 'ILogger.Log(int, string, string)'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="422">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'BaseLogger.Log(int, string, string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.DateTimeOffset.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="436">Because the behavior of 'DateTimeOffset.ToString(string)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.Log(int, string, string)' with a call to 'DateTimeOffset.ToString(string, IFormatProvider)'. If the result of 'DateTimeOffset.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="437">Because the behavior of 'DateTimeOffset.ToString(string)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.Log(int, string, string)' with a call to 'DateTimeOffset.ToString(string, IFormatProvider)'. If the result of 'DateTimeOffset.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="438">Because the behavior of 'DateTimeOffset.ToString(string)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.Log(int, string, string)' with a call to 'DateTimeOffset.ToString(string, IFormatProvider)'. If the result of 'DateTimeOffset.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="439">Because the behavior of 'DateTimeOffset.ToString(string)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.Log(int, string, string)' with a call to 'DateTimeOffset.ToString(string, IFormatProvider)'. If the result of 'DateTimeOffset.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="462">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.Log(int, string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="463">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.Log(int, string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="441">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'BaseLogger.Log(int, string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="417">In externally visible method 'BaseLogger.Log(int, string, string)', validate parameter 'input' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="123">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogDebug(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="134">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogDebug(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="146">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogDebug(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="156">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogDebug(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="321">In externally visible method 'BaseLogger.LogError(Exception)', validate parameter 'ex' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="279">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogError(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="290">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogError(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="302">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogError(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="312">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogError(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="382">In externally visible method 'BaseLogger.LogFatal(Exception)', validate parameter 'ex' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="340">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogFatal(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="351">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogFatal(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="363">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogFatal(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="373">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogFatal(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="175">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogInfo(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="186">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogInfo(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="198">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogInfo(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="208">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogInfo(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="227">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogWarning(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="238">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogWarning(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="250">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogWarning(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="260">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'BaseLogger.LogWarning(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnhandledDomainException(System.Object,System.UnhandledExceptionEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="524">Modify 'BaseLogger.UnhandledDomainException(object, UnhandledExceptionEventArgs)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="BaseLogger.cs" Line="526">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'BaseLogger.UnhandledDomainException(object, UnhandledExceptionEventArgs)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DatabaseLog" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="NonBreaking" Certainty="95" Level="CriticalError">Implement IDisposable on 'DatabaseLog' because it creates members of the following IDisposable types: 'Timer'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ActiveTable" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_ActiveTable()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLog.cs" Line="163">'DatabaseLog.ActiveTable.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Adapter" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Adapter()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLog.cs" Line="148">'DatabaseLog.Adapter.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Enabled" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Enabled()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLog.cs" Line="96">'DatabaseLog.Enabled.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#InitializeComponent()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotUseTimersThatPreventPowerStateChanges" Category="Microsoft.Mobility" CheckId="CA1601" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLog.cs" Line="82">Modify the call to 'Timer.Interval.set(double)' in method 'DatabaseLog.InitializeComponent()' to set the timer interval to a value that's greater than or equal to one second.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MaxQueueLength" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_MaxQueueLength()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLog.cs" Line="137">'DatabaseLog.MaxQueueLength.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_MaxQueueLength(System.Int64)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLog.cs" Line="138">'DatabaseLog.MaxQueueLength.set(long)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Persist()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLog.cs" Line="234">Modify 'DatabaseLog.Persist()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLog.cs" Line="245">Modify 'DatabaseLog.Persist()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PersistInterval" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_PersistInterval()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLog.cs" Line="123">'DatabaseLog.PersistInterval.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Write(System.Data.DataRow)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLog.cs" Line="196">'DatabaseLog.Write(DataRow)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DatabaseLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="IDisposableReimplementation" Certainty="95" Level="Error">Remove IDisposable from the list of interfaces implemented by 'DatabaseLogger' and override the base class Dispose implementation instead.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CreateDataAdapter(System.String,System.String,System.Collections.Generic.IDictionary`2&lt;Highlander.Utilities.Logging.MandatoryLogField,System.String&gt;,System.Data.DataTable&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="198">In method 'DatabaseLogger.CreateDataAdapter(string, string, IDictionary&lt;MandatoryLogField, string&gt;, out DataTable)', object 'adapter' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'adapter' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="197">In method 'DatabaseLogger.CreateDataAdapter(string, string, IDictionary&lt;MandatoryLogField, string&gt;, out DataTable)', call System.IDisposable.Dispose on object 'connection' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateLogTable(System.String,System.Data.DataTable,System.Collections.Generic.IDictionary`2&lt;Highlander.Utilities.Logging.MandatoryLogField,System.String&gt;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="273">In method 'DatabaseLogger.CreateLogTable(string, DataTable, IDictionary&lt;MandatoryLogField, string&gt;)', object 'logDataTable' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'logDataTable' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="281">In method 'DatabaseLogger.CreateLogTable(string, DataTable, IDictionary&lt;MandatoryLogField, string&gt;)', object 'new DataColumn()' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new DataColumn()' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="273">Be sure to set the DataTable Locale property wherever 'DatabaseLogger.CreateLogTable(string, DataTable, IDictionary&lt;MandatoryLogField, string&gt;)' creates an instance of that type.</Issue>
            </Message>
            <Message Id="System.Convert.ToBoolean(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="276">Because the behavior of 'Convert.ToBoolean(object)' could vary based on the current user's locale settings, replace this call in 'DatabaseLogger.CreateLogTable(string, DataTable, IDictionary&lt;MandatoryLogField, string&gt;)' with a call to 'Convert.ToBoolean(object, IFormatProvider)'. If the result of 'Convert.ToBoolean(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Linq.Enumerable.Contains&lt;System.String&gt;(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Collections.Generic.IEqualityComparer`1&lt;System.String&gt;)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="StringComparer" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="279">'DatabaseLogger.CreateLogTable(string, DataTable, IDictionary&lt;MandatoryLogField, string&gt;)' passes 'StringComparer.InvariantCultureIgnoreCase' as the 'StringComparer' parameter to 'Enumerable.Contains&lt;string&gt;(this IEnumerable&lt;string&gt;, string, IEqualityComparer&lt;string&gt;)'. To perform a non-linguistic comparison, specify 'StringComparer.Ordinal' or 'StringComparer.OrdinalIgnoreCase' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GenerateInsertCommand(System.Data.DataTable,System.Data.SqlClient.SqlConnection,System.Collections.Generic.IDictionary`2&lt;Highlander.Utilities.Logging.MandatoryLogField,System.String&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="254">In method 'DatabaseLogger.GenerateInsertCommand(DataTable, SqlConnection, IDictionary&lt;MandatoryLogField, string&gt;)', object 'cmd' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'cmd' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="254">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'DatabaseLogger.GenerateInsertCommand(DataTable, SqlConnection, IDictionary&lt;MandatoryLogField, string&gt;)' could contain the following variables 'this.LogTableName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
            <Message Id="System.Convert.ToBoolean(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="238">Because the behavior of 'Convert.ToBoolean(object)' could vary based on the current user's locale settings, replace this call in 'DatabaseLogger.GenerateInsertCommand(DataTable, SqlConnection, IDictionary&lt;MandatoryLogField, string&gt;)' with a call to 'Convert.ToBoolean(object, IFormatProvider)'. If the result of 'Convert.ToBoolean(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="244">Because the behavior of 'Convert.ToInt32(object)' could vary based on the current user's locale settings, replace this call in 'DatabaseLogger.GenerateInsertCommand(DataTable, SqlConnection, IDictionary&lt;MandatoryLogField, string&gt;)' with a call to 'Convert.ToInt32(object, IFormatProvider)'. If the result of 'Convert.ToInt32(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Linq.Enumerable.Contains&lt;System.String&gt;(System.Collections.Generic.IEnumerable`1&lt;System.String&gt;,System.String,System.Collections.Generic.IEqualityComparer`1&lt;System.String&gt;)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="StringComparer" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="241">'DatabaseLogger.GenerateInsertCommand(DataTable, SqlConnection, IDictionary&lt;MandatoryLogField, string&gt;)' passes 'StringComparer.InvariantCultureIgnoreCase' as the 'StringComparer' parameter to 'Enumerable.Contains&lt;string&gt;(this IEnumerable&lt;string&gt;, string, IEqualityComparer&lt;string&gt;)'. To perform a non-linguistic comparison, specify 'StringComparer.Ordinal' or 'StringComparer.OrdinalIgnoreCase' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSchemaTable(System.String,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="217">In method 'DatabaseLogger.GetSchemaTable(string, string)', call System.IDisposable.Dispose on object 'new SqlCommand("Select top 1 * from " + tableName + " where 1=2")' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="222">Object 'connection' can be disposed more than once in method 'DatabaseLogger.GetSchemaTable(string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 222</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="217">The query string passed to 'SqlCommand.SqlCommand(string)' in 'DatabaseLogger.GetSchemaTable(string, string)' could contain the following variables 'tableName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitialiseLogger(System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="132">In method 'DatabaseLogger.InitialiseLogger(bool)', call System.IDisposable.Dispose on object 'logging' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="132">Be sure to set the DataSet Locale property wherever 'DatabaseLogger.InitialiseLogger(bool)' creates an instance of that type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetRowValue(System.Data.DataRow,Highlander.Utilities.Logging.MandatoryLogField,System.Object,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Highlander.Utilities.Logging.DatabaseLogger.WriteFailure(System.String,System.String,System.Exception)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="183">Method 'DatabaseLogger.SetRowValue(DataRow, MandatoryLogField, object, string)' passes a literal string as parameter 'message' of a call to 'DatabaseLogger.WriteFailure(string, string, Exception)'. Retrieve the following string(s) from a resource table instead: "Mandatory log field ,  cannot be resolved. Please ensure this field has been cor...".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="179">Modify 'DatabaseLogger.SetRowValue(DataRow, MandatoryLogField, object, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="DatabaseLogger.cs" Line="181">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'DatabaseLogger.SetRowValue(DataRow, MandatoryLogField, object, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FileLogger.cs" Line="31">In member 'FileLogger.FileLogger(string)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="_streamWriter" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FileLogger.cs" Line="75">'FileLogger' contains field 'FileLogger._streamWriter' that is of IDisposable type: 'StreamWriter'. Change the Dispose method on 'FileLogger' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FilterLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'FilterLogger' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Highlander.Utilities.RefCounting.Reference`1&lt;Highlander.Utilities.Logging.ILogger&gt;,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="39">In externally visible method 'FilterLogger.FilterLogger(Reference&lt;ILogger&gt;, string)', validate parameter 'loggerRef' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="87">Change 'FilterLogger.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="87">Modify 'FilterLogger.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="143">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogDebug(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="148">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogDebug(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="153">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogDebug(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="158">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogDebug(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="238">In externally visible method 'FilterLogger.LogError(Exception)', validate parameter 'ex' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="218">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogError(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="223">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogError(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="228">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogError(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="233">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogError(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="268">In externally visible method 'FilterLogger.LogFatal(Exception)', validate parameter 'ex' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="248">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogFatal(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="253">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogFatal(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="258">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogFatal(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="263">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogFatal(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="168">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogInfo(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="173">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogInfo(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="178">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogInfo(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="183">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogInfo(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="193">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogWarning(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="198">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogWarning(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="203">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogWarning(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="FilterLogger.cs" Line="208">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'FilterLogger.LogWarning(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GetLogSeverityDelegate" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'GetLogSeverityDelegate' so that it does not end in 'Delegate'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IdentityHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetHostName()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="IdentityHelper.cs" Line="37">Change 'IdentityHelper.GetHostName()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetIdentity()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="IdentityHelper.cs" Line="28">Change 'IdentityHelper.GetIdentity()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ILogger" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Log(System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'ILogger.Log(Exception)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Log(System.Int32,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ILogger.Log(int, string, string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ILogger.LogDebug(string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ILogger.LogError(string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ILogger.LogFatal(string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ILogger.LogInfo(string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'ILogger.LogWarning(string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LoggerHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SeverityName(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="Logging.cs" Line="68">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'LoggerHelper.SeverityName(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MemoryLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Logs" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MemoryLogger.Logs' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'MemoryLogger.Logs' doesn't nest generic type 'Dictionary&lt;int, List&lt;string&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MultiLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in type name 'MultiLogger'.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'MultiLogger' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="40">Change 'MultiLogger.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="40">Modify 'MultiLogger.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Log(System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="199">In method 'MultiLogger.Log(int, string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="70">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogDebug(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="75">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogDebug(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="80">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogDebug(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogDebug(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="85">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogDebug(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="165">In externally visible method 'MultiLogger.LogError(Exception)', validate parameter 'ex' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="145">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogError(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="150">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogError(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="155">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogError(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogError(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="160">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogError(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="195">In externally visible method 'MultiLogger.LogFatal(Exception)', validate parameter 'ex' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="175">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogFatal(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="180">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogFatal(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="185">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogFatal(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogFatal(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="190">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogFatal(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="95">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogInfo(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="100">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogInfo(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="105">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogInfo(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogInfo(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="110">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogInfo(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="120">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogWarning(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="125">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogWarning(string, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="130">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogWarning(string, object, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogWarning(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="MultiLogger.cs" Line="135">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'MultiLogger.LogWarning(string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StreamLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="_streamWriter" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="StreamLogger.cs" Line="47">'StreamLogger' contains field 'StreamLogger._streamWriter' that is of IDisposable type: 'StreamWriter'. Change the Dispose method on 'StreamLogger' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TextBoxLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AsyncHandler(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="TextBoxLogger.cs" Line="65">Modify 'TextBoxLogger.AsyncHandler(object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Logging" File="TextBoxLogger.cs" Line="67">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TextBoxLogger.AsyncHandler(object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Highlander.Utilities.NamedValues">
       <Types>
        <Type Name="LogStringDelegate" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'LogStringDelegate' so that it does not end in 'Delegate'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NamedValue" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="rawtext" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="230">In method 'NamedValue.NamedValue(string)', correct the spelling of 'rawtext' in parameter name 'rawtext' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="244">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'NamedValue.NamedValue(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="233">In externally visible method 'NamedValue.NamedValue(string)', validate parameter 'rawtext' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AsValue`1()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ChangeType(System.Object,System.Type)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="61">Because the behavior of 'Convert.ChangeType(object, Type)' could vary based on the current user's locale settings, replace this call in 'NamedValue.AsValue&lt;T&gt;()' with a call to 'Convert.ChangeType(object, Type, IFormatProvider)'. If the result of 'Convert.ChangeType(object, Type, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DecodeText(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Byte.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="331">Because the behavior of 'byte.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'NamedValue.DecodeText(string)' with a call to 'byte.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'byte.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncodeText(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Byte.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="311">Because the behavior of 'byte.ToString(string)' could vary based on the current user's locale settings, replace this call in 'NamedValue.EncodeText(string)' with a call to 'byte.ToString(string, IFormatProvider)'. If the result of 'byte.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogValue(Highlander.Utilities.NamedValues.LogStringDelegate)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Highlander.Utilities.NamedValues.LogStringDelegate.Invoke(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="135">Method 'NamedValue.LogValue(LogStringDelegate)' passes a literal string as parameter 'text' of a call to 'LogStringDelegate.Invoke(string)'. Retrieve the following string(s) from a resource table instead: "  [, ]=\', (null), \'".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="131">Method 'NamedValue.LogValue(LogStringDelegate)' passes a literal string as parameter 'text' of a call to 'LogStringDelegate.Invoke(string)'. Retrieve the following string(s) from a resource table instead: " (,  elements)\'".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="139">Method 'NamedValue.LogValue(LogStringDelegate)' passes a literal string as parameter 'text' of a call to 'LogStringDelegate.Invoke(string)'. Retrieve the following string(s) from a resource table instead: "=\', \'".</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="131">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'NamedValue.LogValue(LogStringDelegate)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="135">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'NamedValue.LogValue(LogStringDelegate)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="131">In externally visible method 'NamedValue.LogValue(LogStringDelegate)', validate parameter 'logger' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Serialise()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Serialise" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValue.cs" Line="78">Correct the spelling of 'Serialise' in member name 'NamedValue.Serialise()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NamedValueSet" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="MakeOverridable" Certainty="60" Level="Error">Make 'NamedValueSet'.GetObjectData virtual and overridable.</Issue>
          </Message>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'NamedValueSet' because it creates members of the following IDisposable types: 'Guarded&lt;Dictionary&lt;string, NamedValue&gt;&gt;'. If 'NamedValueSet' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Highlander.Utilities.NamedValues.NamedValue)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="nv" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="40">In method 'NamedValueSet.NamedValueSet(NamedValue)', correct the spelling of 'nv' in parameter name 'nv' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="148">In method 'NamedValueSet.NamedValueSet(NamedValue)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Highlander.Utilities.NamedValues.NamedValueSet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="nvs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="40">In method 'NamedValueSet.NamedValueSet(NamedValueSet)', correct the spelling of 'nvs' in parameter name 'nvs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="110">In method 'NamedValueSet.NamedValueSet(NamedValueSet)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(Highlander.Utilities.NamedValues.NamedValueSet,Highlander.Utilities.NamedValues.NamedValueSet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="nvs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="40">In method 'NamedValueSet.NamedValueSet(NamedValueSet, NamedValueSet)', correct the spelling of 'nvs' in parameter name 'nvs1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="40">In method 'NamedValueSet.NamedValueSet(NamedValueSet, NamedValueSet)', correct the spelling of 'nvs' in parameter name 'nvs2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="128">In method 'NamedValueSet.NamedValueSet(NamedValueSet, NamedValueSet)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="133">In method 'NamedValueSet.NamedValueSet(NamedValueSet, NamedValueSet)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;Highlander.Utilities.NamedValues.NamedValue&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="nvs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="40">In method 'NamedValueSet.NamedValueSet(IEnumerable&lt;NamedValue&gt;)', correct the spelling of 'nvs' in parameter name 'nvs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="165">In method 'NamedValueSet.NamedValueSet(IEnumerable&lt;NamedValue&gt;)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,System.String&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="40">Consider a design where 'NamedValueSet.NamedValueSet(IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;)' doesn't nest generic type 'IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;'.</Issue>
            </Message>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="244">In method 'NamedValueSet.NamedValueSet(IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Collections.IDictionary)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="207">In method 'NamedValueSet.NamedValueSet(IDictionary)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Object[,])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="224">In method 'NamedValueSet.NamedValueSet(object[,])', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="606">In externally visible method 'NamedValueSet.NamedValueSet(SerializationInfo, StreamingContext)', validate parameter 'info' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String[],System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="189">In method 'NamedValueSet.NamedValueSet(string[], object[])', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add(Highlander.Utilities.NamedValues.NamedValueSet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="nvs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="548">In method 'NamedValueSet.Add(NamedValueSet)', correct the spelling of 'nvs' in parameter name 'nvs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="555">In method 'NamedValueSet.Add(NamedValueSet)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add`1(System.Collections.Generic.IDictionary`2&lt;System.String,!!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="568">In method 'NamedValueSet.Add&lt;T&gt;(IDictionary&lt;string, T&gt;)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Deserialise(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="273">In method 'NamedValueSet.Deserialise(string)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="386">In method 'NamedValueSet.Get(string, bool)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="386">In externally visible method 'NamedValueSet.Get(string, bool)', validate parameter 'name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="613">In externally visible method 'NamedValueSet.GetObjectData(SerializationInfo, StreamingContext)', validate parameter 'info' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Serialise()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Serialise" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="294">Correct the spelling of 'Serialise' in member name 'NamedValueSet.Serialise()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Serialise(Highlander.Utilities.NamedValues.NamedValueSet)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Serialise" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="45">Correct the spelling of 'Serialise' in member name 'NamedValueSet.Serialise(NamedValueSet)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="nvs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="45">In method 'NamedValueSet.Serialise(NamedValueSet)', correct the spelling of 'nvs' in parameter name 'nvs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(Highlander.Utilities.NamedValues.NamedValue)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="nv" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="537">In method 'NamedValueSet.Set(NamedValue)', correct the spelling of 'nv' in parameter name 'nv' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="544">In method 'NamedValueSet.Set(NamedValue)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="521">In method 'NamedValueSet.Set(string, object)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="521">In externally visible method 'NamedValueSet.Set(string, object)', validate parameter 'name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToColl()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Coll" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSets.cs" Line="340">Correct the spelling of 'Coll' in member name 'NamedValueSet.ToColl()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NamedValueSetHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Build(System.String[],System.Object[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSetHelper.cs" Line="53">In externally visible method 'NamedValueSetHelper.Build(string[], object[])', validate parameter 'names' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSetHelper.cs" Line="55">In externally visible method 'NamedValueSetHelper.Build(string[], object[])', validate parameter 'values' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DistinctInstances(System.Object[,])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="namevalues" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSetHelper.cs" Line="72">In method 'NamedValueSetHelper.DistinctInstances(object[,])', correct the spelling of 'namevalues' in parameter name 'namevalues' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0#" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSetHelper.cs" Line="72">'namevalues' is a multidimensional array. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="NamedValueSetHelper.cs" Line="74">In externally visible method 'NamedValueSetHelper.DistinctInstances(object[,])', validate parameter 'namevalues' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ValueTypeHelper`1" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#DeserialiseScalar(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToBoolean(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="131">Because the behavior of 'Convert.ToBoolean(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToBoolean(string, IFormatProvider)'. If the result of 'Convert.ToBoolean(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToByte(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="133">Because the behavior of 'Convert.ToByte(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToByte(string, IFormatProvider)'. If the result of 'Convert.ToByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToChar(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="135">Because the behavior of 'Convert.ToChar(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToChar(string, IFormatProvider)'. If the result of 'Convert.ToChar(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToDouble(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="137">Because the behavior of 'Convert.ToDouble(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToDouble(string, IFormatProvider)'. If the result of 'Convert.ToDouble(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt16(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="139">Because the behavior of 'Convert.ToInt16(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToInt16(string, IFormatProvider)'. If the result of 'Convert.ToInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="141">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt64(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="143">Because the behavior of 'Convert.ToInt64(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToInt64(string, IFormatProvider)'. If the result of 'Convert.ToInt64(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToSByte(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="145">Because the behavior of 'Convert.ToSByte(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToSByte(string, IFormatProvider)'. If the result of 'Convert.ToSByte(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToSingle(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="147">Because the behavior of 'Convert.ToSingle(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToSingle(string, IFormatProvider)'. If the result of 'Convert.ToSingle(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="149">Because the behavior of 'Convert.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToString(string, IFormatProvider)'. If the result of 'Convert.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToUInt16(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="151">Because the behavior of 'Convert.ToUInt16(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToUInt16(string, IFormatProvider)'. If the result of 'Convert.ToUInt16(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToUInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="153">Because the behavior of 'Convert.ToUInt32(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToUInt32(string, IFormatProvider)'. If the result of 'Convert.ToUInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToUInt64(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="155">Because the behavior of 'Convert.ToUInt64(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'Convert.ToUInt64(string, IFormatProvider)'. If the result of 'Convert.ToUInt64(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.DateTime.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="110">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.DateTimeOffset.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="117">Because the behavior of 'DateTimeOffset.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'DateTimeOffset.Parse(string, IFormatProvider)'. If the result of 'DateTimeOffset.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Decimal.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="123">Because the behavior of 'decimal.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'decimal.Parse(string, IFormatProvider)'. If the result of 'decimal.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.TimeSpan.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="121">Because the behavior of 'TimeSpan.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'TimeSpan.Parse(string, IFormatProvider)'. If the result of 'TimeSpan.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="111">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.DeserialiseScalar(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerialiseScalar(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="44">Because the behavior of 'DateTime.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.SerialiseScalar(object)' with a call to 'DateTime.ToString(string, IFormatProvider)'. If the result of 'DateTime.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.DateTimeOffset.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\NamedValues" File="ValueTypeHelper.cs" Line="48">Because the behavior of 'DateTimeOffset.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ValueTypeHelper&lt;T&gt;.SerialiseScalar(object)' with a call to 'DateTimeOffset.ToString(string, IFormatProvider)'. If the result of 'DateTimeOffset.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Highlander.Utilities.RefCounting">
       <Types>
        <Type Name="Reference`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'Reference&lt;T&gt;' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Create(!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\RefCounting" File="RefCounted.cs" Line="24">Remove 'Reference&lt;T&gt;.Create(T)' from 'Reference&lt;T&gt;' or make it an instance member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="NotCalledWithFinalizer" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\RefCounting" File="RefCounted.cs" Line="44">Change 'Reference&lt;T&gt;.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\RefCounting" File="RefCounted.cs" Line="44">Modify 'Reference&lt;T&gt;.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Finalize()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\RefCounting" File="RefCounted.cs" Line="54">Modify 'Reference&lt;T&gt;.~Reference()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="FinalizeImplementation" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\RefCounting" File="RefCounted.cs" Line="48">Modify 'Reference&lt;T&gt;.~Reference()' so that it calls Dispose(false) and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Highlander.Utilities.Serialisation">
       <Types>
        <Type Name="BinarySerializerHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AreEqual(System.Object,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="BinarySerializerHelper.cs" Line="131">In member 'BinarySerializerHelper.AreEqual(object, object)', consider replacing the data type identifier 'obj' in parameter name 'obj1' with a more generic term, such as 'value'.</Issue>
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="BinarySerializerHelper.cs" Line="131">In member 'BinarySerializerHelper.AreEqual(object, object)', consider replacing the data type identifier 'obj' in parameter name 'obj2' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeserializeFromString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="BinarySerializerHelper.cs" Line="75">In method 'BinarySerializerHelper.DeserializeFromString(string)', call System.IDisposable.Dispose on object 'new MemoryStream(bytes)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeserializeFromString`1(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="BinarySerializerHelper.cs" Line="91">In method 'BinarySerializerHelper.DeserializeFromString&lt;T&gt;(string)', call System.IDisposable.Dispose on object 'new MemoryStream(bytes)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeToByteArray(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="BinarySerializerHelper.cs" Line="102">In member 'BinarySerializerHelper.SerializeToByteArray(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeToString(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="BinarySerializerHelper.cs" Line="55">In member 'BinarySerializerHelper.SerializeToString(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DynamicXml" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Load(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="258">In member 'DynamicXml.Load(string)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="248">In member 'DynamicXml.Parse(string)', consider replacing the data type identifier 'String' in parameter name 'xmlString' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryGetMember(System.Dynamic.GetMemberBinder,System.Object&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="271">In externally visible method 'DynamicXml.TryGetMember(GetMemberBinder, out object)', validate parameter 'binder' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonSerializerHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AreEqual(System.Object,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="JsonSerializerHelper.cs" Line="140">In member 'JsonSerializerHelper.AreEqual(object, object)', consider replacing the data type identifier 'obj' in parameter name 'obj1' with a more generic term, such as 'value'.</Issue>
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="JsonSerializerHelper.cs" Line="140">In member 'JsonSerializerHelper.AreEqual(object, object)', consider replacing the data type identifier 'obj' in parameter name 'obj2' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="JsonSerializerHelper.cs" Line="141">In externally visible method 'JsonSerializerHelper.AreEqual(object, object)', validate parameter 'obj1' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="JsonSerializerHelper.cs" Line="141">In externally visible method 'JsonSerializerHelper.AreEqual(object, object)', validate parameter 'obj2' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Clone`1(!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="JsonSerializerHelper.cs" Line="47">Object 'memoryStream' can be disposed more than once in method 'JsonSerializerHelper.Clone&lt;T&gt;(T)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 47</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeserializeFromString(System.Type,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="JsonSerializerHelper.cs" Line="64">Object 'memoryStream' can be disposed more than once in method 'JsonSerializerHelper.DeserializeFromString(Type, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 64</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeserializeFromString`1(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="JsonSerializerHelper.cs" Line="81">Object 'memoryStream' can be disposed more than once in method 'JsonSerializerHelper.DeserializeFromString&lt;T&gt;(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 81</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeToString(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="JsonSerializerHelper.cs" Line="91">In member 'JsonSerializerHelper.SerializeToString(object)', consider replacing the data type identifier 'object' in parameter name 'objectToSerialize' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="JsonSerializerHelper.cs" Line="92">In externally visible method 'JsonSerializerHelper.SerializeToString(object)', validate parameter 'objectToSerialize' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeToString(System.Type,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="JsonSerializerHelper.cs" Line="129">Object 'memoryStream' can be disposed more than once in method 'JsonSerializerHelper.SerializeToString(Type, object)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 129</Issue>
            </Message>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="JsonSerializerHelper.cs" Line="121">In member 'JsonSerializerHelper.SerializeToString(Type, object)', consider replacing the data type identifier 'object' in parameter name 'objectToSerialize' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeToString`1(!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="JsonSerializerHelper.cs" Line="110">Object 'memoryStream' can be disposed more than once in method 'JsonSerializerHelper.SerializeToString&lt;T&gt;(T)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 110</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SoapSerializerHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AreEqual(System.Object,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="SoapSerializerHelper.cs" Line="77">In member 'SoapSerializerHelper.AreEqual(object, object)', consider replacing the data type identifier 'obj' in parameter name 'obj1' with a more generic term, such as 'value'.</Issue>
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="SoapSerializerHelper.cs" Line="77">In member 'SoapSerializerHelper.AreEqual(object, object)', consider replacing the data type identifier 'obj' in parameter name 'obj2' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeToString(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="SoapSerializerHelper.cs" Line="36">In member 'SoapSerializerHelper.SerializeToString(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlSerializerHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AreEqual(System.Object,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="225">In member 'XmlSerializerHelper.AreEqual(object, object)', consider replacing the data type identifier 'obj' in parameter name 'obj1' with a more generic term, such as 'value'.</Issue>
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="225">In member 'XmlSerializerHelper.AreEqual(object, object)', consider replacing the data type identifier 'obj' in parameter name 'obj2' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="226">In externally visible method 'XmlSerializerHelper.AreEqual(object, object)', validate parameter 'obj1' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="226">In externally visible method 'XmlSerializerHelper.AreEqual(object, object)', validate parameter 'obj2' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeserializeNode`1(System.Xml.XmlNode)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="62">Modify member 'XmlSerializerHelper.DeserializeNode&lt;T&gt;(XmlNode)' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="63">In externally visible method 'XmlSerializerHelper.DeserializeNode&lt;T&gt;(XmlNode)', validate parameter 'node' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeToString(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="124">In member 'XmlSerializerHelper.SerializeToString(object)', consider replacing the data type identifier 'object' in parameter name 'objectToSerialize' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="125">In externally visible method 'XmlSerializerHelper.SerializeToString(object)', validate parameter 'objectToSerialize' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeToString(System.Type,System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="158">Object 'memoryStream' can be disposed more than once in method 'XmlSerializerHelper.SerializeToString(Type, object)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 158</Issue>
            </Message>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Serialisation" File="XmlSerializerHelper.cs" Line="146">In member 'XmlSerializerHelper.SerializeToString(Type, object)', consider replacing the data type identifier 'object' in parameter name 'objectToSerialize' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Highlander.Utilities.Servers">
       <Types>
        <Type Name="BasicServer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'BasicServer' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="104">In method 'BasicServer.BasicServer()', call System.IDisposable.Dispose on object 'new TraceLogger(true)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="149">Change 'BasicServer.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message Id="MainThreadQueue" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="149">'BasicServer' contains field 'BasicServer.MainThreadQueue' that is of IDisposable type: 'AsyncThreadQueue'. Change the Dispose method on 'BasicServer' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="154">Modify 'BasicServer.Dispose()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="149">Modify 'BasicServer.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoggerRef" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_LoggerRef(Highlander.Utilities.RefCounting.Reference`1&lt;Highlander.Utilities.Logging.ILogger&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="118">In method 'BasicServer.LoggerRef.set(Reference&lt;ILogger&gt;)', call System.IDisposable.Dispose on object 'Reference&lt;ILogger&gt;.Create(new TraceLogger(true))' before all references to it are out of scope.</Issue>
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="118">In method 'BasicServer.LoggerRef.set(Reference&lt;ILogger&gt;)', call System.IDisposable.Dispose on object 'new TraceLogger(true)' before all references to it are out of scope.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#MainThreadQueue" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BasicServer.MainThreadQueue' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PostCleanup(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="457">Modify 'BasicServer.PostCleanup(object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PostStartup(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="377">Modify 'BasicServer.PostStartup(object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PreCleanup(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="443">Modify 'BasicServer.PreCleanup(object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetState(Highlander.Utilities.Servers.BasicServerState)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="262">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'BasicServer.SetState(BasicServerState)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Start()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="OtherSettings" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="338">Correct the spelling of the unrecognized token 'OtherSettings' in the literal '"Configuration value \'OtherSettings\': "'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="363">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'BasicServer.Start()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Stop()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Servers" File="Servers.cs" Line="412">Modify 'BasicServer.Stop()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IBasicServer" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetState()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'IBasicServer.GetState()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Stop()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Stop" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IBasicServer.Stop()' so that it no longer conflicts with the reserved language keyword 'Stop'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Highlander.Utilities.Threading">
       <Types>
        <Type Name="AsyncClass`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AsyncErrorCallback(Highlander.Utilities.Threading.AsyncClass`2&lt;!0,!1&gt;+AsyncErrorParams)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="265">Modify 'AsyncClass&lt;TData, TContext&gt;.AsyncErrorCallback(AsyncClass&lt;TData, TContext&gt;.AsyncErrorParams)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AsyncEventCallback(Highlander.Utilities.Threading.AsyncClass`2&lt;!0,!1&gt;+AsyncEventParams)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="511">Modify 'AsyncClass&lt;TData, TContext&gt;.AsyncEventCallback(AsyncClass&lt;TData, TContext&gt;.AsyncEventParams)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AsyncStateCallback(Highlander.Utilities.Threading.AsyncClass`2&lt;!0,!1&gt;+AsyncStateParams)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="326">Modify 'AsyncClass&lt;TData, TContext&gt;.AsyncStateCallback(AsyncClass&lt;TData, TContext&gt;.AsyncStateParams)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleException(System.Exception)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="295">Modify 'AsyncClass&lt;TData, TContext&gt;.HandleException(Exception)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Logger" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'AsyncClass&lt;TData, TContext&gt;.Logger' or change the field to one that is an immutable reference type. If the reference type 'ILogger' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AsyncClass&lt;TData, TContext&gt;.Logger' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NotifyEventHandlers(!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="533">Modify 'AsyncClass&lt;TData, TContext&gt;.NotifyEventHandlers(TData)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NotifyStateHandlers(Highlander.Utilities.Threading.AsyncClassState,Highlander.Utilities.Threading.AsyncClassState,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="363">Modify 'AsyncClass&lt;TData, TContext&gt;.NotifyStateHandlers(AsyncClassState, AsyncClassState, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnAsyncException(System.Exception)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="excp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="229">In method 'AsyncClass&lt;TData, TContext&gt;.OnAsyncException(Exception)', correct the spelling of 'excp' in parameter name 'excp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnAsyncSendOther(System.Object)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="243">In member 'AsyncClass&lt;TData, TContext&gt;.OnAsyncSendOther(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResetCallback(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="485">Modify 'AsyncClass&lt;TData, TContext&gt;.ResetCallback(object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendEventCallback(!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="560">Modify 'AsyncClass&lt;TData, TContext&gt;.SendEventCallback(TData)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StartCallback(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="422">Modify 'AsyncClass&lt;TData, TContext&gt;.StartCallback(object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StopCallback(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="456">Modify 'AsyncClass&lt;TData, TContext&gt;.StopCallback(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AsyncErrorDelegate`1" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="excp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'AsyncErrorDelegate&lt;TContext&gt;', correct the spelling of 'excp' in parameter name 'excp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'AsyncErrorDelegate&lt;TContext&gt;' so that it does not end in 'Delegate'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="AsyncEventDelegate`2" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'AsyncEventDelegate&lt;TData, TContext&gt;' so that it does not end in 'Delegate'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="AsyncEventThrottle`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'AsyncEventThrottle&lt;T&gt;' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DequeueItems(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="AsyncEventThrottle.cs" Line="122">Modify 'AsyncEventThrottle&lt;T&gt;.DequeueItems(object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="AsyncEventThrottle.cs" Line="56">Change 'AsyncEventThrottle&lt;T&gt;.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="AsyncEventThrottle.cs" Line="56">Modify 'AsyncEventThrottle&lt;T&gt;.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AsyncPriorityQueue" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'AsyncPriorityQueue' so that it does not end in 'Queue'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="AsyncPriorityStack" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'AsyncPriorityStack' so that it does not end in 'Stack'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="AsyncQueueBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DequeueItems(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="AsyncQueueBase.cs" Line="191">Modify 'AsyncQueueBase.DequeueItems(object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="AsyncQueueBase.cs" Line="76">Change 'AsyncQueueBase.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="AsyncQueueBase.cs" Line="76">Modify 'AsyncQueueBase.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WaitUntilLengthLEQ(System.Int64,System.TimeSpan)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LEQ" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="AsyncQueueBase.cs" Line="117">Correct the casing of 'LEQ' in member name 'AsyncQueueBase.WaitUntilLengthLEQ(long, TimeSpan)' by changing it to 'Leq'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AsyncResultNoResult" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AsyncWaitHandle" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_AsyncWaitHandle()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="95">In method 'AsyncResultNoResult.AsyncWaitHandle.get()', call System.IDisposable.Dispose on object 'mre' before all references to it are out of scope.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="AsyncStateDelegate`1" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'AsyncStateDelegate&lt;TContext&gt;' so that it does not end in 'Delegate'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="AsyncThreadQueue" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'AsyncThreadQueue' so that it does not end in 'Queue'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Dispatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Logger" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Logger(Highlander.Utilities.Logging.ILogger)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Dispatcher.cs" Line="81">Method 'Dispatcher.Logger.set(ILogger)' passes 'logger' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SetLastException(System.Exception)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="excp" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Dispatcher.cs" Line="106">Parameter 'excp' of 'Dispatcher.SetLastException(Exception)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DispatcherNode" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
           <Issue Name="NonBreaking" Certainty="95" Level="CriticalError">Implement IDisposable on 'DispatcherNode' because it creates members of the following IDisposable types: 'Guarded&lt;Queue&lt;DispatcherItem&gt;&gt;'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CallbackWrapper(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Dispatcher.cs" Line="237">Modify 'DispatcherNode.CallbackWrapper(object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Guarded`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="187">Modify 'Guarded&lt;T&gt;.Dispose()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Enter()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="108">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'Guarded&lt;T&gt;.Enter()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="120">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'Guarded&lt;T&gt;.Enter()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Locked(Highlander.Utilities.Threading.ProtectedSection`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="156">In externally visible method 'Guarded&lt;T&gt;.Locked(ProtectedSection&lt;T&gt;)', validate parameter 'userCode' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GuardedDictionary`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'GuardedDictionary&lt;TKey, TValue&gt;' so that it does not end in 'Dictionary'.</Issue>
          </Message>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'GuardedDictionary&lt;TKey, TValue&gt;' because it creates members of the following IDisposable types: 'Guarded&lt;Dictionary&lt;TKey, TValue&gt;&gt;'. If 'GuardedDictionary&lt;TKey, TValue&gt;' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetKeys()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="374">Change 'List&lt;TKey&gt;' in 'GuardedDictionary&lt;TKey, TValue&gt;.GetKeys()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="374">Change 'GuardedDictionary&lt;TKey, TValue&gt;.GetKeys()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValues()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="405">Change 'List&lt;TValue&gt;' in 'GuardedDictionary&lt;TKey, TValue&gt;.GetValues()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValues(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="389">Change 'List&lt;TValue&gt;' in 'GuardedDictionary&lt;TKey, TValue&gt;.GetValues(bool)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GuardedDictionary`2+LazyCreate" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'GuardedDictionary&lt;TKey, TValue&gt;.LazyCreate'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="GuardedList`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'GuardedList&lt;T&gt;' because it creates members of the following IDisposable types: 'Guarded&lt;List&lt;T&gt;&gt;'. If 'GuardedList&lt;T&gt;' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Clear()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="232">Change 'List&lt;T&gt;' in 'GuardedList&lt;T&gt;.Clear()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToList()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="221">Change 'List&lt;T&gt;' in 'GuardedList&lt;T&gt;.ToList()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IAsyncClass" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Stop(System.TimeSpan,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Stop" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IAsyncClass.Stop(TimeSpan, string)' so that it no longer conflicts with the reserved language keyword 'Stop'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IAsyncClassEx`2" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="TypeNewerVersion" Certainty="95" Level="CriticalError">Either replace the suffix 'Ex' in type name 'IAsyncClassEx&lt;TData, TContext&gt;' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the type it replaces.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="LoggedCounter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Decrement()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int64.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="LoggedCounter.cs" Line="69">Because the behavior of 'long.ToString(string)' could vary based on the current user's locale settings, replace this call in 'LoggedCounter.Decrement()' with a call to 'long.ToString(string, IFormatProvider)'. If the result of 'long.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Increment()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int64.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="LoggedCounter.cs" Line="50">Because the behavior of 'long.ToString(string)' could vary based on the current user's locale settings, replace this call in 'LoggedCounter.Increment()' with a call to 'long.ToString(string, IFormatProvider)'. If the result of 'long.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NonblockingSpinlock" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Nonblocking" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Nonblocking' in type name 'NonblockingSpinlock'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ObjectLock`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Enter(!0&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="426">Remove 'ObjectLock&lt;T&gt;.Enter(ref T)' from 'ObjectLock&lt;T&gt;' or make it an instance member.</Issue>
            </Message>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="426">Consider a design that does not require that 'target' be a reference parameter.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="447">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ObjectLock&lt;T&gt;.Enter(ref T)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Leave(!0&amp;,!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="461">Remove 'ObjectLock&lt;T&gt;.Leave(ref T, T)' from 'ObjectLock&lt;T&gt;' or make it an instance member.</Issue>
            </Message>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="461">Consider a design that does not require that 'target' be a reference parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Protect(!0&amp;,Highlander.Utilities.Threading.ProtectedSection`1&lt;!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="471">Remove 'ObjectLock&lt;T&gt;.Protect(ref T, ProtectedSection&lt;T&gt;)' from 'ObjectLock&lt;T&gt;' or make it an instance member.</Issue>
            </Message>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="471">Consider a design that does not require that 'target' be a reference parameter.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Guarded.cs" Line="476">In externally visible method 'ObjectLock&lt;T&gt;.Protect(ref T, ProtectedSection&lt;T&gt;)', validate parameter 'userCode' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WaitConditionDelegate" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'WaitConditionDelegate' so that it does not end in 'Delegate'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="WaitHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'WaitHelper' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#WaitFor(System.TimeSpan,Highlander.Utilities.Threading.WaitConditionDelegate,System.TimeSpan,System.TimeSpan,System.Int32,System.TimeSpan,System.String,System.TimeSpan,Highlander.Utilities.Threading.WaitLoggingDelegate)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="579">In method 'WaitHelper.WaitFor(TimeSpan, WaitConditionDelegate, TimeSpan, TimeSpan, int, TimeSpan, string, TimeSpan, WaitLoggingDelegate)', correct the spelling of 'Inc' in parameter name 'sleepInc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Mult" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="579">In method 'WaitHelper.WaitFor(TimeSpan, WaitConditionDelegate, TimeSpan, TimeSpan, int, TimeSpan, string, TimeSpan, WaitLoggingDelegate)', correct the spelling of 'Mult' in parameter name 'sleepMult' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Alex\Documents\Visual Studio 2019\Projects\Highlander.Net\Utilities\Util\Threading" File="Threading.cs" Line="586">In externally visible method 'WaitHelper.WaitFor(TimeSpan, WaitConditionDelegate, TimeSpan, TimeSpan, int, TimeSpan, string, TimeSpan, WaitLoggingDelegate)', validate parameter 'exitCondition' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WaitLoggingDelegate" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2020-02-07 09:56:10Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'WaitLoggingDelegate' so that it does not end in 'Delegate'.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Resolution Name="Default">{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182212.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveParametersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1005">
   <Name>Avoid excessive parameters on generic types</Name>
   <Description>Avoid generic types with more than two type parameters as users have difficulties understanding what type parameters represent in types with long type parameter lists.</Description>
   <Resolution Name="Default">Consider a design where {0} has no more than 2 type parameters.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182129.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
   <Name>Avoid out parameters</Name>
   <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be an out parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182131.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816">
   <Name>Call GC.SuppressFinalize correctly</Name>
   <Description>Call GC.SuppressFinalize to suppress finalization of your instance once Dispose has been called. Objects that implement IDisposable should call SuppressFinalize from the IDisposable.Dispose method to prevent the garbage collector from calling Object.Finalize on an object that does not require it.</Description>
   <Resolution Name="NotCalled">Change {0} to call {1}. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Resolution>
   <Resolution Name="NotCalledWithFinalizer">Change {0} to call {1}. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182269.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeCompoundWord">In member {0}, the discrete term '{1}' in parameter name {2} should be expressed as a compound word, '{3}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>Disposable fields should be disposed</Name>
   <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
   <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182328.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 47</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104">
   <Name>Do not declare read only mutable reference types</Name>
   <Description>A read-only declaration for a mutable reference type does not prevent the field's instance data from being modified. For example, a read-only StringBuilder field declaration does not make sense, since the data encapsulated by the StringBuilder can be modified using the read-only reference.</Description>
   <Resolution Name="Default">Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182302.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Error</MessageLevel>
   <File Name="securityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000">
   <Name>Do not declare static members on generic types</Name>
   <Description>The syntax for calling static members on generic types is complex as the type parameter has to be specified for each call.</Description>
   <Resolution Name="Default">Remove {0} from {1} or make it an instance member.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182139.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806">
   <Name>Do not ignore method results</Name>
   <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
   <Resolution Name="TryParse">{0} calls {1} but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182273.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045">
   <Name>Do not pass types by reference</Name>
   <Description>Although there are legitimate times to use reference parameters, such use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be a reference parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182146.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotUseTimersThatPreventPowerStateChanges" Category="Microsoft.Mobility" CheckId="CA1601">
   <Name>Do not use timers that prevent power state changes</Name>
   <Description>Do not poll more often than or utilize timers that fire more frequently than once per second. Higher frequency periodic activity will keep the CPU busy and interfere with power-saving idle timers that turn off the display and hard disks.</Description>
   <Resolution Name="Default">Modify the call to {0} in method {1} to set the timer interval to a value that's greater than or equal to one second.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182230.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="mobilityrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="DelegateParameter">In delegate {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Resolution Name="TypeTypeParameterMoreMeaningfulName">On type {0}, consider providing a more meaningful name than generic type parameter name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715">
   <Name>Identifiers should have correct prefix</Name>
   <Description>Prefix interface names with the letter 'I' to indicate that the type is an interface, as in IFormattable. Prefix generic type parameter names with the letter 'T' and provide them with descriptive names, as in Dictionary&lt;TKey, TValue&gt;, unless a single 'T' is completely self-explanatory, as in Collection&lt;T&gt;. Use Pascal casing for both interface and type parameter names. Use abbreviations sparingly. Do not use the underscore character. Do use similar names when defining a class/interface pair where the class is a standard implementation of the interface. The names should differ only by the letter I prefixed on the interface name, as with Component and IComponent.</Description>
   <Resolution Name="TypeTypeParameter">On type {0}, prefix generic type parameter name {1} with 'T'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182243.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Resolution Name="LanguageSpecificMember">Consider replacing the language-specific data type identifier '{0}' in member name {1} with either a language-independent equivalent or a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
   <Resolution Name="TypeNewerVersion">Either replace the suffix '{0}' in type name {1} with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the type it replaces.</Resolution>
   <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182247.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182248.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
   <Resolution Name="FinalizeImplementation">Modify {0} so that it calls Dispose(false) and then returns.</Resolution>
   <Resolution Name="IDisposableReimplementation">Remove IDisposable from the list of interfaces implemented by {0} and override the base class Dispose implementation instead.</Resolution>
   <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240">
   <Name>Implement ISerializable correctly</Name>
   <Description>If a type is assignable to ISerializable, it should implement GetObjectData. For unsealed types, the GetObjectData method should be callable and overridable by derived types.</Description>
   <Resolution Name="MakeOverridable">Make {0}.GetObjectData virtual and overridable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182342.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="Accessibility">Change the accessibility of {0} to {1}.</Resolution>
   <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182151.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="IncorrectMessage">Method {0} passes parameter name '{1}' as the {2} argument to a {3} constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Resolution>
   <Resolution Name="IncorrectParameterName">Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAllNonSerializableFields" Category="Microsoft.Usage" CheckId="CA2235">
   <Name>Mark all non-serializable fields</Name>
   <Description>All fields that cannot be serialized directly should have the NonSerializedAttribute. Types that have the SerializableAttribute should not have fields of types that do not have the SerializableAttribute unless the fields are marked with the NonSerializedAttribute.</Description>
   <Resolution Name="Default">Field {0} is a member of type {1}, which is serializable, but is of type {2}, which is not serializable. Add the NonSerializedAttribute to {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182349.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059">
   <Name>Members should not expose certain concrete types</Name>
   <Description>Members should not expose certain concrete types.</Description>
   <Resolution Name="Xml">Modify member {0} so that it no longer exposes the concrete type {1}. Use IXPathNavigable to represent XML data sources.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182160.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182162.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182353.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308">
   <Name>Normalize strings to uppercase</Name>
   <Description>Strings should be normalized to upper-case.</Description>
   <Resolution Name="ToUpperInvariant">In method {0}, replace the call to {1} with String.ToUpperInvariant().</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814">
   <Name>Prefer jagged arrays over multidimensional</Name>
   <Description>Multidimensional arrays can have a negative impact on performance. Use a jagged array if possible.</Description>
   <Resolution Name="Body">{0} uses a multidimensional array of {1}. Replace it with a jagged array if possible.</Resolution>
   <Resolution Name="Default">{0} is a multidimensional array. Replace it with a jagged array if possible.</Resolution>
   <Resolution Name="Return">{0} returns a multidimensional array of {1}. Replace it with a jagged array if possible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182277.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306">
   <Name>Set locale for data types</Name>
   <Description>In most cases, Locale should be explicitly set to CultureInfo.InvariantCulture on DataSet and DataTable instances. Upon creation of a DataSet or DataTable instance, the Locale is set to the current culture. In most cases, the Locale should be set to CultureInfo.InvariantCulture to guarantee proper sorting behavior in all cultures.</Description>
   <Resolution Name="Default">Be sure to set the {0} Locale property wherever {1} creates an instance of that type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182188.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="CSharp2_0">Because type {0} contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182279.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Resolution Name="NonBreaking">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309">
   <Name>Use ordinal StringComparison</Name>
   <Description>For non-linguistic comparisons, StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase should be used instead of the linguistically-sensitive StringComparison.InvariantCulture.</Description>
   <Resolution Name="StringComparer">{0} passes '{1}' as the 'StringComparer' parameter to {2}. To perform a non-linguistic comparison, specify 'StringComparer.Ordinal' or 'StringComparer.OrdinalIgnoreCase' instead.</Resolution>
   <Resolution Name="StringComparison">{0} passes '{1}' as the 'StringComparison' parameter to {2}. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385972.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="16.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="16.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
